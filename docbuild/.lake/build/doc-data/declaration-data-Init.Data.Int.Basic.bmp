{"name":"Init.Data.Int.Basic","instances":[{"typeNames":["Int"],"name":"instNatCastInt","className":"NatCast"},{"typeNames":["Int"],"name":"instOfNat","className":"OfNat"},{"typeNames":["Int"],"name":"Int.instInhabited","className":"Inhabited"},{"typeNames":["Int"],"name":"Int.instNegInt","className":"Neg"},{"typeNames":["Int"],"name":"Int.instAdd","className":"Add"},{"typeNames":["Int"],"name":"Int.instMul","className":"Mul"},{"typeNames":["Int"],"name":"Int.instSub","className":"Sub"},{"typeNames":["Int"],"name":"Int.instLEInt","className":"LE"},{"typeNames":["Int"],"name":"Int.instLTInt","className":"LT"},{"typeNames":["Eq"],"name":"Int.instDecidableEq","className":"Decidable"},{"typeNames":["LE.le"],"name":"Int.decLe","className":"Decidable"},{"typeNames":["LT.lt"],"name":"Int.decLt","className":"Decidable"},{"typeNames":["Int"],"name":"Int.instDvd","className":"Dvd"},{"typeNames":["Int"],"name":"Int.instNatPow","className":"NatPow"},{"typeNames":["Int"],"name":"Int.instLawfulBEq","className":"LawfulBEq"},{"typeNames":["Int"],"name":"Int.instMin","className":"Min"},{"typeNames":["Int"],"name":"Int.instMax","className":"Max"},{"typeNames":["Int"],"name":"instIntCastInt","className":"IntCast"},{"typeNames":["Int"],"name":"instCoeTailIntOfIntCast","className":"CoeTail"},{"typeNames":["Int"],"name":"instCoeHTCTIntOfIntCast","className":"CoeHTCT"}],"imports":["Init.Data.Cast","Init.Data.Nat.Div"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L360-L360","name":"instCoeHTCTIntOfIntCast","line":360,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instCoeHTCTIntOfIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instCoeHTCTIntOfIntCast\"><span class=\"name\">instCoeHTCTIntOfIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L357-L357","name":"instCoeTailIntOfIntCast","line":357,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instCoeTailIntOfIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instCoeTailIntOfIntCast\"><span class=\"name\">instCoeTailIntOfIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L348-L354","name":"Int.cast","line":348,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.cast","doc":"Apply the canonical homomorphism from `Int` to a type `R` from an `IntCast R` instance.\n\nIn Mathlib there will be such a homomorphism whenever `R` is an additive group with a `1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.cast\"><span class=\"name\">Int</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L346-L346","name":"instIntCastInt","line":346,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instIntCastInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instIntCastInt\"><span class=\"name\">instIntCastInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L344-L344","name":"IntCast.intCast","line":344,"kind":"def","docLink":"./Init/Data/Int/Basic.html#IntCast.intCast","doc":"The canonical map `Int → R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#IntCast.intCast\"><span class=\"name\">IntCast</span>.<span class=\"name\">intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L342-L342","name":"IntCast.mk","line":342,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#IntCast.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#IntCast.mk\"><span class=\"name\">IntCast</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(intCast : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L338-L344","name":"IntCast","line":338,"kind":"class","docLink":"./Init/Data/Int/Basic.html#IntCast","doc":"The canonical homomorphism `Int → R`.\nIn most use cases `R` will have a ring structure and this will be a ring homomorphism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#IntCast\"><span class=\"name\">IntCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L334-L334","name":"Int.instMax","line":334,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instMax\"><span class=\"name\">Int</span>.<span class=\"name\">instMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L332-L332","name":"Int.instMin","line":332,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instMin\"><span class=\"name\">Int</span>.<span class=\"name\">instMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L328-L330","name":"Int.instLawfulBEq","line":328,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLawfulBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instLawfulBEq\"><span class=\"name\">Int</span>.<span class=\"name\">instLawfulBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L325-L326","name":"Int.instNatPow","line":325,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instNatPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instNatPow\"><span class=\"name\">Int</span>.<span class=\"name\">instNatPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#NatPow\">NatPow</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L312-L323","name":"Int.pow","line":312,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.pow","doc":"Power of an integer to some natural number.\n\n```\n#eval (2 : Int) ^ 4 -- 16\n#eval (10 : Int) ^ 0 -- 1\n#eval (0 : Int) ^ 10 -- 0\n#eval (-7 : Int) ^ 3 -- -343\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.pow\"><span class=\"name\">Int</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L303-L308","name":"Int.instDvd","line":303,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instDvd","doc":"Divisibility of integers. `a ∣ b` (typed as `\\|`) says that\nthere is some `c` such that `b = a * c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instDvd\"><span class=\"name\">Int</span>.<span class=\"name\">instDvd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Dvd\">Dvd</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L293-L299","name":"Int.toNat'","line":293,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.toNat'","doc":"* If `n : Nat`, then `int.toNat' n = some n`\n* If `n : Int` is negative, then `int.toNat' n = none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.toNat'\"><span class=\"name\">Int</span>.<span class=\"name\">toNat'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L280-L291","name":"Int.toNat","line":280,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.toNat","doc":"Turns an integer into a natural number, negative numbers become\n`0`.\n\n```\n#eval (7 : Int).toNat -- 7\n#eval (0 : Int).toNat -- 0\n#eval (-7 : Int).toNat -- 0\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.toNat\"><span class=\"name\">Int</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L269-L276","name":"Int.sign","line":269,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.sign","doc":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.sign\"><span class=\"name\">Int</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L252-L265","name":"Int.natAbs","line":252,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.natAbs","doc":"Absolute value (`Nat`) of an integer.\n\n```\n#eval (7 : Int).natAbs -- 7\n#eval (0 : Int).natAbs -- 0\n#eval (-11 : Int).natAbs -- 11\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.natAbs\"><span class=\"name\">Int</span>.<span class=\"name\">natAbs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L238-L249","name":"Int.decLt","line":238,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.decLt","doc":"Decides whether `a < b`.\n\n```\n#eval `¬ ( (7 : Int) < 0 )` -- true\n#eval `¬ ( (0 : Int) < 0 )` -- true\n#eval `(7 : Int) < 10` -- true\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.decLt\"><span class=\"name\">Int</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L225-L236","name":"Int.decLe","line":225,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.decLe","doc":"Decides whether `a ≤ b`.\n\n```\n#eval ¬ ( (7 : Int) ≤ (0 : Int) ) -- true\n#eval (0 : Int) ≤ (0 : Int) -- true\n#eval (7 : Int) ≤ (10 : Int) -- true\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.decLe\"><span class=\"name\">Int</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L207-L207","name":"Int.instDecidableEq","line":207,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instDecidableEq\"><span class=\"name\">Int</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L186-L205","name":"Int.decEq","line":186,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.decEq","doc":"Decides equality between two `Int`s.\n\n```\n#eval (7 : Int) = (3 : Int) + (4 : Int) -- true\n#eval (6 : Int) = (3 : Int) * (2 : Int) -- true\n#eval ¬ (6 : Int) = (3 : Int) -- true\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.decEq\"><span class=\"name\">Int</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L182-L183","name":"Int.instLTInt","line":182,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLTInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instLTInt\"><span class=\"name\">Int</span>.<span class=\"name\">instLTInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L179-L180","name":"Int.lt","line":179,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.lt","doc":"Definition of `a < b`, encoded as `a + 1 ≤ b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.lt\"><span class=\"name\">Int</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L176-L177","name":"Int.instLEInt","line":176,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLEInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instLEInt\"><span class=\"name\">Int</span>.<span class=\"name\">instLEInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L173-L174","name":"Int.le","line":173,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.le","doc":"Definition of `a ≤ b`, encoded as `b - a ≥ 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.le\"><span class=\"name\">Int</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L170-L171","name":"Int.NonNeg.mk","line":170,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.NonNeg.mk","doc":"Sole constructor, proving that `ofNat n` is positive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.NonNeg.mk\"><span class=\"name\">Int</span>.<span class=\"name\">NonNeg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">Int.ofNat</a> <span class=\"fn\">n</span>)</span>.NonNeg</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L168-L171","name":"Int.NonNeg","line":168,"kind":"inductive","docLink":"./Init/Data/Int/Basic.html#Int.NonNeg","doc":"A proof that an `Int` is non-negative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.NonNeg\"><span class=\"name\">Int</span>.<span class=\"name\">NonNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L165-L166","name":"Int.instSub","line":165,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instSub\"><span class=\"name\">Int</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L153-L163","name":"Int.sub","line":153,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.sub","doc":"Subtraction of two integers.\n\n```\n#eval (63 : Int) - (6 : Int) -- 57\n#eval (7 : Int) - (0 : Int) -- 7\n#eval (0 : Int) - (7 : Int) -- -7\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.sub\"><span class=\"name\">Int</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L150-L151","name":"Int.instMul","line":150,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instMul\"><span class=\"name\">Int</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L133-L148","name":"Int.mul","line":133,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.mul","doc":"Multiplication of two integers.\n\n```\n#eval (63 : Int) * (6 : Int) -- 378\n#eval (6 : Int) * (-6 : Int) -- -36\n#eval (7 : Int) * (0 : Int) -- 0\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.mul\"><span class=\"name\">Int</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L129-L130","name":"Int.instAdd","line":129,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instAdd\"><span class=\"name\">Int</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L113-L127","name":"Int.add","line":113,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.add","doc":"Addition of two integers.\n\n```\n#eval (7 : Int) + (6 : Int) -- 13\n#eval (6 : Int) + (-6 : Int) -- 0\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.add\"><span class=\"name\">Int</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L106-L110","name":"Int.subNatNat","line":106,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.subNatNat","doc":"Subtraction of two natural numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.subNatNat\"><span class=\"name\">Int</span>.<span class=\"name\">subNatNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L102-L104","name":"Int.instNegInt","line":102,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instNegInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instNegInt\"><span class=\"name\">Int</span>.<span class=\"name\">instNegInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L85-L92","name":"Int.neg","line":85,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.neg","doc":"Negation of an integer.\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.neg\"><span class=\"name\">Int</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L79-L82","name":"Int.negOfNat","line":79,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.negOfNat","doc":"Negation of a natural number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.negOfNat\"><span class=\"name\">Int</span>.<span class=\"name\">negOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L77-L77","name":"Int.ofNat_two","line":77,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_two\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_two</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L75-L75","name":"Int.ofNat_one","line":75,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_one\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L73-L73","name":"Int.ofNat_zero","line":73,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_zero\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L71-L71","name":"Int.ofNat_eq_coe","line":71,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_eq_coe\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">Int.ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L67-L67","name":"Int.zero_ne_one","line":67,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.zero_ne_one\"><span class=\"name\">Int</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L65-L65","name":"Int.default_eq_zero","line":65,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.default_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.default_eq_zero\"><span class=\"name\">Int</span>.<span class=\"name\">default_eq_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L63-L63","name":"Int.instInhabited","line":63,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instInhabited\"><span class=\"name\">Int</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L57-L61","name":"Int.«term-[_+1]»","line":57,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.«term-[_+1]»","doc":"`-[n+1]` is suggestive notation for `negSucc n`, which is the second constructor of\n`Int` for making strictly negative numbers by mapping `n : Nat` to `-(n + 1)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.«term-[_+1]»\"><span class=\"name\">Int</span>.<span class=\"name\">«term-[_+1]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L52-L53","name":"instOfNat","line":52,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instOfNat\"><span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L50-L50","name":"instNatCastInt","line":50,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instNatCastInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instNatCastInt\"><span class=\"name\">instNatCastInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L43-L45","name":"Int.negSucc","line":43,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.negSucc","doc":"The negation of the successor of a natural number is an integer\n(`-1` to `-∞`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L41-L42","name":"Int.ofNat","line":41,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.ofNat","doc":"A natural number is an integer (`0` to `∞`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/Basic.lean#L26-L45","name":"Int","line":26,"kind":"inductive","docLink":"./Init/Data/Int/Basic.html#Int","doc":"The type of integers. It is defined as an inductive type based on the\nnatural number type `Nat` featuring two constructors: \"a natural\nnumber is an integer\", and \"the negation of a successor of a natural\nnumber is an integer\". The former represents integers between `0`\n(inclusive) and `∞`, and the latter integers between `-∞` and `-1`\n(inclusive).\n\nThis type is special-cased by the compiler. The runtime has a special\nrepresentation for `Int` which stores \"small\" signed numbers directly,\nand larger numbers use an arbitrary precision \"bignum\" library\n(usually [GMP](https://gmplib.org/)). A \"small number\" is an integer\nthat can be encoded with 63 bits (31 bits on 32-bits architectures).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int\"><span class=\"name\">Int</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}