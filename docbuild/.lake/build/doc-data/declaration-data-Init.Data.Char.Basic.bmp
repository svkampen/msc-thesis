{"name":"Init.Data.Char.Basic","instances":[{"typeNames":["Char"],"name":"Char.instLT","className":"LT"},{"typeNames":["Char"],"name":"Char.instLE","className":"LE"},{"typeNames":["LT.lt"],"name":"Char.instDecidableLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"Char.instDecidableLe","className":"Decidable"},{"typeNames":["Char"],"name":"Char.instInhabited","className":"Inhabited"}],"imports":["Init.Data.UInt.BasicAux"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L99-L105","name":"Char.toUpper","line":99,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toUpper","doc":"Convert a lower case character to its upper case character.\n\nOnly works on basic latin letters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L91-L97","name":"Char.toLower","line":91,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toLower","doc":"Convert an upper case character to its lower case character.\n\nOnly works on basic latin letters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toLower\"><span class=\"name\">Char</span>.<span class=\"name\">toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L87-L89","name":"Char.isAlphanum","line":87,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isAlphanum","doc":"Is the character in `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isAlphanum\"><span class=\"name\">Char</span>.<span class=\"name\">isAlphanum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L83-L85","name":"Char.isDigit","line":83,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isDigit","doc":"Is the character in `0123456789`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isDigit\"><span class=\"name\">Char</span>.<span class=\"name\">isDigit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L79-L81","name":"Char.isAlpha","line":79,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isAlpha","doc":"Is the character in `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L75-L77","name":"Char.isLower","line":75,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isLower","doc":"Is the character in `abcdefghijklmnopqrstuvwxyz`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isLower\"><span class=\"name\">Char</span>.<span class=\"name\">isLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L71-L73","name":"Char.isUpper","line":71,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isUpper","doc":"Is the character in `ABCDEFGHIJKLMNOPQRSTUVWXYZ`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isUpper\"><span class=\"name\">Char</span>.<span class=\"name\">isUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L67-L69","name":"Char.isWhitespace","line":67,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isWhitespace","doc":"Is the character a space (U+0020) a tab (U+0009), a carriage return (U+000D) or a newline (U+000A)? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isWhitespace\"><span class=\"name\">Char</span>.<span class=\"name\">isWhitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L64-L65","name":"Char.instInhabited","line":64,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instInhabited\"><span class=\"name\">Char</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L61-L62","name":"Char.ofUInt8","line":61,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.ofUInt8","doc":"The numbers from 0 to 256 are all valid UTF-8 characters, so we can embed one in the other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.ofUInt8\"><span class=\"name\">Char</span>.<span class=\"name\">ofUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L57-L59","name":"Char.toUInt8","line":57,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toUInt8","doc":"Convert a character into a `UInt8`, by truncating (reducing modulo 256) if necessary. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toUInt8\"><span class=\"name\">Char</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L53-L55","name":"Char.toNat","line":53,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.toNat","doc":"Underlying unicode code point as a `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toNat\"><span class=\"name\">Char</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L50-L51","name":"Char.isValidChar_zero","line":50,"kind":"theorem","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidChar_zero\"><span class=\"name\">Char</span>.<span class=\"name\">isValidChar_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#isValidChar\">isValidChar</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L43-L48","name":"Char.isValidChar_of_isValidCharNat","line":43,"kind":"theorem","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidCharNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidCharNat\"><span class=\"name\">Char</span>.<span class=\"name\">isValidChar_of_isValidCharNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\">Char.isValidCharNat</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#isValidChar\">isValidChar</a> <span class=\"fn\">(<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'\">UInt32.ofNat'</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L34-L41","name":"Char.isValidUInt32","line":34,"kind":"theorem","docLink":"./Init/Data/Char/Basic.html#Char.isValidUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidUInt32\"><span class=\"name\">Char</span>.<span class=\"name\">isValidUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\">Char.isValidCharNat</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L30-L32","name":"Char.isValidCharNat","line":30,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.isValidCharNat","doc":"Determines if the given nat is a valid [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value)."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\"><span class=\"name\">Char</span>.<span class=\"name\">isValidCharNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L27-L28","name":"Char.instDecidableLe","line":27,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instDecidableLe\"><span class=\"name\">Char</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L24-L25","name":"Char.instDecidableLt","line":24,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instDecidableLt\"><span class=\"name\">Char</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L22-L22","name":"Char.instLE","line":22,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instLE\"><span class=\"name\">Char</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L21-L21","name":"Char.instLT","line":21,"kind":"instance","docLink":"./Init/Data/Char/Basic.html#Char.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instLT\"><span class=\"name\">Char</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L19-L19","name":"Char.le","line":19,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.le\"><span class=\"name\">Char</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L18-L18","name":"Char.lt","line":18,"kind":"def","docLink":"./Init/Data/Char/Basic.html#Char.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.lt\"><span class=\"name\">Char</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Char/Basic.lean#L9-L14","name":"isValidChar","line":9,"kind":"def","docLink":"./Init/Data/Char/Basic.html#isValidChar","doc":"Determines if the given integer is a valid [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value).\n\nNote that values in `[0xd800, 0xdfff]` are reserved for [UTF-16 surrogate pairs](https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#isValidChar\"><span class=\"name\">isValidChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}