{"name":"Lean.Language.Lean","instances":[{"typeNames":["Lean.Language.Lean.LeanProcessingM","Lean.Language.Lean.LeanProcessingT"],"name":"Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","className":"MonadLift"},{"typeNames":["Lean.Language.ProcessingT","Lean.Language.Lean.LeanProcessingT"],"name":"Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","className":"MonadLift"}],"imports":["Lean.Language.Basic","Lean.Language.Lean.Types","Lean.Parser.Module","Lean.Elab.Import"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L643-L647","name":"Lean.Language.Lean.waitForFinalCmdState?.goCmd","line":643,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?.goCmd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?.goCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">waitForFinalCmdState?</span>.<span class=\"name\">goCmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(snap : <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">Lean.Language.Lean.CommandParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Lean.Elab.Command.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L638-L647","name":"Lean.Language.Lean.waitForFinalCmdState?","line":638,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?","doc":"Waits for and returns final command state, if importing was successful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">waitForFinalCmdState?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(snap : <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">Lean.Language.Lean.InitialSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Lean.Elab.Command.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L625-L636","name":"Lean.Language.Lean.processCommands","line":625,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.processCommands","doc":"Convenience function for tool uses of the language processor that skips header handling.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.processCommands\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">processCommands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(inputCtx : <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Lean.Parser.InputContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parserState : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Lean.Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(commandState : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Lean.Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(old? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Lean.Parser.InputContext</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">Lean.Language.Lean.CommandParsedSnapshot</a>)</span></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">Lean.Language.Lean.CommandParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L568-L623","name":"Lean.Language.Lean.process.doElab","line":568,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.doElab","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.doElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">doElab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmdState : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Lean.Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beginPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snap : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Lean.Language.SnapshotBundle</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Lean.Language.DynamicSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(finishedPromise : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandFinishedSnapshot\">Lean.Language.Lean.CommandFinishedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacticCache : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache\">Lean.Elab.Tactic.Cache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Lean.Elab.Command.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L461-L566","name":"Lean.Language.Lean.process.parseCmd","line":461,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseCmd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">parseCmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(old? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">Lean.Language.Lean.CommandParsedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parserState : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Lean.Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmdState : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Lean.Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prom : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">Lean.Language.Lean.CommandParsedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sync : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L393-L459","name":"Lean.Language.Lean.process.processHeader","line":393,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.processHeader","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.processHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">processHeader</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(setupImports :\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’\n    <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">Lean.Language.ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a>\n      <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">Lean.Language.Lean.HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parserState : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Lean.Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">Lean.Language.Lean.HeaderProcessedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L312-L391","name":"Lean.Language.Lean.process.parseHeader","line":312,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseHeader","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">parseHeader</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(setupImports :\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’\n    <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">Lean.Language.ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a>\n      <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">Lean.Language.Lean.HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(old? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderParsedSnapshot\">Lean.Language.Lean.HeaderParsedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderParsedSnapshot\">Lean.Language.Lean.HeaderParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L285-L623","name":"Lean.Language.Lean.process","line":285,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process","doc":"Entry point of the Lean language processor.\n\nThe `setupImports` function is called after the header has been parsed and before the first command\nis parsed in order to supply additional file metadata (or abort with a given terminal snapshot); see\n`SetupImportsResult`.\n\n`old?` is a previous resulting snapshot, if any, to be reused for incremental processing.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(setupImports :\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’\n    <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">Lean.Language.ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a>\n      <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">Lean.Language.Lean.HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(old? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">Lean.Language.Lean.InitialSnapshot</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">Lean.Language.ProcessingM</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">Lean.Language.Lean.InitialSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L244-L283","name":"Lean.Language.Lean.reparseOptions","line":244,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.reparseOptions","doc":"Parses values of options registered during import and left by the C++ frontend as strings, fails if\nany option names remain unknown.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.reparseOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">reparseOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L237-L242","name":"Lean.Language.Lean.internal.cmdlineSnapshots","line":237,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.internal.cmdlineSnapshots","doc":"Performance option used by cmdline driver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.internal.cmdlineSnapshots\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">internal</span>.<span class=\"name\">cmdlineSnapshots</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L235-L235","name":"Lean.Language.Lean.SetupImportsResult.trustLevel","line":235,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.trustLevel","doc":"Kernel trust level. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.trustLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">trustLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L233-L233","name":"Lean.Language.Lean.SetupImportsResult.opts","line":233,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.opts","doc":"Options provided outside of the file content, e.g. on the cmdline or in the lakefile. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L231-L231","name":"Lean.Language.Lean.SetupImportsResult.mainModuleName","line":231,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mainModuleName","doc":"Module name of the file being processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mainModuleName\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">mainModuleName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L229-L229","name":"Lean.Language.Lean.SetupImportsResult.mk","line":229,"kind":"ctor","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mainModuleName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(trustLevel : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">Lean.Language.Lean.SetupImportsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L224-L235","name":"Lean.Language.Lean.SetupImportsResult","line":224,"kind":"structure","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult","doc":"Result of retrieving additional metadata about the current file after parsing imports. In the\nlanguage server, these are derived from the `lake setup-file` result. On the cmdline and for similar\nsimple uses, these can be computed eagerly without looking at the imports.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L208-L213","name":"Lean.Language.Lean.isBeforeEditPos","line":208,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.isBeforeEditPos","doc":"Returns true if there was a previous run and the given position is before any textual change\ncompared to it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.isBeforeEditPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">isBeforeEditPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L196-L206","name":"Lean.Language.Lean.LeanProcessingM.run","line":196,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM.run","doc":"Embeds a `LeanProcessingM` action into `ProcessingM`, optionally using the old input string to speed\nup reuse analysis and supplying a cancellation token that should be triggered as soon as reuse is\nruled out.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Î± : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(oldInputCtx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Lean.Parser.InputContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(oldCancelTk? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">Lean.Language.ProcessingM</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L193-L194","name":"Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","line":193,"kind":"instance","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftProcessingTLeanProcessingT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">Lean.Language.ProcessingT</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\">Lean.Language.Lean.LeanProcessingT</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L190-L191","name":"Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","line":190,"kind":"instance","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftLeanProcessingMLeanProcessingTIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">Lean.Language.Lean.LeanProcessingM</a> <span class=\"fn\">(<a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\">Lean.Language.Lean.LeanProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L187-L188","name":"Lean.Language.Lean.LeanProcessingM","line":187,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM","doc":"Monad holding all relevant data for Lean processing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Î± : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L185-L186","name":"Lean.Language.Lean.LeanProcessingT","line":185,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT","doc":"Monad transformer holding all relevant data for Lean processing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Î± : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L183-L183","name":"Lean.Language.Lean.LeanProcessingContext.newCancelTk","line":183,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.newCancelTk","doc":"Cancellation token of the current run. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.newCancelTk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">newCancelTk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">Lean.Language.Lean.LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L181-L181","name":"Lean.Language.Lean.LeanProcessingContext.oldCancelTk?","line":181,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.oldCancelTk?","doc":"Cancellation token of the previous invocation, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.oldCancelTk?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">oldCancelTk?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">Lean.Language.Lean.LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L179-L179","name":"Lean.Language.Lean.LeanProcessingContext.firstDiffPos?","line":179,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.firstDiffPos?","doc":"Position of the first file difference if there was a previous invocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.firstDiffPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">firstDiffPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">Lean.Language.Lean.LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L177-L177","name":"Lean.Language.Lean.LeanProcessingContext.mk","line":177,"kind":"ctor","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toProcessingContext : <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">Lean.Language.ProcessingContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(firstDiffPos? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(oldCancelTk? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newCancelTk : <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">Lean.Language.Lean.LeanProcessingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L176-L183","name":"Lean.Language.Lean.LeanProcessingContext","line":176,"kind":"structure","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext","doc":"Lean-specific processing context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">Lean.Language.ProcessingContext</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Language/Lean.lean#L169-L174","name":"Lean.Language.Lean.stderrAsMessages","line":169,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.stderrAsMessages","doc":"Option for capturing output to stderr during elaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.stderrAsMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">stderrAsMessages</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}