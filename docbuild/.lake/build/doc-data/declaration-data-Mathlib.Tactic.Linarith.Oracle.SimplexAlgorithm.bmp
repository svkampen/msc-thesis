{"name":"Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm","instances":[],"imports":["Init","Mathlib.Tactic.Linarith.Datatypes","Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm.PositiveVector"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.lean#L48-L56","name":"Linarith.CertificateOracle.simplexAlgorithmDense","line":48,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.CertificateOracle.simplexAlgorithmDense","doc":"The same oracle as `CertificateOracle.simplexAlgorithmSparse`, but uses dense matrices. Works faster\non dense states.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.CertificateOracle.simplexAlgorithmDense\"><span class=\"name\">Linarith</span>.<span class=\"name\">CertificateOracle</span>.<span class=\"name\">simplexAlgorithmDense</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle\">Linarith.CertificateOracle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.lean#L41-L46","name":"Linarith.CertificateOracle.simplexAlgorithmSparse","line":41,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.CertificateOracle.simplexAlgorithmSparse","doc":"An oracle that uses the Simplex Algorithm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.CertificateOracle.simplexAlgorithmSparse\"><span class=\"name\">Linarith</span>.<span class=\"name\">CertificateOracle</span>.<span class=\"name\">simplexAlgorithmSparse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle\">Linarith.CertificateOracle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.lean#L29-L35","name":"Linarith.SimplexAlgorithm.postprocess","line":29,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.SimplexAlgorithm.postprocess","doc":"Extract the certificate from the `vec` found by `Linarith.SimplexAlgorithm.findPositiveVector`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.SimplexAlgorithm.postprocess\"><span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">postprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(vec : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.lean#L20-L27","name":"Linarith.SimplexAlgorithm.preprocess","line":20,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.SimplexAlgorithm.preprocess","doc":"Preprocess the goal to pass it to `Linarith.SimplexAlgorithm.findPositiveVector`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm.html#Linarith.SimplexAlgorithm.preprocess\"><span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">preprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(matType : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Linarith.Comp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxVar : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">matType</span> <span class=\"fn\">(<span class=\"fn\">maxVar</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\"><span class=\"fn\">hyps</span>.length</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"}]}