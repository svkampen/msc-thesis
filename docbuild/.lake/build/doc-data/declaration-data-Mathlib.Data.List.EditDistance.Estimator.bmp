{"name":"Mathlib.Data.List.EditDistance.Estimator","instances":[{"typeNames":["Thunk.mk","LevenshteinEstimator'"],"name":"instEstimatorDataProdNatMkMkLevenshteinLengthLevenshteinEstimator'","className":"EstimatorData"},{"typeNames":["Thunk.mk","LevenshteinEstimator'"],"name":"estimator'","className":"Estimator"},{"typeNames":["Thunk.mk","LevenshteinEstimator"],"name":"instEstimatorMkLevenshteinLevenshteinEstimatorOfWellFoundedGTSubtypeProdNatLe","className":"Estimator"},{"typeNames":["LevenshteinEstimator"],"name":"instBotLevenshteinEstimator","className":"Bot"}],"imports":["Init","Mathlib.Data.List.EditDistance.Bounds","Mathlib.Order.Estimator"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L135-L144","name":"instBotLevenshteinEstimator","line":135,"kind":"instance","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#instBotLevenshteinEstimator","doc":"The initial estimator for Levenshtein distances. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#instBotLevenshteinEstimator\"><span class=\"name\">instBotLevenshteinEstimator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot\">Bot</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator\">LevenshteinEstimator</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L131-L133","name":"instEstimatorMkLevenshteinLevenshteinEstimatorOfWellFoundedGTSubtypeProdNatLe","line":131,"kind":"instance","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#instEstimatorMkLevenshteinLevenshteinEstimatorOfWellFoundedGTSubtypeProdNatLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#instEstimatorMkLevenshteinLevenshteinEstimatorOfWellFoundedGTSubtypeProdNatLe\"><span class=\"name\">instEstimatorMkLevenshteinLevenshteinEstimatorOfWellFoundedGTSubtypeProdNatLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">δ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">δ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> }</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span> }</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator\">LevenshteinEstimator</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L127-L129","name":"LevenshteinEstimator","line":127,"kind":"def","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator","doc":"An estimator for Levenshtein distances. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator\"><span class=\"name\">LevenshteinEstimator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L74-L125","name":"estimator'","line":74,"kind":"instance","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#estimator'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#estimator'\"><span class=\"name\">estimator'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>, <span class=\"fn\"><span class=\"fn\">ys</span>.length</span>)</span></span> }</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L60-L72","name":"instEstimatorDataProdNatMkMkLevenshteinLengthLevenshteinEstimator'","line":60,"kind":"instance","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#instEstimatorDataProdNatMkMkLevenshteinLengthLevenshteinEstimator'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#instEstimatorDataProdNatMkMkLevenshteinLengthLevenshteinEstimator'\"><span class=\"name\">instEstimatorDataProdNatMkMkLevenshteinLengthLevenshteinEstimator'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>, <span class=\"fn\"><span class=\"fn\">ys</span>.length</span>)</span></span> }</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L56-L56","name":"LevenshteinEstimator'.bound_eq","line":56,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.bound_eq","doc":"Predicate describing the current bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.bound_eq\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">bound_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.bound</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">self</span>.pre_rev</span>, <span class=\"fn\">⋯</span> with\n  | <span class=\"fn\">[]</span>, <span class=\"fn\">split</span> =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">self</span>.distances</span>)</span>[<span class=\"fn\">0</span>]</span>, <span class=\"fn\"><span class=\"fn\">ys</span>.length</span>)</span>\n  | <span class=\"fn\">x</span>, <span class=\"fn\">split</span> =&gt; <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum_of_length_pos\">List.minimum_of_length_pos</a> <span class=\"fn\">⋯</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.suff</span>.length</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L54-L54","name":"LevenshteinEstimator'.bound","line":54,"kind":"def","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.bound","doc":"The current bound on the pair (distance from `xs` to `ys`, length of `ys`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.bound\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">δ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L52-L52","name":"LevenshteinEstimator'.distances_eq","line":52,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.distances_eq","doc":"Witness that `distances` are correct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.distances_eq\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">distances_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.distances</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\"><span class=\"fn\">self</span>.suff</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L50-L50","name":"LevenshteinEstimator'.distances","line":50,"kind":"def","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.distances","doc":"The distances from each suffix of `xs` to `suff`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.distances\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">distances</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">δ</span></span> // <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">r</span>.length</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L48-L48","name":"LevenshteinEstimator'.split","line":48,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.split","doc":"Witness that `ys` has been decomposed into a prefix and suffix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.split\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">split</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.pre_rev</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">self</span>.suff</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L46-L46","name":"LevenshteinEstimator'.suff","line":46,"kind":"def","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.suff","doc":"The suffix of `ys`, such that the distance from `xs` to `ys` is bounded below\nby the minimum distance from any suffix of `xs` to this suffix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.suff\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">suff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L43-L43","name":"LevenshteinEstimator'.pre_rev","line":43,"kind":"def","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.pre_rev","doc":"The prefix of `ys` that is not is not involved in the bound, in reverse order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.pre_rev\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">pre_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L41-L41","name":"LevenshteinEstimator'.mk","line":41,"kind":"ctor","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'.mk\"><span class=\"name\">LevenshteinEstimator'</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pre_rev suff : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(split : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pre_rev</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">suff</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distances : <span class=\"fn\">{ <span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">δ</span></span> // <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">r</span>.length</span></span> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distances_eq : <span class=\"fn\"><span class=\"fn\">distances</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">suff</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bound : <span class=\"fn\"><span class=\"fn\">δ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bound_eq :\n  <span class=\"fn\"><span class=\"fn\">bound</span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">match <span class=\"fn\">pre_rev</span>, <span class=\"fn\">split</span> with\n    | <span class=\"fn\">[]</span>, <span class=\"fn\">split</span> =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">distances</span>)</span>[<span class=\"fn\">0</span>]</span>, <span class=\"fn\"><span class=\"fn\">ys</span>.length</span>)</span>\n    | <span class=\"fn\">x</span>, <span class=\"fn\">split</span> =&gt; <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum_of_length_pos\">List.minimum_of_length_pos</a> <span class=\"fn\">⋯</span></span>, <span class=\"fn\"><span class=\"fn\">suff</span>.length</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\">LevenshteinEstimator'</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/List/EditDistance/Estimator.lean#L29-L58","name":"LevenshteinEstimator'","line":29,"kind":"structure","docLink":"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'","doc":"Data showing that the Levenshtein distance from `xs` to `ys`\nis bounded below by the minimum Levenshtein distance between some suffix of `xs`\nand a particular suffix of `ys`.\n\nThis bound is (non-strict) monotone as we take longer suffixes of `ys`.\n\nThis is an auxiliary definition for the later `LevenshteinEstimator`:\nthis variant constructs a lower bound for the pair consisting of\nthe Levenshtein distance from `xs` to `ys`,\nalong with the length of `ys`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Estimator.html#LevenshteinEstimator'\"><span class=\"name\">LevenshteinEstimator'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β δ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}