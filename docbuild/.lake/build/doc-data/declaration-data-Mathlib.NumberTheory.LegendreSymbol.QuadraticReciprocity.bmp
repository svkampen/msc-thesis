{"name":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","instances":[],"imports":["Init","Mathlib.NumberTheory.LegendreSymbol.Basic","Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.GaussSum"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L166-L171","name":"ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_three","line":166,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_three","doc":"If `p` and `q` are distinct primes that are both congruent to `3` mod `4`, then `q` is\na square mod `p` iff `p` is a nonsquare mod `q`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_three\"><span class=\"name\">ZMod</span>.<span class=\"name\">exists_sq_eq_prime_iff_of_mod_four_eq_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">q</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp3 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq3 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hpq : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#IsSquare\">IsSquare</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#IsSquare\">IsSquare</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L157-L164","name":"ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_one","line":157,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_one","doc":"If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\n`p` is a square mod `q`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_one\"><span class=\"name\">ZMod</span>.<span class=\"name\">exists_sq_eq_prime_iff_of_mod_four_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">q</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq1 : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#IsSquare\">IsSquare</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#IsSquare\">IsSquare</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L143-L149","name":"legendreSym.quadratic_reciprocity_three_mod_four","line":143,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity_three_mod_four","doc":"The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity_three_mod_four\"><span class=\"name\">legendreSym</span>.<span class=\"name\">quadratic_reciprocity_three_mod_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">q</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">q</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L136-L141","name":"legendreSym.quadratic_reciprocity_one_mod_four","line":136,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity_one_mod_four","doc":"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\nthen `(q / p) = (p / q)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity_one_mod_four\"><span class=\"name\">legendreSym</span>.<span class=\"name\">quadratic_reciprocity_one_mod_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">q</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">q</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L125-L134","name":"legendreSym.quadratic_reciprocity'","line":125,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity'","doc":"The Law of Quadratic Reciprocity: if `p` and `q` are odd primes, then\n`(q / p) = (-1)^((p-1)(q-1)/4) * (p / q)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity'\"><span class=\"name\">legendreSym</span>.<span class=\"name\">quadratic_reciprocity'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">q</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">q</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L109-L123","name":"legendreSym.quadratic_reciprocity","line":109,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity","doc":"**The Law of Quadratic Reciprocity**: if `p` and `q` are distinct odd primes, then\n`(q / p) * (p / q) = (-1)^((p-1)(q-1)/4)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.quadratic_reciprocity\"><span class=\"name\">legendreSym</span>.<span class=\"name\">quadratic_reciprocity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">q</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hpq : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">q</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L79-L87","name":"ZMod.exists_sq_eq_neg_two_iff","line":79,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_neg_two_iff","doc":"`-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_neg_two_iff\"><span class=\"name\">ZMod</span>.<span class=\"name\">exists_sq_eq_neg_two_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#IsSquare\">IsSquare</a> <span class=\"fn\">(-<span class=\"fn\">2</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L69-L77","name":"ZMod.exists_sq_eq_two_iff","line":69,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_two_iff","doc":"`2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#ZMod.exists_sq_eq_two_iff\"><span class=\"name\">ZMod</span>.<span class=\"name\">exists_sq_eq_two_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#IsSquare\">IsSquare</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">7</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L60-L63","name":"legendreSym.at_neg_two","line":60,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.at_neg_two","doc":"`legendreSym p (-2)` is given by `χ₈' p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.at_neg_two\"><span class=\"name\">legendreSym</span>.<span class=\"name\">at_neg_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">(-<span class=\"fn\">2</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ZMod.χ₈'</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.lean#L55-L58","name":"legendreSym.at_two","line":55,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.at_two","doc":"`legendreSym p 2` is given by `χ₈ p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/QuadraticReciprocity.html#legendreSym.at_two\"><span class=\"name\">legendreSym</span>.<span class=\"name\">at_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ZMod.χ₈</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"}]}