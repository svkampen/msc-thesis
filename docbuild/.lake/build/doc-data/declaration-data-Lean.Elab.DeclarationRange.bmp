{"name":"Lean.Elab.DeclarationRange","instances":[],"imports":["Lean.Log","Lean.Parser.Command","Lean.DeclarationRange","Lean.Data.Lsp.Utf16"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DeclarationRange.lean#L64-L77","name":"Lean.Elab.addDeclarationRangesForBuiltin","line":64,"kind":"def","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.addDeclarationRangesForBuiltin","doc":"Stores the `range` and `selectionRange` for `declName` where `modsStx` is the modifier part and\n`cmdStx` the remaining part of the syntax tree for `declName`.\n\nThis method is for the builtin declarations only. User-defined commands should use\n`Lean.Elab.addDeclarationRangesFromSyntax` or `Lean.addDeclarationRanges` to store this information\nfor their commands.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclarationRange.html#Lean.Elab.addDeclarationRangesForBuiltin\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addDeclarationRangesForBuiltin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Position.html#Lean.MonadFileMap\">Lean.MonadFileMap</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(modsStx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declModifiers</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declStx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DeclarationRange.lean#L52-L62","name":"Lean.Elab.addDeclarationRangesFromSyntax","line":52,"kind":"def","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.addDeclarationRangesFromSyntax","doc":"Derives and adds declaration ranges from given syntax trees. If `rangeStx` does not have a range,\nnothing is added. If `selectionRangeStx` does not have a range, it is defaulted to that of\n`rangeStx`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclarationRange.html#Lean.Elab.addDeclarationRangesFromSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addDeclarationRangesFromSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Position.html#Lean.MonadFileMap\">Lean.MonadFileMap</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rangeStx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(selectionRangeStx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> := <a href=\"./Init/Prelude.html#Lean.Syntax.missing\">Lean.Syntax.missing</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DeclarationRange.lean#L28-L50","name":"Lean.Elab.getDeclarationSelectionRef","line":28,"kind":"def","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.getDeclarationSelectionRef","doc":"For most builtin declarations, the selection range is just its name, which is stored in the second position.\nExample:\n```\n\"def \" >> declId >> optDeclSig >> declVal\n```\nIf the declaration name is absent, we use the keyword instead.\nThis function converts the given `Syntax` into one that represents its \"selection range\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclarationRange.html#Lean.Elab.getDeclarationSelectionRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getDeclarationSelectionRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DeclarationRange.lean#L14-L26","name":"Lean.Elab.getDeclarationRange?","line":14,"kind":"def","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.getDeclarationRange?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclarationRange.html#Lean.Elab.getDeclarationRange?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getDeclarationRange?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Position.html#Lean.MonadFileMap\">Lean.MonadFileMap</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/DeclarationRange.html#Lean.DeclarationRange\">Lean.DeclarationRange</a>)</span></span></div></div>"}]}