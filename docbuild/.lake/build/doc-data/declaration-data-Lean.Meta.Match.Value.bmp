{"name":"Lean.Meta.Match.Value","instances":[],"imports":["Lean.Meta.LitValues","Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Value.lean#L12-L25","name":"Lean.Meta.isMatchValue","line":12,"kind":"def","docLink":"./Lean/Meta/Match/Value.html#Lean.Meta.isMatchValue","doc":"Return true is `e` is a term that should be processed by the `match`-compiler using `casesValues` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Value.html#Lean.Meta.isMatchValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isMatchValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}