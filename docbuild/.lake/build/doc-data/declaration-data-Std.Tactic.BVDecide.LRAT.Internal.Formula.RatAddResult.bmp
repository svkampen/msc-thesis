{"name":"Std.Tactic.BVDecide.LRAT.Internal.Formula.RatAddResult","instances":[],"imports":["Std.Tactic.BVDecide.LRAT.Internal.Formula.RupAddSound"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L194-L231","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratAdd_result","line":194,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratAdd_result","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratAdd_result\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">ratAdd_result</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">Std.Tactic.BVDecide.LRAT.Internal.DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ratHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_readyForRatAdd : <span class=\"fn\"><span class=\"fn\">f</span>.ReadyForRatAdd</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_pc : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.toList\">Std.Tactic.BVDecide.LRAT.Internal.Clause.toList</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ratAddSuccess : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.performRatAdd</span> <span class=\"fn\">c</span> <span class=\"fn\">p</span> <span class=\"fn\">rupHints</span> <span class=\"fn\">ratHints</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">f'</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.insert</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L172-L192","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.performRatCheck_fold_formula_eq","line":172,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.performRatCheck_fold_formula_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.performRatCheck_fold_formula_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">performRatCheck_fold_formula_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ratHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">performRatCheck_fold_res</span> :=\n  <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.foldl\">Array.foldl</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) (<span class=\"fn\">ratHint</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>) =&gt;\n      <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.snd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.fst</span>.performRatCheck</span> <span class=\"fn\">p</span> <span class=\"fn\">ratHint</span></span> else <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.fst</span>, <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">f</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> <span class=\"fn\">ratHints</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">performRatCheck_fold_res</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L150-L170","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.formula_performRatCheck","line":150,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.formula_performRatCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.formula_performRatCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">formula_performRatCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ratHint : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRatCheck</span> <span class=\"fn\">p</span> <span class=\"fn\">ratHint</span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L124-L148","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRat","line":124,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRat\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clear_insertRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.clearRatUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L113-L122","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRat_base_case","line":113,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRat_base_case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRat_base_case\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clear_insertRat_base_case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">insertRat_res</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ClearInsertInductionMotive</span> <span class=\"fn\">⋯</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertRat_res</span>.fst</span>.ratUnits</span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertRat_res</span>.fst</span>.assignments</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L49-L111","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_insertRatUnits","line":49,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_insertRatUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_insertRatUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">nodup_insertRatUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.ratUnits</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.ratUnits</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.ratUnits</span>[<span class=\"fn\">j</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L29-L47","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRatUnits_postcondition","line":29,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRatUnits_postcondition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRatUnits_postcondition\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">insertRatUnits_postcondition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">assignments</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.assignments</span>;\n<span class=\"fn\">let_fun <span class=\"fn\">hsize</span> := <span class=\"fn\">⋯</span>;\n<span class=\"fn\">let <span class=\"fn\">ratUnits</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.ratUnits</span>;\n<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant</a> <span class=\"fn\"><span class=\"fn\">f</span>.assignments</span> <span class=\"fn\">⋯</span> <span class=\"fn\">ratUnits</span> <span class=\"fn\">assignments</span> <span class=\"fn\">hsize</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.lean#L23-L27","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_insertRatUnits","line":23,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_insertRatUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_insertRatUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_assignments_insertRatUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRatUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span></span></div></div>"}]}