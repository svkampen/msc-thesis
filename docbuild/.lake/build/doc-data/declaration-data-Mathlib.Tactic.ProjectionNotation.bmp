{"name":"Mathlib.Tactic.ProjectionNotation","instances":[],"imports":["Init","Lean.Elab.AuxDef","Mathlib.Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/ProjectionNotation.lean#L58-L114","name":"Mathlib.ProjectionNotation.ppDotAttr","line":58,"kind":"def","docLink":"./Mathlib/Tactic/ProjectionNotation.html#Mathlib.ProjectionNotation.ppDotAttr","doc":"Adding the `@[pp_dot]` attribute defines an `app_unexpander` for the given function to\nsupport pretty printing the function using extended field notation (\"dot notation\").\nThis particular attribute is *only* for functions whose first explicit argument is the\nreceiver of the generalized field notation. That is to say, it is only meant for\ntransforming `C.f c x y z ...` to `c.f x y z ...` for `c : C`.\n\nIt can be used to help get projection notation to work for function-valued structure fields,\nsince the built-in projection delaborator cannot handle excess arguments.\n\nExample for generalized field notation:\n```\nstructure A where\n  n : Nat\n\n@[pp_dot]\ndef A.foo (a : A) (m : Nat) : Nat := a.n + m\n```\nNow, `A.foo x m` pretty prints as `x.foo m`. If `A` is a structure, it also adds a rule that\n`A.foo x.toA m` pretty prints as `x.foo m`. This rule is meant to combine with core's\nthe projection collapse delaborator, where together `A.foo x.toB.toA m`\nwill pretty print as `x.foo m`.\n\nSince the mentioned rule is a purely syntactic transformation,\nit might lead to output that does not round trip, though this can only occur if\nthere exists an `A`-valued `toA` function that is not a parent projection that\nhappens to be pretty printable using dot notation.\n\nHere is an example to illustrate the round tripping issue:\n```lean\nimport Mathlib.Tactic.ProjectionNotation\n\nstructure A where n : Int\n\n@[pp_dot]\ndef A.inc (a : A) (k : Int) : Int := a.n + k\n\nstructure B where n : Nat\n\ndef B.toA (b : B) : A := ⟨b.n⟩\n\nvariable (b : B)\n\n#check A.inc b.toA 1\n-- (B.toA b).inc 1 : Int\n\nattribute [pp_dot] B.toA\n#check A.inc b.toA 1\n-- b.inc 1 : Int\n\n#check b.inc 1\n-- invalid field 'inc', the environment does not contain 'B.inc'\n```\nTo avoid this, don't use `pp_dot` for coercion functions\nsuch as `B.toA`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ProjectionNotation.html#Mathlib.ProjectionNotation.ppDotAttr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">ProjectionNotation</span>.<span class=\"name\">ppDotAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/ProjectionNotation.lean#L31-L56","name":"Mathlib.ProjectionNotation.mkExtendedFieldNotationUnexpander","line":31,"kind":"def","docLink":"./Mathlib/Tactic/ProjectionNotation.html#Mathlib.ProjectionNotation.mkExtendedFieldNotationUnexpander","doc":"Given a function `f` that is either a true projection or a generalized projection\n(i.e., a function that works using extended field notation, a.k.a. \"dot notation\"), generates\nan `app_unexpander` for it to get it to pretty print using dot notation.\n\nSee also the docstring of the `pp_dot` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ProjectionNotation.html#Mathlib.ProjectionNotation.mkExtendedFieldNotationUnexpander\"><span class=\"name\">Mathlib</span>.<span class=\"name\">ProjectionNotation</span>.<span class=\"name\">mkExtendedFieldNotationUnexpander</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}