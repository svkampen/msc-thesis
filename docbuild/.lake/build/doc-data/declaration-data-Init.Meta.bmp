{"name":"Init.Meta","instances":[{"typeNames":["Lean.Name"],"name":"Lean.Name.instToString","className":"ToString"},{"typeNames":["Lean.Name"],"name":"Lean.Name.instRepr","className":"Repr"},{"typeNames":["Lean.Name"],"name":"Lean.Name.instLawfulBEq","className":"LawfulBEq"},{"typeNames":["Eq"],"name":"Lean.Name.instDecidableEq","className":"Decidable"},{"typeNames":[],"name":"Lean.monadNameGeneratorLift","className":"Lean.MonadNameGenerator"},{"typeNames":["Lean.Syntax.Preresolved"],"name":"Lean.Syntax.instReprPreresolved","className":"Repr"},{"typeNames":["Lean.Syntax"],"name":"Lean.Syntax.instRepr","className":"Repr"},{"typeNames":["Lean.TSyntax"],"name":"Lean.Syntax.instReprTSyntax","className":"Repr"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.TSyntax.instCoeConsSyntaxNodeKindNil","className":"Coe"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.TSyntax.instCoeConsSyntaxNodeKind","className":"Coe"},{"typeNames":["Lean.Syntax.Ident","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeIdentTerm","className":"Coe"},{"typeNames":["Lean.Syntax.Term","Lean.TSyntax.mk","Lean.Syntax.Ident"],"name":"Lean.TSyntax.instCoeDepTermMkIdentIdent","className":"CoeDep"},{"typeNames":["Lean.Syntax.StrLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeStrLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.NameLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeNameLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.ScientificLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeScientificLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeNumLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.CharLit","Lean.Syntax.Term"],"name":"Lean.TSyntax.instCoeCharLitTerm","className":"Coe"},{"typeNames":["Lean.Syntax.Ident","Lean.Syntax.Level"],"name":"Lean.TSyntax.instCoeIdentLevel","className":"Coe"},{"typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Prio"],"name":"Lean.TSyntax.instCoeNumLitPrio","className":"Coe"},{"typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Prec"],"name":"Lean.TSyntax.instCoeNumLitPrec","className":"Coe"},{"typeNames":["Lean.Syntax.Preresolved"],"name":"Lean.Syntax.instBEqPreresolved","className":"BEq"},{"typeNames":["Lean.Syntax"],"name":"Lean.Syntax.instBEq","className":"BEq"},{"typeNames":["Lean.TSyntax"],"name":"Lean.Syntax.instBEqTSyntax","className":"BEq"},{"typeNames":["Array","Lean.Syntax.SepArray"],"name":"Lean.Syntax.instCoeArraySepArray","className":"Coe"},{"typeNames":["Lean.TSyntaxArray","Lean.Syntax.TSepArray"],"name":"Lean.Syntax.instCoeTSyntaxArrayTSepArray","className":"Coe"},{"typeNames":[],"name":"Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","className":"Lean.Quote"},{"typeNames":["Lean.Syntax.Term","Lean.Name.mkStr1"],"name":"Lean.instQuoteTermMkStr1","className":"Lean.Quote"},{"typeNames":["Bool","Lean.Name.mkStr1"],"name":"Lean.instQuoteBoolMkStr1","className":"Lean.Quote"},{"typeNames":["Char","Lean.charLitKind"],"name":"Lean.instQuoteCharCharLitKind","className":"Lean.Quote"},{"typeNames":["String","Lean.strLitKind"],"name":"Lean.instQuoteStringStrLitKind","className":"Lean.Quote"},{"typeNames":["Nat","Lean.numLitKind"],"name":"Lean.instQuoteNatNumLitKind","className":"Lean.Quote"},{"typeNames":["Substring","Lean.Name.mkStr1"],"name":"Lean.instQuoteSubstringMkStr1","className":"Lean.Quote"},{"typeNames":["Lean.Name","Lean.Name.mkStr1"],"name":"Lean.instQuoteNameMkStr1","className":"Lean.Quote"},{"typeNames":["Prod","Lean.Name.mkStr1"],"name":"Lean.instQuoteProdMkStr1","className":"Lean.Quote"},{"typeNames":["List","Lean.Name.mkStr1"],"name":"Lean.instQuoteListMkStr1","className":"Lean.Quote"},{"typeNames":["Array","Lean.Name.mkStr1"],"name":"Lean.instQuoteArrayMkStr1","className":"Lean.Quote"},{"typeNames":["Option","Lean.Name.mkStr1"],"name":"Lean.Option.hasQuote","className":"Lean.Quote"},{"typeNames":["Lean.Syntax.SepArray"],"name":"Lean.Syntax.instEmptyCollectionSepArray","className":"EmptyCollection"},{"typeNames":["Lean.Syntax.TSepArray"],"name":"Lean.Syntax.instEmptyCollectionTSepArray","className":"EmptyCollection"},{"typeNames":["Lean.Syntax.SepArray","Array"],"name":"Lean.Syntax.instCoeOutSepArrayArray","className":"CoeOut"},{"typeNames":["Lean.Syntax.TSepArray","Lean.TSyntaxArray"],"name":"Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","className":"CoeOut"},{"typeNames":["Lean.TSyntaxArray","Lean.TSyntaxArray"],"name":"Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","className":"Coe"},{"typeNames":["Lean.TSyntaxArray","Array"],"name":"Lean.Syntax.instCoeOutTSyntaxArrayArray","className":"CoeOut"},{"typeNames":["Lean.Syntax.Ident","Lean.TSyntax"],"name":"Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","className":"Coe"},{"typeNames":["Lean.Syntax.Term","Lean.TSyntax"],"name":"Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","className":"Coe"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instReprEtaStructMode","className":"Repr"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instReprTransparencyMode","className":"Repr"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.instReprConfig","className":"Repr"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.instReprConfig_1","className":"Repr"}],"imports":["Init.MetaTypes","Init.Data.Array.GetLit","Init.Data.Option.BasicAux"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1492-L1495","name":"Lean.Parser.Tactic.dsimpAutoUnfold","line":1492,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold","doc":"`dsimp!` is shorthand for `dsimp` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1489-L1490","name":"Lean.Parser.Tactic.simpAllArithAutoUnfold","line":1489,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithAutoUnfold","doc":"`simp_all_arith!` combines the effects of `simp_all`, `simp_arith` and `simp!`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArithAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1486-L1487","name":"Lean.Parser.Tactic.simpAllArith","line":1486,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith","doc":"`simp_all_arith` combines the effects of `simp_all` and `simp_arith`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1481-L1484","name":"Lean.Parser.Tactic.simpAllAutoUnfold","line":1481,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold","doc":"`simp_all!` is shorthand for `simp_all` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1476-L1479","name":"Lean.Parser.Tactic.simpArithAutoUnfold","line":1476,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArithAutoUnfold","doc":"`simp_arith!` is shorthand for `simp_arith` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArithAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArithAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1472-L1474","name":"Lean.Parser.Tactic.simpArith","line":1472,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArith","doc":"`simp_arith` is shorthand for `simp` with `arith := true` and `decide := true`.\nThis enables the use of normalization by linear arithmetic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1467-L1470","name":"Lean.Parser.Tactic.simpAutoUnfold","line":1467,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold","doc":"`simp!` is shorthand for `simp` with `autoUnfold := true`.\nThis will rewrite with all equation lemmas, which can be used to\npartially evaluate many definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1448-L1465","name":"Lean.Parser.Tactic.declareSimpLikeTactic","line":1448,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">declareSimpLikeTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1446-L1446","name":"Lean.Parser.Tactic.dsimpKind","line":1446,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1445-L1445","name":"Lean.Parser.Tactic.simpAllKind","line":1445,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1442-L1443","name":"Lean.Parser.Tactic.tacticErw___","line":1442,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.tacticErw___","doc":"`erw [rules]` is a shorthand for `rw (transparency := .default) [rules]`.\nThis does rewriting up to unfolding of regular definitions (by comparison to regular `rw`\nwhich only unfolds `@[reducible]` definitions). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.tacticErw___\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticErw___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1431-L1437","name":"Lean.Parser.Tactic.appendConfig","line":1431,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.appendConfig","doc":"Appends two tactic configurations.\nThe configurations can be `Lean.Parser.Tactic.optConfig`, `Lean.Parser.Tactic.config`,\nor these wrapped in null nodes (for example because the syntax is `(config)?`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.appendConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">appendConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg cfg' : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.optConfig</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1428-L1429","name":"Lean.Parser.Tactic.mkOptConfig","line":1428,"kind":"def","docLink":"./Init/Meta.html#Lean.Parser.Tactic.mkOptConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.mkOptConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkOptConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(items : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Tactic.configItem</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.optConfig</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1415-L1426","name":"Lean.Parser.Tactic.getConfigItems","line":1415,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Parser.Tactic.getConfigItems","doc":"Extracts the items from a tactic configuration,\neither a `Lean.Parser.Tactic.optConfig`, `Lean.Parser.Tactic.config`, or these wrapped in null nodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.getConfigItems\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getConfigItems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Tactic.configItem</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1405-L1405","name":"Lean.Meta.CheckTactic.CheckGoalType.intro","line":1405,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType.intro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckTactic</span>.<span class=\"name\">CheckGoalType</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType\">Lean.Meta.CheckTactic.CheckGoalType</a> <span class=\"fn\">val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1398-L1405","name":"Lean.Meta.CheckTactic.CheckGoalType","line":1398,"kind":"inductive","docLink":"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType","doc":"Type used to lift an arbitrary value into a type parameter so it can\nappear in a proof goal.\n\nIt is used by the #check_tactic command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.CheckTactic.CheckGoalType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckTactic</span>.<span class=\"name\">CheckGoalType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1392-L1392","name":"Lean.Meta.Omega.OmegaConfig.splitMinMax","line":1392,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitMinMax","doc":"Whenever `min a b` or `max a b` is found, rewrite in terms of the definition\n`if a ≤ b ...`, for later case splitting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitMinMax\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitMinMax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1387-L1387","name":"Lean.Meta.Omega.OmegaConfig.splitNatAbs","line":1387,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatAbs","doc":"Whenever `Int.natAbs a` is found, register the disjunction\n`0 ≤ a ∧ Int.natAbs a = a ∨ a < 0 ∧ Int.natAbs a = - a` for later splitting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatAbs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitNatAbs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1382-L1382","name":"Lean.Meta.Omega.OmegaConfig.splitNatSub","line":1382,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatSub","doc":"Whenever `((a - b : Nat) : Int)` is found, register the disjunction\n`b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\nfor later splitting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitNatSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitNatSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1376-L1376","name":"Lean.Meta.Omega.OmegaConfig.splitDisjunctions","line":1376,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitDisjunctions","doc":"Split disjunctions in the context.\n\nNote that with `splitDisjunctions := false` omega will not be able to solve `x = y` goals\nas these are usually handled by introducing `¬ x = y` as a hypothesis, then replacing this with\n`x < y ∨ x > y`.\n\nOn the other hand, `omega` does not currently detect disjunctions which, when split,\nintroduce no new useful information, so the presence of irrelevant disjunctions in the context\ncan significantly increase run time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.splitDisjunctions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitDisjunctions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1364-L1364","name":"Lean.Meta.Omega.OmegaConfig.mk","line":1364,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(splitDisjunctions splitNatSub splitNatAbs splitMinMax : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1363-L1392","name":"Lean.Meta.Omega.OmegaConfig","line":1363,"kind":"structure","docLink":"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig","doc":"Configures the behaviour of the `omega` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1357-L1357","name":"Lean.Meta.Rewrite.Config.newGoals","line":1357,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.newGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.newGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">newGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals\">Lean.Meta.Rewrite.NewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1356-L1356","name":"Lean.Meta.Rewrite.Config.occs","line":1356,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.occs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.occs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">occs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1355-L1355","name":"Lean.Meta.Rewrite.Config.offsetCnstrs","line":1355,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.offsetCnstrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.offsetCnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">offsetCnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1354-L1354","name":"Lean.Meta.Rewrite.Config.transparency","line":1354,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.transparency","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.transparency\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">transparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1353-L1353","name":"Lean.Meta.Rewrite.Config.mk","line":1353,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(transparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offsetCnstrs : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occs : <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newGoals : <a href=\"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals\">Lean.Meta.Rewrite.NewGoals</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\">Lean.Meta.Rewrite.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1353-L1357","name":"Lean.Meta.Rewrite.Config","line":1353,"kind":"structure","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.Config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1351-L1351","name":"Lean.Meta.Rewrite.NewGoals","line":1351,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Rewrite.NewGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">NewGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1347-L1347","name":"Lean.Meta.ApplyConfig.approx","line":1347,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.approx","doc":"If `approx := true`, then we turn on `isDefEq` approximations. That is, we use\nthe `approxDefEq` combinator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.approx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">approx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1342-L1342","name":"Lean.Meta.ApplyConfig.allowSynthFailures","line":1342,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.allowSynthFailures","doc":"If `allowSynthFailures` is `true`, then `apply` will return instance implicit arguments\nfor which typeclass search failed as new goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.allowSynthFailures\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">allowSynthFailures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1337-L1337","name":"Lean.Meta.ApplyConfig.synthAssignedInstances","line":1337,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.synthAssignedInstances","doc":"If `synthAssignedInstances` is `true`, then `apply` will synthesize instance implicit arguments\neven if they have assigned by `isDefEq`, and then check whether the synthesized value matches the\none inferred. The `congr` tactic sets this flag to false.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.synthAssignedInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">synthAssignedInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1331-L1331","name":"Lean.Meta.ApplyConfig.newGoals","line":1331,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.newGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.newGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">newGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1330-L1330","name":"Lean.Meta.ApplyConfig.mk","line":1330,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(newGoals : <a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(synthAssignedInstances allowSynthFailures approx : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1328-L1347","name":"Lean.Meta.ApplyConfig","line":1328,"kind":"structure","docLink":"./Init/Meta.html#Lean.Meta.ApplyConfig","doc":"Configures the behaviour of the `apply` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1326-L1326","name":"Lean.Meta.ApplyNewGoals.all","line":1326,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1326-L1326","name":"Lean.Meta.ApplyNewGoals.nonDependentOnly","line":1326,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">nonDependentOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1326-L1326","name":"Lean.Meta.ApplyNewGoals.nonDependentFirst","line":1326,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentFirst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">nonDependentFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\">Lean.Meta.ApplyNewGoals</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1318-L1326","name":"Lean.Meta.ApplyNewGoals","line":1318,"kind":"inductive","docLink":"./Init/Meta.html#Lean.Meta.ApplyNewGoals","doc":"Controls which new mvars are turned in to goals by the `apply` tactic.\n- `nonDependentFirst`  mvars that don't depend on other goals appear first in the goal list.\n- `nonDependentOnly` only mvars that don't depend on other goals are added to goal list.\n- `all` all unassigned mvars are added to the goal list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1314-L1316","name":"Lean.Meta.Occurrences.isAll","line":1314,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Occurrences.isAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Occurrences.isAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">isAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1309-L1312","name":"Lean.Meta.Occurrences.contains","line":1309,"kind":"def","docLink":"./Init/Meta.html#Lean.Meta.Occurrences.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.Occurrences.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1307-L1307","name":"Lean.Meta.instReprConfig_1","line":1307,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprConfig_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprConfig_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1307-L1307","name":"Lean.Meta.instReprConfig","line":1307,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1307-L1307","name":"Lean.Meta.instReprTransparencyMode","line":1307,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1307-L1307","name":"Lean.Meta.instReprEtaStructMode","line":1307,"kind":"instance","docLink":"./Init/Meta.html#Lean.Meta.instReprEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Meta.instReprEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1298-L1301","name":"Lean.TSyntax.getDocString","line":1298,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getDocString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1294-L1296","name":"Lean.TSyntax.expandInterpolatedStr","line":1294,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStr\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">expandInterpolatedStr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(interpStr : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <a href=\"./Init/Prelude.html#Lean.interpolatedStrKind\">Lean.interpolatedStrKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type toTypeFn : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1279-L1291","name":"Lean.TSyntax.expandInterpolatedStrChunks","line":1279,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStrChunks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.expandInterpolatedStrChunks\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">expandInterpolatedStrChunks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(chunks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkAppend : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkElem : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1272-L1273","name":"Lean.Syntax.getSepArgs","line":1272,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getSepArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getSepArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getSepArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1267-L1270","name":"Lean.Syntax.isInterpolatedStrLit?","line":1267,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isInterpolatedStrLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isInterpolatedStrLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isInterpolatedStrLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1230-L1231","name":"Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","line":1230,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.funBinder</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1227-L1228","name":"Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","line":1227,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declId</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1224-L1225","name":"Lean.Syntax.instCoeOutTSyntaxArrayArray","line":1224,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeOutTSyntaxArrayArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeOutTSyntaxArrayArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutTSyntaxArrayArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1221-L1222","name":"Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","line":1221,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayOfTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTSyntaxArrayOfTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k k' : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1218-L1219","name":"Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","line":1218,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeOutTSepArrayTSyntaxArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutTSepArrayTSyntaxArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1215-L1216","name":"Lean.Syntax.instCoeOutSepArrayArray","line":1215,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeOutSepArrayArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeOutSepArrayArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutSepArrayArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1212-L1213","name":"Lean.Syntax.instEmptyCollectionTSepArray","line":1212,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instEmptyCollectionTSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instEmptyCollectionTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instEmptyCollectionTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">sep</span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1209-L1210","name":"Lean.Syntax.instEmptyCollectionSepArray","line":1209,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instEmptyCollectionSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instEmptyCollectionSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instEmptyCollectionSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1203-L1207","name":"Lean.Syntax.TSepArray.push","line":1203,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.TSepArray.push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.TSepArray.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sa : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1200-L1201","name":"Lean.Syntax.TSepArray.getElems","line":1200,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.TSepArray.getElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.TSepArray.getElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">getElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sa : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1197-L1198","name":"Lean.Syntax.SepArray.getElems","line":1197,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.SepArray.getElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.SepArray.getElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">getElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sa : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1190-L1191","name":"Array.mapSepElems","line":1190,"kind":"def","docLink":"./Init/Meta.html#Array.mapSepElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.mapSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">mapSepElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1187-L1188","name":"Array.mapSepElemsM","line":1187,"kind":"def","docLink":"./Init/Meta.html#Array.mapSepElemsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.mapSepElemsM\"><span class=\"name\">Array</span>.<span class=\"name\">mapSepElemsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1173-L1174","name":"Array.filterSepElems","line":1173,"kind":"def","docLink":"./Init/Meta.html#Array.filterSepElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.filterSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">filterSepElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1170-L1171","name":"Array.filterSepElemsM","line":1170,"kind":"def","docLink":"./Init/Meta.html#Array.filterSepElemsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.filterSepElemsM\"><span class=\"name\">Array</span>.<span class=\"name\">filterSepElemsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1148-L1148","name":"Array.getSepElems","line":1148,"kind":"def","docLink":"./Init/Meta.html#Array.getSepElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Array.getSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">getSepElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1140-L1142","name":"Lean.evalOptPrio","line":1140,"kind":"def","docLink":"./Init/Meta.html#Lean.evalOptPrio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.evalOptPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">evalOptPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`prio</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1138-L1138","name":"Lean.termEval_prio_","line":1138,"kind":"def","docLink":"./Init/Meta.html#Lean.termEval_prio_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prio_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prio_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1124-L1130","name":"Lean.evalPrio","line":1124,"kind":"def","docLink":"./Init/Meta.html#Lean.evalPrio","doc":"Evaluator for `prio` DSL "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.evalPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">evalPrio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1122-L1122","name":"Lean.termEval_prec_","line":1122,"kind":"def","docLink":"./Init/Meta.html#Lean.termEval_prec_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prec_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prec_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1108-L1114","name":"Lean.evalPrec","line":1108,"kind":"def","docLink":"./Init/Meta.html#Lean.evalPrec","doc":"Evaluator for `prec` DSL "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.evalPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">evalPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1102-L1105","name":"Lean.Option.hasQuote","line":1102,"kind":"instance","docLink":"./Init/Meta.html#Lean.Option.hasQuote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Option.hasQuote\"><span class=\"name\">Lean</span>.<span class=\"name\">Option</span>.<span class=\"name\">hasQuote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1099-L1100","name":"Lean.instQuoteArrayMkStr1","line":1099,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteArrayMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteArrayMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteArrayMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1082-L1083","name":"Lean.instQuoteListMkStr1","line":1082,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteListMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteListMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteListMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1074-L1076","name":"Lean.instQuoteProdMkStr1","line":1074,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteProdMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteProdMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteProdMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1069-L1072","name":"Lean.instQuoteNameMkStr1","line":1069,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteNameMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteNameMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteNameMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1064-L1067","name":"Lean.quoteNameMk","line":1064,"kind":"def","docLink":"./Init/Meta.html#Lean.quoteNameMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.quoteNameMk\"><span class=\"name\">Lean</span>.<span class=\"name\">quoteNameMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1054-L1054","name":"Lean.instQuoteSubstringMkStr1","line":1054,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteSubstringMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteSubstringMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteSubstringMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1053-L1053","name":"Lean.instQuoteNatNumLitKind","line":1053,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteNatNumLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteNatNumLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteNatNumLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Lean.numLitKind\">Lean.numLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1052-L1052","name":"Lean.instQuoteStringStrLitKind","line":1052,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteStringStrLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteStringStrLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteStringStrLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Lean.strLitKind\">Lean.strLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1051-L1051","name":"Lean.instQuoteCharCharLitKind","line":1051,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteCharCharLitKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteCharCharLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteCharCharLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Lean.charLitKind\">Lean.charLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1050-L1050","name":"Lean.instQuoteBoolMkStr1","line":1050,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteBoolMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteBoolMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteBoolMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1049-L1049","name":"Lean.instQuoteTermMkStr1","line":1049,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteTermMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteTermMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteTermMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1047-L1047","name":"Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","line":1047,"kind":"instance","docLink":"./Init/Meta.html#Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k k' : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1042-L1042","name":"Lean.Quote.quote","line":1042,"kind":"def","docLink":"./Init/Meta.html#Lean.Quote.quote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Quote.quote\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span>.<span class=\"name\">quote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1041-L1041","name":"Lean.Quote.mk","line":1041,"kind":"ctor","docLink":"./Init/Meta.html#Lean.Quote.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Quote.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(quote : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1040-L1042","name":"Lean.Quote","line":1040,"kind":"class","docLink":"./Init/Meta.html#Lean.Quote","doc":"Reflect a runtime datum back to surface syntax (best-effort). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Quote\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> := <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1035-L1038","name":"Lean.HygieneInfo.mkIdent","line":1035,"kind":"def","docLink":"./Init/Meta.html#Lean.HygieneInfo.mkIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.HygieneInfo.mkIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">HygieneInfo</span>.<span class=\"name\">mkIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.HygieneInfo\">Lean.HygieneInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1028-L1029","name":"Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray","line":1028,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailArraySyntaxTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1023-L1024","name":"Lean.TSyntax.getHygieneInfo","line":1023,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getHygieneInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getHygieneInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getHygieneInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.HygieneInfo\">Lean.HygieneInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1020-L1021","name":"Lean.TSyntax.getName","line":1020,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getName\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.NameLit\">Lean.NameLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1017-L1018","name":"Lean.TSyntax.getChar","line":1017,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getChar\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.CharLit\">Lean.CharLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1014-L1015","name":"Lean.TSyntax.getString","line":1014,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getString\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.StrLit\">Lean.StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1011-L1012","name":"Lean.TSyntax.getScientific","line":1011,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getScientific","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getScientific\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.ScientificLit\">Lean.ScientificLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1008-L1009","name":"Lean.TSyntax.getId","line":1008,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getId\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L1005-L1006","name":"Lean.TSyntax.getNat","line":1005,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.getNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.getNat\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L998-L999","name":"Lean.Syntax.find?","line":998,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L994-L996","name":"Lean.Syntax.findAux","line":994,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.findAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.findAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">findAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L989-L992","name":"Lean.Syntax.getOptionalIdent?","line":989,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getOptionalIdent?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getOptionalIdent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getOptionalIdent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L982-L987","name":"Lean.Syntax.isNone","line":982,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isNone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L978-L980","name":"Lean.Syntax.isToken","line":978,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isToken","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isToken\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isToken</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(token : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L974-L976","name":"Lean.Syntax.isAtom","line":974,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L970-L972","name":"Lean.Syntax.hasArgs","line":970,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.hasArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.hasArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">hasArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L965-L968","name":"Lean.Syntax.isNameLit?","line":965,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isNameLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isNameLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNameLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L957-L963","name":"Lean.Syntax.decodeNameLit","line":957,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeNameLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L949-L955","name":"String.toName","line":949,"kind":"def","docLink":"./Init/Meta.html#String.toName","doc":"Converts a `String` to a hierarchical `Name` after splitting it at the dots.\n\n`\"a.b\".toName` is the name `a.b`, not `«a.b»`. For the latter, use `Name.mkSimple`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#String.toName\"><span class=\"name\">String</span>.<span class=\"name\">toName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L933-L947","name":"Substring.toName","line":933,"kind":"def","docLink":"./Init/Meta.html#Substring.toName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Substring.toName\"><span class=\"name\">Substring</span>.<span class=\"name\">toName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L928-L931","name":"Lean.Syntax.splitNameLit","line":928,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.splitNameLit","doc":"Split a name literal (without the backtick) into its dot-separated components. For example,\n`foo.bla.«bo.o»` ↦ `[\"foo\", \"bla\", \"«bo.o»\"]`. If the literal cannot be parsed, return `[]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.splitNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">splitNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L898-L901","name":"Lean.Syntax.isCharLit?","line":898,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isCharLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isCharLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isCharLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L890-L896","name":"Lean.Syntax.decodeCharLit","line":890,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeCharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeCharLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L879-L888","name":"Lean.Syntax.isStrLit?","line":879,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isStrLit?","doc":"If the provided `Syntax` is a string literal, returns the string it represents.\n\nEven if the `Syntax` is a `str` node, the function may return `none` if its internally ill-formed.\nThe parser should always create well-formed `str` nodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isStrLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isStrLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L865-L877","name":"Lean.Syntax.decodeStrLit","line":865,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeStrLit","doc":"Takes the string literal lexical syntax parsed by the parser and interprets it as a string.\nThis is where escape sequences are processed for example.\nThe string `s` is either a plain string literal or a raw string literal.\n\nIf it returns `none` then the string literal is ill-formed, which indicates a bug in the parser.\nThe function is not required to return `none` if the string literal is ill-formed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L851-L863","name":"Lean.Syntax.decodeRawStrLitAux","line":851,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeRawStrLitAux","doc":"Takes a raw string literal, counts the number of `#`'s after the `r`, and interprets it as a string.\nThe position `i` should start at `1`, which is the character after the leading `r`.\nThe algorithm is simple: we are given `r##...#\"...string...\"##...#` with zero or more `#`s.\nBy counting the number of leading `#`'s, we can extract the `...string...`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeRawStrLitAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeRawStrLitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L834-L849","name":"Lean.Syntax.decodeStrLitAux","line":834,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeStrLitAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeStrLitAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStrLitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L824-L832","name":"Lean.Syntax.decodeStringGap","line":824,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeStringGap","doc":"Decodes a valid string gap after the `\\`.\nNote that this function matches `\"\\\" whitespace+` rather than\nthe more restrictive `\"\\\" newline whitespace*` since this simplifies the implementation.\nJustification: this does not overlap with any other sequences beginning with `\\`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeStringGap\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStringGap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L802-L822","name":"Lean.Syntax.decodeQuotedChar","line":802,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeQuotedChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeQuotedChar\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeQuotedChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L797-L800","name":"Lean.Syntax.toNat","line":797,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.toNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L792-L795","name":"Lean.Syntax.isIdOrAtom?","line":792,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isIdOrAtom?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isIdOrAtom?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isIdOrAtom?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L787-L790","name":"Lean.Syntax.isScientificLit?","line":787,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isScientificLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isScientificLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isScientificLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L773-L785","name":"Lean.Syntax.decodeScientificLitVal?.decode","line":773,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decode\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L761-L771","name":"Lean.Syntax.decodeScientificLitVal?.decodeAfterDot","line":761,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterDot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterDot\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decodeAfterDot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L751-L759","name":"Lean.Syntax.decodeScientificLitVal?.decodeExp","line":751,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeExp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decodeExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L736-L749","name":"Lean.Syntax.decodeScientificLitVal?.decodeAfterExp","line":736,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterExp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?.decodeAfterExp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span>.<span class=\"name\">decodeAfterExp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sign : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exp : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L723-L785","name":"Lean.Syntax.decodeScientificLitVal?","line":723,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?","doc":"Decodes a 'scientific number' string which is consumed by the `OfScientific` class.\nTakes as input a string such as `123`, `123.456e7` and returns a triple `(n, sign, e)` with value given by\n`n * 10^-e` if `sign` else `n * 10^e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeScientificLitVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L720-L721","name":"Lean.Syntax.isFieldIdx?","line":720,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isFieldIdx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isFieldIdx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isFieldIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L717-L718","name":"Lean.Syntax.isNatLit?","line":717,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isNatLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isNatLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNatLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L701-L710","name":"Lean.Syntax.isLit?","line":701,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.isLit?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.isLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(litKind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L684-L699","name":"Lean.Syntax.decodeNatLitVal?","line":684,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.decodeNatLitVal?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.decodeNatLitVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeNatLitVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L638-L639","name":"Lean.Syntax.mkNameLit","line":638,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkNameLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.NameLit\">Lean.NameLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L635-L636","name":"Lean.Syntax.mkScientificLit","line":635,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkScientificLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkScientificLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkScientificLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <a href=\"./Init/Prelude.html#Lean.scientificLitKind\">Lean.scientificLitKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L632-L633","name":"Lean.Syntax.mkNatLit","line":632,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkNatLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L629-L630","name":"Lean.Syntax.mkNumLit","line":629,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkNumLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNumLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L626-L627","name":"Lean.Syntax.mkStrLit","line":626,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkStrLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.StrLit\">Lean.StrLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L623-L624","name":"Lean.Syntax.mkCharLit","line":623,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkCharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkCharLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.CharLit\">Lean.CharLit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L619-L621","name":"Lean.Syntax.mkLit","line":619,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">Lean.SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">kind</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L616-L617","name":"Lean.Syntax.mkCApp","line":616,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkCApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkCApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkCApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`term</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L611-L614","name":"Lean.Syntax.mkApp","line":611,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkApp","doc":"Create syntax representing a Lean term application, but avoid degenerate empty applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`term</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L608-L609","name":"Lean.Syntax.instCoeTSyntaxArrayTSepArray","line":608,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayTSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeTSyntaxArrayTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTSyntaxArrayTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L599-L606","name":"Lean.Syntax.TSepArray.ofElems","line":599,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.TSepArray.ofElems","doc":"Constructs a typed separated array from elements.\nThe given array does not include the separators.\n\nLike `Syntax.SepArray.ofElems` but for typed syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.TSepArray.ofElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">ofElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L596-L597","name":"Lean.Syntax.instCoeArraySepArray","line":596,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instCoeArraySepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instCoeArraySepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeArraySepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L592-L594","name":"Lean.Syntax.SepArray.ofElemsUsingRef","line":592,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.SepArray.ofElemsUsingRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.SepArray.ofElemsUsingRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">ofElemsUsingRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L589-L590","name":"Lean.Syntax.SepArray.ofElems","line":589,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.SepArray.ofElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.SepArray.ofElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">ofElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sep : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">Lean.Syntax.SepArray</a> <span class=\"fn\">sep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L586-L587","name":"Lean.Syntax.mkSep","line":586,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkSep\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L581-L582","name":"Lean.mkHole","line":581,"kind":"def","docLink":"./Init/Meta.html#Lean.mkHole","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkHole\"><span class=\"name\">Lean</span>.<span class=\"name\">mkHole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L576-L579","name":"Lean.mkOptionalNode","line":576,"kind":"def","docLink":"./Init/Meta.html#Lean.mkOptionalNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkOptionalNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOptionalNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L565-L574","name":"Lean.mkSepArray","line":565,"kind":"def","docLink":"./Init/Meta.html#Lean.mkSepArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSepArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L562-L563","name":"Lean.mkGroupNode","line":562,"kind":"def","docLink":"./Init/Meta.html#Lean.mkGroupNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkGroupNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkGroupNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span> := <span class=\"fn\">#[]</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L558-L560","name":"Lean.mkIdent","line":558,"kind":"def","docLink":"./Init/Meta.html#Lean.mkIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L555-L556","name":"Lean.mkCIdent","line":555,"kind":"def","docLink":"./Init/Meta.html#Lean.mkCIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkCIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L552-L553","name":"Lean.mkCIdentFromRef","line":552,"kind":"def","docLink":"./Init/Meta.html#Lean.mkCIdentFromRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkCIdentFromRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdentFromRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L543-L550","name":"Lean.mkCIdentFrom","line":543,"kind":"def","docLink":"./Init/Meta.html#Lean.mkCIdentFrom","doc":"Create an identifier referring to a constant `c` copying the position from `src`.\nThis variant of `mkIdentFrom` makes sure that the identifier cannot accidentally\nbe captured. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkCIdentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(src : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L540-L541","name":"Lean.mkIdentFromRef","line":540,"kind":"def","docLink":"./Init/Meta.html#Lean.mkIdentFromRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkIdentFromRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdentFromRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L534-L538","name":"Lean.mkIdentFrom","line":534,"kind":"def","docLink":"./Init/Meta.html#Lean.mkIdentFrom","doc":"Create an identifier copying the position from `src`.\nTo refer to a specific constant, use `mkCIdentFrom` instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkIdentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(src : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonical : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L493-L530","name":"Lean.expandMacros","line":493,"kind":"opaque","docLink":"./Init/Meta.html#Lean.expandMacros","doc":"Expand macros in the given syntax.\nA node with kind `k` is visited only if `p k` is true.\n\nNote that the default value for `p` returns false for `by ...` nodes.\nThis is a \"hack\". The tactic framework abuses the macro system to implement extensible tactics.\nFor example, one can define\n```lean\nsyntax \"my_trivial\" : tactic -- extensible tactic\n\nmacro_rules | `(tactic| my_trivial) => `(tactic| decide)\nmacro_rules | `(tactic| my_trivial) => `(tactic| assumption)\n```\nWhen the tactic evaluator finds the tactic `my_trivial`, it tries to evaluate the `macro_rule` expansions\nuntil one \"works\", i.e., the macro expansion is evaluated without producing an exception.\nWe say this solution is a bit hackish because the term elaborator may invoke `expandMacros` with `(p := fun _ => true)`,\nand expand the tactic macros as just macros. In the example above, `my_trivial` would be replaced with `assumption`,\n`decide` would not be tried if `assumption` fails at tactic evaluation time.\n\nWe are considering two possible solutions for this issue:\n1- A proper extensible tactic feature that does not rely on the macro system.\n\n2- Typed macros that know the syntax categories they're working in. Then, we would be able to select which\n   syntactic categories are expanded by `expandMacros`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.expandMacros\"><span class=\"name\">Lean</span>.<span class=\"name\">expandMacros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">`Lean.Parser.Term.byTactic</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L487-L491","name":"Lean.withHeadRefOnly","line":487,"kind":"def","docLink":"./Init/Meta.html#Lean.withHeadRefOnly","doc":"Use the head atom/identifier of the current `ref` as the `ref` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.withHeadRefOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">withHeadRefOnly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L481-L483","name":"Lean.Syntax.mkSynthetic","line":481,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.mkSynthetic","doc":"Ensure head position is synthetic. The server regards syntax as \"original\" only if both head and tail info are `original`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.mkSynthetic\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkSynthetic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L478-L479","name":"Lean.Syntax.copyHeadTailInfoFrom","line":478,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.copyHeadTailInfoFrom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.copyHeadTailInfoFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">copyHeadTailInfoFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(target source : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L470-L476","name":"Lean.Syntax.getHead?","line":470,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.getHead?","doc":"Return the first atom/identifier that has position information "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getHead?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getHead?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L464-L468","name":"Lean.Syntax.setInfo","line":464,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.setInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L459-L462","name":"Lean.Syntax.setHeadInfo","line":459,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.setHeadInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setHeadInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setHeadInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L450-L457","name":"Lean.Syntax.setHeadInfoAux","line":450,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.setHeadInfoAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setHeadInfoAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setHeadInfoAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L429-L439","name":"Lean.Syntax.unsetTrailing","line":429,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.unsetTrailing","doc":"Replaces the trailing whitespace in `stx`, if any, with an empty substring.\n\nThe trailing substring's `startPos` and `str` are preserved in order to ensure that the result could\nhave been produced by the parser, in case any syntax consumers rely on such an assumption.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.unsetTrailing\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">unsetTrailing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L424-L427","name":"Lean.Syntax.setTailInfo","line":424,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.setTailInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setTailInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setTailInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L415-L422","name":"Lean.Syntax.setTailInfoAux","line":415,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.setTailInfoAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.setTailInfoAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setTailInfoAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L392-L403","name":"Lean.Syntax.getSubstring?","line":392,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getSubstring?","doc":"Return substring of original input covering `stx`.\nResult is meaningful only if all involved `SourceInfo.original`s refer to the same string (as is the case after parsing). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getSubstring?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getSubstring?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(withLeading withTrailing : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L387-L390","name":"Lean.Syntax.getTrailingSize","line":387,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getTrailingSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getTrailingSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTrailingSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L384-L385","name":"Lean.Syntax.getTailInfo","line":384,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.getTailInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getTailInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L376-L382","name":"Lean.Syntax.getTailInfo?","line":376,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.getTailInfo?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.getTailInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailInfo?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L374-L374","name":"Lean.Syntax.instBEqTSyntax","line":374,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instBEqTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instBEqTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L373-L373","name":"Lean.Syntax.instBEq","line":373,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L365-L371","name":"Lean.Syntax.structEq","line":365,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Syntax.structEq","doc":"Compare syntax structures modulo source info. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.structEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">structEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L363-L363","name":"Lean.Syntax.instBEqPreresolved","line":363,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instBEqPreresolved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instBEqPreresolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqPreresolved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L354-L355","name":"Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray","line":354,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailArraySyntaxTSyntaxArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L351-L352","name":"Lean.TSyntax.Compat.instCoeTailSyntax","line":351,"kind":"def","docLink":"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.Compat.instCoeTailSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L346-L347","name":"Lean.TSyntax.instCoeNumLitPrec","line":346,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitPrec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Prec\">Lean.Prec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L343-L344","name":"Lean.TSyntax.instCoeNumLitPrio","line":343,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNumLitPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Prio\">Lean.Prio</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L340-L341","name":"Lean.TSyntax.instCoeIdentLevel","line":340,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeIdentLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeIdentLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeIdentLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Meta.html#Lean.Syntax.Level\">Lean.Syntax.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L337-L338","name":"Lean.TSyntax.instCoeCharLitTerm","line":337,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeCharLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeCharLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeCharLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.CharLit\">Lean.CharLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L334-L335","name":"Lean.TSyntax.instCoeNumLitTerm","line":334,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNumLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNumLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NumLit\">Lean.NumLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L331-L332","name":"Lean.TSyntax.instCoeScientificLitTerm","line":331,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeScientificLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeScientificLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeScientificLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.ScientificLit\">Lean.ScientificLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L328-L329","name":"Lean.TSyntax.instCoeNameLitTerm","line":328,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeNameLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeNameLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNameLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.NameLit\">Lean.NameLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L325-L326","name":"Lean.TSyntax.instCoeStrLitTerm","line":325,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeStrLitTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeStrLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeStrLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.StrLit\">Lean.StrLit</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L322-L323","name":"Lean.TSyntax.instCoeDepTermMkIdentIdent","line":322,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeDepTermMkIdentIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeDepTermMkIdentIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeDepTermMkIdentIdent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{info : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ss : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeDep\">CoeDep</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <span class=\"fn\">{ <span class=\"fn\">raw</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.ident\">Lean.Syntax.ident</a> <span class=\"fn\">info</span> <span class=\"fn\">ss</span> <span class=\"fn\">n</span> <span class=\"fn\">res</span></span> }</span> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L319-L320","name":"Lean.TSyntax.instCoeIdentTerm","line":319,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeIdentTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeIdentTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeIdentTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L316-L317","name":"Lean.TSyntax.instCoeConsSyntaxNodeKind","line":316,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeConsSyntaxNodeKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ks : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k' : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">ks</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">(<span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ks</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L313-L314","name":"Lean.TSyntax.instCoeConsSyntaxNodeKindNil","line":313,"kind":"instance","docLink":"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKindNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.TSyntax.instCoeConsSyntaxNodeKindNil\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeConsSyntaxNodeKindNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ks</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L305-L305","name":"Lean.Syntax.HygieneInfo","line":305,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.HygieneInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.HygieneInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">HygieneInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L304-L304","name":"Lean.Syntax.NumLit","line":304,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.NumLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.NumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">NumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L303-L303","name":"Lean.Syntax.ScientificLit","line":303,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.ScientificLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.ScientificLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ScientificLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L302-L302","name":"Lean.Syntax.NameLit","line":302,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.NameLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.NameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">NameLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L301-L301","name":"Lean.Syntax.CharLit","line":301,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.CharLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.CharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">CharLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L300-L300","name":"Lean.Syntax.StrLit","line":300,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.StrLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.StrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">StrLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L299-L299","name":"Lean.Syntax.Ident","line":299,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Ident","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Ident\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Ident</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L298-L298","name":"Lean.Syntax.Prio","line":298,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Prio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Prio\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Prio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L297-L297","name":"Lean.Syntax.Prec","line":297,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Prec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Prec\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Prec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L296-L296","name":"Lean.Syntax.Tactic","line":296,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Tactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L295-L295","name":"Lean.Syntax.Level","line":295,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Level","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Level\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Level</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L294-L294","name":"Lean.Syntax.Command","line":294,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Command","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Command\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Command</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L293-L293","name":"Lean.Syntax.Term","line":293,"kind":"def","docLink":"./Init/Meta.html#Lean.Syntax.Term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.Term\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L291-L291","name":"Lean.Syntax.instReprTSyntax","line":291,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instReprTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instReprTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ks✝ : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">ks✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L290-L290","name":"Lean.Syntax.instRepr","line":290,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instRepr\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L289-L289","name":"Lean.Syntax.instReprPreresolved","line":289,"kind":"instance","docLink":"./Init/Meta.html#Lean.Syntax.instReprPreresolved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Syntax.instReprPreresolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprPreresolved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Lean.Syntax.Preresolved</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L282-L285","name":"Lean.monadNameGeneratorLift","line":282,"kind":"instance","docLink":"./Init/Meta.html#Lean.monadNameGeneratorLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.monadNameGeneratorLift\"><span class=\"name\">Lean</span>.<span class=\"name\">monadNameGeneratorLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L276-L280","name":"Lean.mkFreshId","line":276,"kind":"def","docLink":"./Init/Meta.html#Lean.mkFreshId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.mkFreshId\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFreshId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L272-L272","name":"Lean.MonadNameGenerator.setNGen","line":272,"kind":"def","docLink":"./Init/Meta.html#Lean.MonadNameGenerator.setNGen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator.setNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">setNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L271-L271","name":"Lean.MonadNameGenerator.getNGen","line":271,"kind":"def","docLink":"./Init/Meta.html#Lean.MonadNameGenerator.getNGen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator.getNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">getNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L270-L270","name":"Lean.MonadNameGenerator.mk","line":270,"kind":"ctor","docLink":"./Init/Meta.html#Lean.MonadNameGenerator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(getNGen : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(setNGen : <span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L270-L272","name":"Lean.MonadNameGenerator","line":270,"kind":"class","docLink":"./Init/Meta.html#Lean.MonadNameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.MonadNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L264-L266","name":"Lean.NameGenerator.mkChild","line":264,"kind":"def","docLink":"./Init/Meta.html#Lean.NameGenerator.mkChild","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.NameGenerator.mkChild\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mkChild</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L261-L262","name":"Lean.NameGenerator.next","line":261,"kind":"def","docLink":"./Init/Meta.html#Lean.NameGenerator.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.NameGenerator.next\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L258-L259","name":"Lean.NameGenerator.curr","line":258,"kind":"def","docLink":"./Init/Meta.html#Lean.NameGenerator.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.NameGenerator.curr\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L251-L252","name":"Lean.Name.instDecidableEq","line":251,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instDecidableEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L247-L249","name":"Lean.Name.instLawfulBEq","line":247,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instLawfulBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instLawfulBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L243-L245","name":"Lean.Name.beq_iff_eq","line":243,"kind":"theorem","docLink":"./Init/Meta.html#Lean.Name.beq_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.beq_iff_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">beq_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L236-L241","name":"Lean.Name.appendBefore","line":236,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.appendBefore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.appendBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L230-L234","name":"Lean.Name.appendIndexAfter","line":230,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.appendIndexAfter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.appendIndexAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendIndexAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L224-L228","name":"Lean.Name.appendAfter","line":224,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.appendAfter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.appendAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suffix : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L216-L222","name":"Lean.Name.modifyBase","line":216,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.modifyBase","doc":"Remove macros scopes, apply `f`, and put them back "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.modifyBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">modifyBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L207-L214","name":"Lean.Name.eraseSuffix?","line":207,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.eraseSuffix?","doc":"`eraseSuffix? n s` return `n'` if `n` is of the form `n == n' ++ s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.eraseSuffix?\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">eraseSuffix?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L201-L205","name":"Lean.Name.replacePrefix","line":201,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.replacePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.replacePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">replacePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L197-L199","name":"Lean.Name.capitalize","line":197,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.capitalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.capitalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">capitalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L194-L195","name":"Lean.Name.instRepr","line":194,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instRepr\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L184-L192","name":"Lean.Name.reprPrec","line":184,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.reprPrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.reprPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">reprPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prec : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L176-L177","name":"Lean.Name.instToString","line":176,"kind":"instance","docLink":"./Init/Meta.html#Lean.Name.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L166-L174","name":"Lean.Name.toString.maybePseudoSyntax","line":166,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toString.maybePseudoSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toString.maybePseudoSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toString</span>.<span class=\"name\">maybePseudoSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L151-L174","name":"Lean.Name.toString","line":151,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toString","doc":"Converts a name to a string.\n\n- If `escape` is `true`, then escapes name components using `«` and `»` to ensure that\n  those names that can appear in source files round trip.\n  Names with number components, anonymous names, and names containing `»` might not round trip.\n  Furthermore, \"pseudo-syntax\" produced by the delaborator, such as `_`, `#0` or `?u`, is not escaped.\n- The optional `isToken` function is used when `escape` is `true` to determine whether more\n  escaping is necessary to avoid parser tokens.\n  The insertion algorithm works so long as parser tokens do not themselves contain `«` or `»`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(escape : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isToken : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L149-L149","name":"Lean.Name.toStringWithSep.maybeEscape","line":149,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toStringWithSep.maybeEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toStringWithSep.maybeEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toStringWithSep</span>.<span class=\"name\">maybeEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(escape : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(force : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L133-L149","name":"Lean.Name.toStringWithSep","line":133,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.toStringWithSep","doc":"Uses the separator `sep` (usually `\".\"`) to combine the components of the `Name` into a string.\nSee the documentation for `Name.toString` for an explanation of `escape` and `isToken`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.toStringWithSep\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toStringWithSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(escape : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isToken : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L122-L130","name":"Lean.Name.escapePart","line":122,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.escapePart","doc":"Creates a round-trippable string name component if possible, otherwise returns `none`.\nNames that are valid identifiers are not escaped, and otherwise, if they do not contain `»`, they are escaped.\n- If `force` is `true`, then even valid identifiers are escaped.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.escapePart\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">escapePart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(force : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L116-L120","name":"Lean.Name.isInaccessibleUserName","line":116,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.isInaccessibleUserName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.isInaccessibleUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInaccessibleUserName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L109-L114","name":"Lean.Name.getRoot","line":109,"kind":"def","docLink":"./Init/Meta.html#Lean.Name.getRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Name.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L106-L106","name":"Lean.isIdEndEscape","line":106,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdEndEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdEndEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdEndEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L105-L105","name":"Lean.isIdBeginEscape","line":105,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdBeginEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdBeginEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdBeginEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L104-L104","name":"Lean.idEndEscape","line":104,"kind":"def","docLink":"./Init/Meta.html#Lean.idEndEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.idEndEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">idEndEscape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L103-L103","name":"Lean.idBeginEscape","line":103,"kind":"def","docLink":"./Init/Meta.html#Lean.idBeginEscape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.idBeginEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">idBeginEscape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L100-L101","name":"Lean.isIdRest","line":100,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdRest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdRest\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdRest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L97-L98","name":"Lean.isIdFirst","line":97,"kind":"def","docLink":"./Init/Meta.html#Lean.isIdFirst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isIdFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdFirst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L92-L95","name":"Lean.isSubScriptAlnum","line":92,"kind":"def","docLink":"./Init/Meta.html#Lean.isSubScriptAlnum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isSubScriptAlnum\"><span class=\"name\">Lean</span>.<span class=\"name\">isSubScriptAlnum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L89-L90","name":"Lean.isNumericSubscript","line":89,"kind":"def","docLink":"./Init/Meta.html#Lean.isNumericSubscript","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isNumericSubscript\"><span class=\"name\">Lean</span>.<span class=\"name\">isNumericSubscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L81-L87","name":"Lean.isLetterLike","line":81,"kind":"def","docLink":"./Init/Meta.html#Lean.isLetterLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isLetterLike\"><span class=\"name\">Lean</span>.<span class=\"name\">isLetterLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L77-L79","name":"Lean.isGreek","line":77,"kind":"def","docLink":"./Init/Meta.html#Lean.isGreek","doc":"Valid identifier names "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.isGreek\"><span class=\"name\">Lean</span>.<span class=\"name\">isGreek</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L68-L75","name":"Lean.Internal.hasLLVMBackend","line":68,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Internal.hasLLVMBackend","doc":"This function can be used to detect whether the compiler has support for\ngenerating LLVM instead of C. It is used by lake instead of the --features\nflag in order to avoid having to run a compiler for this every time on startup.\nSee #2572.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Internal.hasLLVMBackend\"><span class=\"name\">Lean</span>.<span class=\"name\">Internal</span>.<span class=\"name\">hasLLVMBackend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L65-L66","name":"Lean.Internal.isStage0","line":65,"kind":"opaque","docLink":"./Init/Meta.html#Lean.Internal.isStage0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Internal.isStage0\"><span class=\"name\">Lean</span>.<span class=\"name\">Internal</span>.<span class=\"name\">isStage0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L54-L63","name":"Lean.toolchain","line":54,"kind":"def","docLink":"./Init/Meta.html#Lean.toolchain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.toolchain\"><span class=\"name\">Lean</span>.<span class=\"name\">toolchain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L51-L52","name":"Lean.origin","line":51,"kind":"def","docLink":"./Init/Meta.html#Lean.origin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.origin\"><span class=\"name\">Lean</span>.<span class=\"name\">origin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L43-L49","name":"Lean.versionString","line":43,"kind":"def","docLink":"./Init/Meta.html#Lean.versionString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.versionString\"><span class=\"name\">Lean</span>.<span class=\"name\">versionString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L40-L41","name":"Lean.versionStringCore","line":40,"kind":"def","docLink":"./Init/Meta.html#Lean.versionStringCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.versionStringCore\"><span class=\"name\">Lean</span>.<span class=\"name\">versionStringCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L38-L38","name":"Lean.version.specialDesc","line":38,"kind":"def","docLink":"./Init/Meta.html#Lean.version.specialDesc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.specialDesc\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">specialDesc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L35-L37","name":"Lean.version.getSpecialDesc","line":35,"kind":"opaque","docLink":"./Init/Meta.html#Lean.version.getSpecialDesc","doc":"Additional version description like \"nightly-2018-03-11\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.getSpecialDesc\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">getSpecialDesc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L33-L33","name":"Lean.version.isRelease","line":33,"kind":"def","docLink":"./Init/Meta.html#Lean.version.isRelease","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.isRelease\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">isRelease</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L31-L32","name":"Lean.version.getIsRelease","line":31,"kind":"opaque","docLink":"./Init/Meta.html#Lean.version.getIsRelease","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.getIsRelease\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">getIsRelease</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L29-L29","name":"Lean.githash","line":29,"kind":"def","docLink":"./Init/Meta.html#Lean.githash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.githash\"><span class=\"name\">Lean</span>.<span class=\"name\">githash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L27-L28","name":"Lean.getGithash","line":27,"kind":"opaque","docLink":"./Init/Meta.html#Lean.getGithash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.getGithash\"><span class=\"name\">Lean</span>.<span class=\"name\">getGithash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L25-L25","name":"Lean.version.patch","line":25,"kind":"def","docLink":"./Init/Meta.html#Lean.version.patch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.patch\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">patch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L21-L21","name":"Lean.version.minor","line":21,"kind":"def","docLink":"./Init/Meta.html#Lean.version.minor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.minor\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">minor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Meta.lean#L17-L17","name":"Lean.version.major","line":17,"kind":"def","docLink":"./Init/Meta.html#Lean.version.major","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.version.major\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">major</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}