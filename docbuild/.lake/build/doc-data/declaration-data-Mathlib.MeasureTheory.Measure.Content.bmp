{"name":"Mathlib.MeasureTheory.Measure.Content","instances":[{"typeNames":["MeasureTheory.Content"],"name":"MeasureTheory.instInhabitedContent","className":"Inhabited"},{"typeNames":["MeasureTheory.Content"],"name":"MeasureTheory.instCoeFunContentForallCompactsENNReal","className":"CoeFun"},{"typeNames":["MeasureTheory.Content.measure"],"name":"MeasureTheory.Content.outerRegular","className":"MeasureTheory.Measure.OuterRegular"},{"typeNames":["MeasureTheory.Content.measure"],"name":"MeasureTheory.Content.regular","className":"MeasureTheory.Measure.Regular"}],"imports":["Init","Mathlib.MeasureTheory.Measure.MeasureSpace","Mathlib.MeasureTheory.Measure.Regular","Mathlib.Topology.Sets.Compacts"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L407-L426","name":"MeasureTheory.Content.measure_eq_content_of_regular","line":407,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.measure_eq_content_of_regular","doc":"If `μ` is a regular content, then the measure induced by `μ` will agree with `μ`\non compact sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.measure_eq_content_of_regular\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">measure_eq_content_of_regular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">μ</span>.ContentRegular</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.measure</span> <span class=\"fn\">↑<span class=\"fn\">K</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L393-L403","name":"MeasureTheory.Content.contentRegular_exists_compact","line":393,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.contentRegular_exists_compact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.contentRegular_exists_compact\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">contentRegular_exists_compact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">μ</span>.ContentRegular</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">K'</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.carrier</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#interior\">interior</a> <span class=\"fn\"><span class=\"fn\">K'</span>.carrier</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L387-L391","name":"MeasureTheory.Content.ContentRegular","line":387,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.ContentRegular","doc":"A content `μ` is called regular if for every compact set `K`,\n`μ(K) = inf {μ(K') : K ⊂ int K' ⊂ K'}`. See Paul Halmos (1950), Measure Theory, §54"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.ContentRegular\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">ContentRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L369-L381","name":"MeasureTheory.Content.regular","line":369,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.regular","doc":"In a locally compact space, any measure constructed from a content is regular. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.regular\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">regular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[S : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#WeaklyLocallyCompactSpace\">WeaklyLocallyCompactSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.measure</span>.Regular</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L361-L367","name":"MeasureTheory.Content.outerRegular","line":361,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerRegular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerRegular\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[S : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.measure</span>.OuterRegular</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L358-L359","name":"MeasureTheory.Content.measure_apply","line":358,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.measure_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.measure_apply\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">measure_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[S : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.measure</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L354-L356","name":"MeasureTheory.Content.measure","line":354,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.measure","doc":"The measure induced by the outer measure coming from a content, on the Borel sigma-algebra. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.measure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">measure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[S : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L311-L352","name":"MeasureTheory.Content.borel_le_caratheodory","line":311,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.borel_le_caratheodory","doc":"For the outer measure coming from a content, all Borel sets are measurable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.borel_le_caratheodory\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">borel_le_caratheodory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[S : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span>.caratheodory</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L302-L302","name":"MeasureTheory.Content.outerMeasure_pos_of_is_add_left_invariant","line":302,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_pos_of_is_add_left_invariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_pos_of_is_add_left_invariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_pos_of_is_add_left_invariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalAddGroup\">TopologicalAddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h3 :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hK : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2U : <span class=\"fn\"><span class=\"fn\">U</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L302-L307","name":"MeasureTheory.Content.outerMeasure_pos_of_is_mul_left_invariant","line":302,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_pos_of_is_mul_left_invariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_pos_of_is_mul_left_invariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_pos_of_is_mul_left_invariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalGroup\">TopologicalGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h3 :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hK : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2U : <span class=\"fn\"><span class=\"fn\">U</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L294-L300","name":"MeasureTheory.Content.outerMeasure_caratheodory","line":294,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_caratheodory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_caratheodory\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_caratheodory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">U</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">A</span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">U</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">A</span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L288-L288","name":"MeasureTheory.Content.is_add_left_invariant_outerMeasure","line":288,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_add_left_invariant_outerMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_add_left_invariant_outerMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">is_add_left_invariant_outerMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalAddGroup\">TopologicalAddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">(<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">A</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L288-L292","name":"MeasureTheory.Content.is_mul_left_invariant_outerMeasure","line":288,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_mul_left_invariant_outerMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_mul_left_invariant_outerMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">is_mul_left_invariant_outerMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalGroup\">TopologicalGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">(<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">A</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L278-L286","name":"MeasureTheory.Content.outerMeasure_lt_top_of_isCompact","line":278,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_lt_top_of_isCompact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_lt_top_of_isCompact\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_lt_top_of_isCompact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#WeaklyLocallyCompactSpace\">WeaklyLocallyCompactSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hK : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L271-L276","name":"MeasureTheory.Content.outerMeasure_preimage","line":271,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_preimage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_preimage\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_preimage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>⦄,\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">A</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L264-L269","name":"MeasureTheory.Content.outerMeasure_exists_open","line":264,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_exists_open","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_exists_open\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_exists_open</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hA : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L258-L262","name":"MeasureTheory.Content.outerMeasure_exists_compact","line":258,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_exists_compact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_exists_compact\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_exists_compact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">K</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L255-L256","name":"MeasureTheory.Content.outerMeasure_interior_compacts","line":255,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_interior_compacts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_interior_compacts\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_interior_compacts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#interior\">interior</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L251-L253","name":"MeasureTheory.Content.outerMeasure_eq_iInf","line":251,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_eq_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_eq_iInf\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_eq_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>), <span class=\"fn\">⨅ (<span class=\"fn\">hU</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>), <span class=\"fn\">⨅ (_ : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">U</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">U</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">hU</span> }</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L244-L249","name":"MeasureTheory.Content.le_outerMeasure_compacts","line":244,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.le_outerMeasure_compacts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.le_outerMeasure_compacts\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">le_outerMeasure_compacts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">K</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L240-L242","name":"MeasureTheory.Content.outerMeasure_le","line":240,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hUK : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">U</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L236-L238","name":"MeasureTheory.Content.outerMeasure_of_isOpen","line":236,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_of_isOpen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_of_isOpen\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_of_isOpen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">U</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">U</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">hU</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L233-L234","name":"MeasureTheory.Content.outerMeasure_opens","line":233,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_opens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure_opens\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure_opens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.outerMeasure</span> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L227-L229","name":"MeasureTheory.Content.outerMeasure","line":227,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure","doc":"Extending a content on compact sets to an outer measure on all sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.outerMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">outerMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">MeasureTheory.OuterMeasure</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L221-L223","name":"MeasureTheory.Content.innerContent_mono'","line":221,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_mono'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃U V : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">U</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">U</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">hU</span> }</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">V</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">hV</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L206-L206","name":"MeasureTheory.Content.innerContent_pos_of_is_add_left_invariant","line":206,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_pos_of_is_add_left_invariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_pos_of_is_add_left_invariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_pos_of_is_add_left_invariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalAddGroup\">TopologicalAddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h3 :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hK : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">U</span>)</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L206-L219","name":"MeasureTheory.Content.innerContent_pos_of_is_mul_left_invariant","line":206,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_pos_of_is_mul_left_invariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_pos_of_is_mul_left_invariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_pos_of_is_mul_left_invariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalGroup\">TopologicalGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h3 :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hK : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">U</span>)</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L199-L199","name":"MeasureTheory.Content.is_add_left_invariant_innerContent","line":199,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_add_left_invariant_innerContent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_add_left_invariant_innerContent\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">is_add_left_invariant_innerContent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalAddGroup\">TopologicalAddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens.comap\">TopologicalSpace.Opens.comap</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#Homeomorph.addLeft\">Homeomorph.addLeft</a> <span class=\"fn\">g</span>)</span></span>)</span> <span class=\"fn\">U</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L199-L204","name":"MeasureTheory.Content.is_mul_left_invariant_innerContent","line":199,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_mul_left_invariant_innerContent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.is_mul_left_invariant_innerContent\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">is_mul_left_invariant_innerContent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#TopologicalGroup\">TopologicalGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h :\n  <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) {<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens.comap\">TopologicalSpace.Opens.comap</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#Homeomorph.mulLeft\">Homeomorph.mulLeft</a> <span class=\"fn\">g</span>)</span></span>)</span> <span class=\"fn\">U</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L192-L197","name":"MeasureTheory.Content.innerContent_comap","line":192,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_comap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_comap\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>⦄,\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts.map\">TopologicalSpace.Compacts.map</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span> <span class=\"fn\">K</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens.comap\">TopologicalSpace.Opens.comap</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">U</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L183-L190","name":"MeasureTheory.Content.innerContent_iUnion_nat","line":183,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_iUnion_nat","doc":"The inner content of a union of sets is at most the sum of the individual inner contents.\nThis is the \"unbundled\" version of `innerContent_iSup_nat`.\nIt is required for the API of `inducedOuterMeasure`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_iUnion_nat\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_iUnion_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃U : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\">U</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">U</span> <span class=\"fn\">i</span></span></span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">⋯</span> }</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\">∑' (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\"><span class=\"fn\">U</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">⋯</span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L157-L181","name":"MeasureTheory.Content.innerContent_iSup_nat","line":157,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_iSup_nat","doc":"The inner content of a supremum of opens is at most the sum of the individual inner contents. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_iSup_nat\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_iSup_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#R1Space\">R1Space</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">(⨆ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">U</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">∑' (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">(<span class=\"fn\">U</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L146-L155","name":"MeasureTheory.Content.innerContent_exists_compact","line":146,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_exists_compact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_exists_compact\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_exists_compact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L141-L144","name":"MeasureTheory.Content.innerContent_mono","line":141,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_mono","doc":"This is \"unbundled\", because that is required for the API of `inducedOuterMeasure`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_mono\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃U V : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">U</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">U</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">hU</span> }</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">V</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">hV</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L132-L139","name":"MeasureTheory.Content.innerContent_bot","line":132,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_bot\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L128-L130","name":"MeasureTheory.Content.innerContent_of_isCompact","line":128,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_of_isCompact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_of_isCompact\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_of_isCompact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">K</span>, <span class=\"fn\">is_open'</span> := <span class=\"fn\">h2K</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">carrier</span> := <span class=\"fn\">K</span>, <span class=\"fn\">isCompact'</span> := <span class=\"fn\">h1K</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L124-L126","name":"MeasureTheory.Content.innerContent_le","line":124,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">U</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L120-L122","name":"MeasureTheory.Content.le_innerContent","line":120,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.le_innerContent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.le_innerContent\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">le_innerContent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.innerContent</span> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L114-L118","name":"MeasureTheory.Content.innerContent","line":114,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent","doc":"Constructing the inner content of a content. From a content defined on the compact sets, we\nobtain a function defined on all open sets, by taking the supremum of the content of all compact\nsubsets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.innerContent\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">innerContent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L110-L112","name":"MeasureTheory.Content.empty","line":110,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.empty\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L107-L108","name":"MeasureTheory.Content.lt_top","line":107,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.lt_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.lt_top\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">lt_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L102-L105","name":"MeasureTheory.Content.sup_le","line":102,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">sup_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K₁ K₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">K₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K₂</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>     <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L97-L100","name":"MeasureTheory.Content.sup_disjoint","line":97,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_disjoint\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">sup_disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K₁ K₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\">K₁</span></span> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">↑<span class=\"fn\">K₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">K₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>     <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L94-L95","name":"MeasureTheory.Content.mono","line":94,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.mono\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K₁ K₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">K₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L91-L92","name":"MeasureTheory.Content.apply_eq_coe_toFun","line":91,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.apply_eq_coe_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.apply_eq_coe_toFun\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">apply_eq_coe_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">s</span>)</span></span>)</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.toFun</span> <span class=\"fn\">K</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L81-L85","name":"MeasureTheory.instCoeFunContentForallCompactsENNReal","line":81,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.instCoeFunContentForallCompactsENNReal","doc":"Although the `toFun` field of a content takes values in `ℝ≥0`, we register a coercion to\nfunctions taking values in `ℝ≥0∞` as most constructions below rely on taking iSups and iInfs, which\nis more convenient in a complete lattice, and aim at constructing a measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.instCoeFunContentForallCompactsENNReal\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">instCoeFunContentForallCompactsENNReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L75-L79","name":"MeasureTheory.instInhabitedContent","line":75,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.instInhabitedContent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.instInhabitedContent\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">instInhabitedContent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L73-L73","name":"MeasureTheory.Content.sup_le'","line":73,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_le'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">sup_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K₁ K₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<span class=\"fn\">K₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K₂</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">K₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L70-L70","name":"MeasureTheory.Content.sup_disjoint'","line":70,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_disjoint'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.sup_disjoint'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">sup_disjoint'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K₁ K₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\">K₁</span></span> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">↑<span class=\"fn\">K₁</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<span class=\"fn\">K₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">K₂</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L69-L69","name":"MeasureTheory.Content.mono'","line":69,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.mono'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K₁ K₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">K₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">K₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L68-L68","name":"MeasureTheory.Content.toFun","line":68,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.toFun\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span> → <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L67-L67","name":"MeasureTheory.Content.mk","line":67,"kind":"ctor","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFun : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span> → <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mono' : <span class=\"fn\">∀ (<span class=\"fn\">K₁ </span><span class=\"fn\">K₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">K₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">K₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup_disjoint' :\n  <span class=\"fn\">∀ (<span class=\"fn\">K₁ </span><span class=\"fn\">K₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\">K₁</span></span> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">↑<span class=\"fn\">K₁</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">↑<span class=\"fn\">K₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\">K₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">K₂</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup_le' : <span class=\"fn\">∀ (<span class=\"fn\">K₁ </span><span class=\"fn\">K₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.Compacts\">TopologicalSpace.Compacts</a> <span class=\"fn\">G</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\">K₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K₂</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">K₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">K₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\">MeasureTheory.Content</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/MeasureTheory/Measure/Content.lean#L65-L73","name":"MeasureTheory.Content","line":65,"kind":"structure","docLink":"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content","doc":"A content is an additive function on compact sets taking values in `ℝ≥0`. It is a device\nfrom which one can define a measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/Content.html#MeasureTheory.Content\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Content</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"}]}