{"name":"Mathlib.Tactic.Propose","instances":[],"imports":["Init","Lean.Meta.Tactic.TryThis","Lean.Meta.Tactic.SolveByElim","Mathlib.Lean.Expr.Basic","Mathlib.Lean.Meta","Mathlib.Lean.Meta.Basic","Batteries.Util.Cache","Mathlib.Tactic.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L140-L140","name":"Mathlib.Tactic.Propose.«tacticHave!?:_Using__»","line":140,"kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave!?:_Using__»","doc":"* `have? using a, b, c` tries to find a lemma\nwhich makes use of each of the local hypotheses `a, b, c`,\nand reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave!?:_Using__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">«tacticHave!?:_Using__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L139-L139","name":"Mathlib.Tactic.Propose.«tacticHave?!:_Using__»","line":139,"kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave?!:_Using__»","doc":"* `have? using a, b, c` tries to find a lemma\nwhich makes use of each of the local hypotheses `a, b, c`,\nand reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave?!:_Using__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">«tacticHave?!:_Using__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L101-L115","name":"Mathlib.Tactic.Propose.propose'","line":101,"kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose'","doc":"* `have? using a, b, c` tries to find a lemma\nwhich makes use of each of the local hypotheses `a, b, c`,\nand reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">propose'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L72-L97","name":"Mathlib.Tactic.Propose.propose","line":72,"kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose","doc":"Attempts to find lemmas which use all of the `required` expressions as arguments, and\ncan be unified with the given `type` (which may contain metavariables, which we avoid assigning).\nWe look up candidate lemmas from a discrimination tree using the first such expression.\n\nReturns an array of pairs, containing the names of found lemmas and the resulting application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">propose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(required : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(solveByElimDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L57-L70","name":"Mathlib.Tactic.Propose.solveByElim","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.solveByElim","doc":"Shortcut for calling `solveByElim`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.solveByElim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(orig : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(use required : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L45-L54","name":"Mathlib.Tactic.Propose.proposeLemmas","line":45,"kind":"opaque","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.proposeLemmas","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.proposeLemmas\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">proposeLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">Batteries.Tactic.DeclCache</a> <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Propose.lean#L42-L43","name":"Mathlib.Tactic.Propose.discrTreeConfig","line":42,"kind":"def","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.discrTreeConfig","doc":"Configuration for `DiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.discrTreeConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">discrTreeConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"}]}