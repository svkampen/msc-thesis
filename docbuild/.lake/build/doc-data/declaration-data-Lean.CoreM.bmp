{"name":"Lean.CoreM","instances":[{"typeNames":["Lean.Core.Cache"],"name":"Lean.Core.instInhabitedCache","className":"Inhabited"},{"typeNames":["Lean.Core.State"],"name":"Lean.Core.instNonemptyState","className":"Nonempty"},{"typeNames":["Lean.Core.Context"],"name":"Lean.Core.instNonemptyContext","className":"Nonempty"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadCoreM","className":"Monad"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instInhabitedCoreM","className":"Inhabited"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadRefCoreM","className":"Lean.MonadRef"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadEnvCoreM","className":"Lean.MonadEnv"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadOptionsCoreM","className":"Lean.MonadOptions"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadWithOptionsCoreM","className":"Lean.MonadWithOptions"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instAddMessageContextCoreM","className":"Lean.AddMessageContext"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadNameGeneratorCoreM","className":"Lean.MonadNameGenerator"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadRecDepthCoreM","className":"Lean.MonadRecDepth"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadResolveNameCoreM","className":"Lean.MonadResolveName"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadQuotationCoreM","className":"Lean.MonadQuotation"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadInfoTreeCoreM","className":"Lean.Elab.MonadInfoTree"},{"typeNames":["IO","Lean.Core.CoreM"],"name":"Lean.Core.instMonadLiftIOCoreM","className":"MonadLift"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadTraceCoreM","className":"Lean.MonadTrace"},{"typeNames":["Lean.Core.SavedState"],"name":"Lean.Core.instNonemptySavedState","className":"Nonempty"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.Core.instMonadLogCoreM","className":"Lean.MonadLog"},{"typeNames":["Lean.Exception","Lean.Core.CoreM"],"name":"Lean.instMonadExceptOfExceptionCoreM","className":"MonadExceptOf"},{"typeNames":["Lean.Core.CoreM"],"name":"Lean.instMonadRuntimeExceptionCoreM","className":"Lean.MonadRuntimeException"},{"typeNames":["ReaderT"],"name":"Lean.instMonadRuntimeExceptionReaderT","className":"Lean.MonadRuntimeException"},{"typeNames":["StateRefT'"],"name":"Lean.instMonadRuntimeExceptionStateRefT'","className":"Lean.MonadRuntimeException"}],"imports":["Lean.Util.RecDepth","Lean.Util.Trace","Lean.Log","Lean.ResolveName","Lean.Elab.InfoTree.Types","Lean.MonadEnv","Lean.Elab.Exception"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L523-L533","name":"Lean.reportMessageKind","line":523,"kind":"def","docLink":"./Lean/CoreM.html#Lean.reportMessageKind","doc":"Returns `true` if the given message kind has not been reported in the message log,\nand then mark it as reported. Otherwise, returns `false`.\nWe use this API to ensure we don't report the same kind of warning multiple times.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.reportMessageKind\"><span class=\"name\">Lean</span>.<span class=\"name\">reportMessageKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L520-L521","name":"Lean.mapCoreM","line":520,"kind":"def","docLink":"./Lean/CoreM.html#Lean.mapCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mapCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">mapCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L517-L518","name":"Lean.instMonadRuntimeExceptionStateRefT'","line":517,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionStateRefT'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionStateRefT'\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadRuntimeExceptionStateRefT'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L514-L515","name":"Lean.instMonadRuntimeExceptionReaderT","line":514,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionReaderT\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadRuntimeExceptionReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L511-L512","name":"Lean.instMonadRuntimeExceptionCoreM","line":511,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadRuntimeExceptionCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L507-L507","name":"Lean.MonadRuntimeException.tryCatchRuntimeEx","line":507,"kind":"def","docLink":"./Lean/CoreM.html#Lean.MonadRuntimeException.tryCatchRuntimeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadRuntimeException.tryCatchRuntimeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadRuntimeException</span>.<span class=\"name\">tryCatchRuntimeEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(body : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(handler : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L506-L506","name":"Lean.MonadRuntimeException.mk","line":506,"kind":"ctor","docLink":"./Lean/CoreM.html#Lean.MonadRuntimeException.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadRuntimeException.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadRuntimeException</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tryCatchRuntimeEx : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">Lean.MonadRuntimeException</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L506-L507","name":"Lean.MonadRuntimeException","line":506,"kind":"class","docLink":"./Lean/CoreM.html#Lean.MonadRuntimeException","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadRuntimeException</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L502-L504","name":"Lean.instMonadExceptOfExceptionCoreM","line":502,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.instMonadExceptOfExceptionCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadExceptOfExceptionCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadExceptOfExceptionCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L489-L500","name":"Lean.Core.tryCatchRuntimeEx","line":489,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.tryCatchRuntimeEx","doc":"A variant of `tryCatch` that also catches runtime exception (see also `tryCatch` documentation).\nLike `tryCatch`, this function does not catch interrupt exceptions, which are not considered runtime\nexceptions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.tryCatchRuntimeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">tryCatchRuntimeEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L474-L487","name":"Lean.Core.tryCatch","line":474,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.tryCatch","doc":"Custom `try-catch` for all monads based on `CoreM`. We usually don't want to catch \"runtime\nexceptions\" these monads, but on `CommandElabM` or, in specific cases, using `tryCatchRuntimeEx`.\nSee issues #2775 and #2744 as well as `MonadAlwaysExcept`. Also, we never want to catch interrupt\nexceptions inside the elaborator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.tryCatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L469-L472","name":"Lean.Exception.isInterrupt","line":469,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Exception.isInterrupt","doc":"Returns `true` if the exception is an interrupt generated by `checkInterrupted`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Exception.isInterrupt\"><span class=\"name\">Lean</span>.<span class=\"name\">Exception</span>.<span class=\"name\">isInterrupt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L465-L467","name":"Lean.Exception.isRuntime","line":465,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Exception.isRuntime","doc":"Return `true` if the exception was generated by one of our resource limits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Exception.isRuntime\"><span class=\"name\">Lean</span>.<span class=\"name\">Exception</span>.<span class=\"name\">isRuntime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ex : <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L460-L463","name":"Lean.ImportM.runCoreM","line":460,"kind":"def","docLink":"./Lean/CoreM.html#Lean.ImportM.runCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.ImportM.runCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span>.<span class=\"name\">runCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L456-L458","name":"Lean.isDiagnosticsEnabled","line":456,"kind":"def","docLink":"./Lean/CoreM.html#Lean.isDiagnosticsEnabled","doc":"Return `true` if diagnostic information collection is enabled. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.isDiagnosticsEnabled\"><span class=\"name\">Lean</span>.<span class=\"name\">isDiagnosticsEnabled</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L453-L454","name":"Lean.getDiag","line":453,"kind":"def","docLink":"./Lean/CoreM.html#Lean.getDiag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.getDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">getDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L442-L451","name":"Lean.compileDecls","line":442,"kind":"def","docLink":"./Lean/CoreM.html#Lean.compileDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compileDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">compileDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L427-L440","name":"Lean.compileDecl","line":427,"kind":"def","docLink":"./Lean/CoreM.html#Lean.compileDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compileDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">compileDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L424-L425","name":"Lean.compileDeclsNew","line":424,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.compileDeclsNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compileDeclsNew\"><span class=\"name\">Lean</span>.<span class=\"name\">compileDeclsNew</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L417-L421","name":"Lean.compiler.enableNew","line":417,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.compiler.enableNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compiler.enableNew\"><span class=\"name\">Lean</span>.<span class=\"name\">compiler</span>.<span class=\"name\">enableNew</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L397-L398","name":"Lean.mkArrowN","line":397,"kind":"def","docLink":"./Lean/CoreM.html#Lean.mkArrowN","doc":"Iterated `mkArrow`, creates the expression `a₁ → a₂ → … → aₙ → b`. Also see `arrowDomainsN`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mkArrowN\"><span class=\"name\">Lean</span>.<span class=\"name\">mkArrowN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L393-L395","name":"Lean.mkArrow","line":393,"kind":"def","docLink":"./Lean/CoreM.html#Lean.mkArrow","doc":"Creates the expression `d → b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mkArrow\"><span class=\"name\">Lean</span>.<span class=\"name\">mkArrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L386-L391","name":"Lean.Exception.isMaxHeartbeat","line":386,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Exception.isMaxHeartbeat","doc":"Return true if `ex` was generated by `throwMaxHeartbeat`.\nThis function is a bit hackish. The heartbeat exception should probably be an internal exception.\nWe used a similar hack at `Exception.isMaxRecDepth` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Exception.isMaxHeartbeat\"><span class=\"name\">Lean</span>.<span class=\"name\">Exception</span>.<span class=\"name\">isMaxHeartbeat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ex : <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L379-L384","name":"Lean.catchInternalIds","line":379,"kind":"def","docLink":"./Lean/CoreM.html#Lean.catchInternalIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.catchInternalIds\"><span class=\"name\">Lean</span>.<span class=\"name\">catchInternalIds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ids : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">Lean.InternalExceptionId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L372-L377","name":"Lean.catchInternalId","line":372,"kind":"def","docLink":"./Lean/CoreM.html#Lean.catchInternalId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.catchInternalId\"><span class=\"name\">Lean</span>.<span class=\"name\">catchInternalId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">Lean.InternalExceptionId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L369-L370","name":"Lean.withAtLeastMaxRecDepth","line":369,"kind":"def","docLink":"./Lean/CoreM.html#Lean.withAtLeastMaxRecDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.withAtLeastMaxRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">withAtLeastMaxRecDepth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(max : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L349-L363","name":"Lean.Core.instMonadLogCoreM","line":349,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadLogCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadLogCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadLogCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L340-L347","name":"Lean.Core.getAndEmptyMessageLog","line":340,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.getAndEmptyMessageLog","doc":"Returns the current log and then resets its messages while adjusting `MessageLog.hadErrors`. Used\nfor incremental reporting during elaboration of a single command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getAndEmptyMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getAndEmptyMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L337-L338","name":"Lean.Core.getMessageLog","line":337,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.getMessageLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L334-L335","name":"Lean.Core.resetMessageLog","line":334,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.resetMessageLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.resetMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">resetMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L331-L332","name":"Lean.Core.setMessageLog","line":331,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.setMessageLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.setMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">setMessageLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(messages : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L328-L329","name":"Lean.Core.withCurrHeartbeats","line":328,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.withCurrHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withCurrHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withCurrHeartbeats</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L319-L322","name":"Lean.Core.checkSystem","line":319,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.checkSystem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkSystem\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkSystem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(moduleName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L316-L317","name":"Lean.Core.checkMaxHeartbeats","line":316,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkMaxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(moduleName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L310-L314","name":"Lean.Core.checkMaxHeartbeatsCore","line":310,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeatsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeatsCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkMaxHeartbeatsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(moduleName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optionName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(max : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L302-L308","name":"Lean.Core.throwMaxHeartbeat","line":302,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.throwMaxHeartbeat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.throwMaxHeartbeat\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">throwMaxHeartbeat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(moduleName optionName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(max : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L296-L300","name":"Lean.Core.debug.moduleNameAtTimeout","line":296,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.Core.debug.moduleNameAtTimeout","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.debug.moduleNameAtTimeout\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">debug</span>.<span class=\"name\">moduleNameAtTimeout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L285-L294","name":"Lean.Core.checkInterrupted","line":285,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.checkInterrupted","doc":"Throws an internal interrupt exception if cancellation has been requested. The exception is not\ncaught by `try catch` but is intended to be caught by `Command.withLoggingExceptions` at the top\nlevel of elaboration. In particular, we want to skip producing further incremental snapshots after\nthe exception has been thrown.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkInterrupted\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkInterrupted</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L283-L283","name":"Lean.Core.interruptExceptionId","line":283,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.Core.interruptExceptionId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.interruptExceptionId\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">interruptExceptionId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">Lean.InternalExceptionId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L280-L281","name":"Lean.Core.withIncRecDepth","line":280,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.withIncRecDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withIncRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withIncRecDepth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L273-L277","name":"Lean.Core.CoreM.toIO","line":273,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.CoreM.toIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM.toIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span>.<span class=\"name\">toIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L270-L271","name":"Lean.Core.CoreM.run'","line":270,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.CoreM.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L267-L268","name":"Lean.Core.CoreM.run","line":267,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.CoreM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L264-L265","name":"Lean.Core.mkFreshUserName","line":264,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.mkFreshUserName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.mkFreshUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">mkFreshUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L256-L258","name":"Lean.Core.SavedState.restore","line":256,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.restore","doc":"Restore backtrackable parts of the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.restore\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">restore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L229-L254","name":"Lean.Core.withRestoreOrSaveFull","line":229,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.withRestoreOrSaveFull","doc":"Incremental reuse primitive: if `reusableResult?` is `none`, runs `act` and returns its result\ntogether with the saved monadic state after `act` including the heartbeats used by it. If\n`reusableResult?` on the other hand is `some (a, state)`, restores full `state` including heartbeats\nused and returns `(a, state)`.\n\nThe intention is for steps that support incremental reuse to initially pass `none` as\n`reusableResult?` and store the result and state in a snapshot. In a further run, if reuse is\npossible, `reusableResult?` should be set to the previous result and state, ensuring that the state\nafter running `withRestoreOrSaveFull` is identical in both runs. Note however that necessarily this\nis only an approximation in the case of heartbeats as heartbeats used by `withRestoreOrSaveFull`\nitself after calling `act` as well as by reuse-handling code such as the one supplying\n`reusableResult?` are not accounted for.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withRestoreOrSaveFull\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withRestoreOrSaveFull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(reusableResult? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L225-L227","name":"Lean.Core.saveState","line":225,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.saveState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.saveState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">saveState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L223-L223","name":"Lean.Core.instNonemptySavedState","line":223,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instNonemptySavedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instNonemptySavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instNonemptySavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L222-L222","name":"Lean.Core.SavedState.passedHeartbeats","line":222,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.passedHeartbeats","doc":"Number of heartbeats passed inside `withRestoreOrSaveFull`, not used otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.passedHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">passedHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L220-L220","name":"Lean.Core.SavedState.mk","line":220,"kind":"ctor","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toState : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(passedHeartbeats : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">Lean.Core.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L220-L223","name":"Lean.Core.SavedState","line":220,"kind":"structure","docLink":"./Lean/CoreM.html#Lean.Core.SavedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L216-L218","name":"Lean.Core.instMonadTraceCoreM","line":216,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadTraceCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadTraceCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadTraceCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">Lean.MonadTrace</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L213-L214","name":"Lean.Core.instMonadLiftIOCoreM","line":213,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadLiftIOCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadLiftIOCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadLiftIOCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L209-L211","name":"Lean.Core.liftIOCore","line":209,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.liftIOCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.liftIOCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">liftIOCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L199-L207","name":"Lean.Core.instantiateValueLevelParams","line":199,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.instantiateValueLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instantiateValueLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instantiateValueLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L191-L197","name":"Lean.Core.instantiateTypeLevelParams","line":191,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.instantiateTypeLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instantiateTypeLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instantiateTypeLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L188-L189","name":"Lean.Core.modifyInstLevelValueCache","line":188,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.modifyInstLevelValueCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.modifyInstLevelValueCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">modifyInstLevelValueCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a> → <a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L185-L186","name":"Lean.Core.modifyInstLevelTypeCache","line":185,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.modifyInstLevelTypeCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.modifyInstLevelTypeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">modifyInstLevelTypeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a> → <a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L182-L183","name":"Lean.Core.modifyCache","line":182,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.modifyCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.modifyCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">modifyCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a> → <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L178-L180","name":"Lean.Core.instMonadInfoTreeCoreM","line":178,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadInfoTreeCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadInfoTreeCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadInfoTreeCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L173-L176","name":"Lean.Core.instMonadQuotationCoreM","line":173,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadQuotationCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadQuotationCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadQuotationCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L169-L171","name":"Lean.Core.withFreshMacroScope","line":169,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.withFreshMacroScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withFreshMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withFreshMacroScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L165-L167","name":"Lean.Core.instMonadResolveNameCoreM","line":165,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadResolveNameCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadResolveNameCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadResolveNameCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">Lean.MonadResolveName</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L160-L163","name":"Lean.Core.instMonadRecDepthCoreM","line":160,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadRecDepthCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadRecDepthCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadRecDepthCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadRecDepth\">Lean.MonadRecDepth</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L156-L158","name":"Lean.Core.instMonadNameGeneratorCoreM","line":156,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadNameGeneratorCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadNameGeneratorCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadNameGeneratorCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L153-L154","name":"Lean.Core.instAddMessageContextCoreM","line":153,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instAddMessageContextCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instAddMessageContextCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instAddMessageContextCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L135-L147","name":"Lean.Core.instMonadWithOptionsCoreM","line":135,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadWithOptionsCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadWithOptionsCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadWithOptionsCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadWithOptions\">Lean.MonadWithOptions</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L132-L133","name":"Lean.Core.instMonadOptionsCoreM","line":132,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadOptionsCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadOptionsCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadOptionsCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L128-L130","name":"Lean.Core.instMonadEnvCoreM","line":128,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadEnvCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadEnvCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadEnvCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L124-L126","name":"Lean.Core.instMonadRefCoreM","line":124,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadRefCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadRefCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadRefCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L121-L122","name":"Lean.Core.instInhabitedCoreM","line":121,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instInhabitedCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instInhabitedCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instInhabitedCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L118-L119","name":"Lean.Core.instMonadCoreM","line":118,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instMonadCoreM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L106-L114","name":"Lean.Core.CoreM","line":106,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.CoreM","doc":"CoreM is a monad for manipulating the Lean environment.\nIt is the base monad for `MetaM`.\nThe main features it provides are:\n- name generator state\n- environment state\n- Lean options context\n- the current open namespace\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L104-L104","name":"Lean.Core.instNonemptyContext","line":104,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instNonemptyContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instNonemptyContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instNonemptyContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L103-L103","name":"Lean.Core.Context.suppressElabErrors","line":103,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.suppressElabErrors","doc":"If set (when `showPartialSyntaxErrors` is not set and parsing failed), suppresses most elaboration\nerrors; see also `logMessage` below.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.suppressElabErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">suppressElabErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L98-L98","name":"Lean.Core.Context.cancelTk?","line":98,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.cancelTk?","doc":"If set, used to cancel elaboration from outside when results are not needed anymore. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.cancelTk?\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">cancelTk?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L96-L96","name":"Lean.Core.Context.diag","line":96,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.diag","doc":"If `diag := true`, different parts of the system collect diagnostics.\nUse the `set_option diag true` to set it to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.diag\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">diag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L91-L91","name":"Lean.Core.Context.currMacroScope","line":91,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.currMacroScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.currMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">currMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.MacroScope\">Lean.MacroScope</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L90-L90","name":"Lean.Core.Context.maxHeartbeats","line":90,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.maxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L89-L89","name":"Lean.Core.Context.initHeartbeats","line":89,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.initHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.initHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">initHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L88-L88","name":"Lean.Core.Context.openDecls","line":88,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.openDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">Lean.OpenDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L87-L87","name":"Lean.Core.Context.currNamespace","line":87,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.currNamespace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L86-L86","name":"Lean.Core.Context.ref","line":86,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L85-L85","name":"Lean.Core.Context.maxRecDepth","line":85,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.maxRecDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.maxRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxRecDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L84-L84","name":"Lean.Core.Context.currRecDepth","line":84,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.currRecDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.currRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">currRecDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L83-L83","name":"Lean.Core.Context.options","line":83,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.options","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.options\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L82-L82","name":"Lean.Core.Context.fileMap","line":82,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.fileMap","doc":"Auxiliary datastructure for converting `String.Pos` into Line/Column number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.fileMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">fileMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.FileMap\">Lean.FileMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L80-L80","name":"Lean.Core.Context.fileName","line":80,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Context.fileName","doc":"Name of the file being compiled. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.fileName\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L78-L78","name":"Lean.Core.Context.mk","line":78,"kind":"ctor","docLink":"./Lean/CoreM.html#Lean.Core.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fileName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fileMap : <a href=\"./Lean/Data/Position.html#Lean.FileMap\">Lean.FileMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(options : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(currRecDepth maxRecDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(currNamespace : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(openDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">Lean.OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(initHeartbeats maxHeartbeats : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(currMacroScope : <a href=\"./Init/Prelude.html#Lean.MacroScope\">Lean.MacroScope</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(diag : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cancelTk? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suppressElabErrors : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L77-L104","name":"Lean.Core.Context","line":77,"kind":"structure","docLink":"./Lean/CoreM.html#Lean.Core.Context","doc":"Context for the CoreM monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L75-L75","name":"Lean.Core.instNonemptyState","line":75,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instNonemptyState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instNonemptyState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L74-L74","name":"Lean.Core.State.infoState","line":74,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.infoState","doc":"Info tree. We have the info tree here because we want to update it while adding attributes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.infoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">infoState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">Lean.Elab.InfoState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L72-L72","name":"Lean.Core.State.messages","line":72,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.messages","doc":"Message log. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.messages\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">messages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L70-L70","name":"Lean.Core.State.cache","line":70,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.cache","doc":"Cache for instantiating universe polymorphic declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L68-L68","name":"Lean.Core.State.traceState","line":68,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.traceState","doc":"Trace messages "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.traceState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">traceState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceState\">Lean.TraceState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L66-L66","name":"Lean.Core.State.ngen","line":66,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.ngen","doc":"Name generator for producing unique `FVarId`s, `MVarId`s, and `LMVarId`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L64-L64","name":"Lean.Core.State.nextMacroScope","line":64,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.nextMacroScope","doc":"Next macro scope. We use macro scopes to avoid accidental name capture. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.nextMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">nextMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.MacroScope\">Lean.MacroScope</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L62-L62","name":"Lean.Core.State.env","line":62,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.State.env","doc":"Current environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.env\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L60-L60","name":"Lean.Core.State.mk","line":60,"kind":"ctor","docLink":"./Lean/CoreM.html#Lean.Core.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nextMacroScope : <a href=\"./Init/Prelude.html#Lean.MacroScope\">Lean.MacroScope</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ngen : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceState : <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">Lean.TraceState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cache : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(messages : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(infoState : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">Lean.Elab.InfoState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L59-L75","name":"Lean.Core.State","line":59,"kind":"structure","docLink":"./Lean/CoreM.html#Lean.Core.State","doc":"State for the CoreM monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L57-L57","name":"Lean.Core.instInhabitedCache","line":57,"kind":"instance","docLink":"./Lean/CoreM.html#Lean.Core.instInhabitedCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instInhabitedCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instInhabitedCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L56-L56","name":"Lean.Core.Cache.instLevelValue","line":56,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Cache.instLevelValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache.instLevelValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span>.<span class=\"name\">instLevelValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L55-L55","name":"Lean.Core.Cache.instLevelType","line":55,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.Cache.instLevelType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache.instLevelType\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span>.<span class=\"name\">instLevelType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L54-L54","name":"Lean.Core.Cache.mk","line":54,"kind":"ctor","docLink":"./Lean/CoreM.html#Lean.Core.Cache.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(instLevelType instLevelValue : <a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">Lean.Core.InstantiateLevelCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L53-L57","name":"Lean.Core.Cache","line":53,"kind":"structure","docLink":"./Lean/CoreM.html#Lean.Core.Cache","doc":"Cache for the `CoreM` monad "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L51-L51","name":"Lean.Core.InstantiateLevelCache","line":51,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">InstantiateLevelCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L48-L49","name":"Lean.Core.getMaxHeartbeats","line":48,"kind":"def","docLink":"./Lean/CoreM.html#Lean.Core.getMaxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getMaxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L33-L42","name":"Lean.useDiagnosticMsg","line":33,"kind":"def","docLink":"./Lean/CoreM.html#Lean.useDiagnosticMsg","doc":"If the `diagnostics` option is not already set, gives a message explaining this option.\nBegins with a `\\n`, so an error message can look like `m!\"some error occurred{useDiagnosticMsg}\"`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.useDiagnosticMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">useDiagnosticMsg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L28-L31","name":"Lean.maxHeartbeats","line":28,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.maxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L22-L26","name":"Lean.diagnostics.threshold","line":22,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.diagnostics.threshold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.diagnostics.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">diagnostics</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/CoreM.lean#L16-L20","name":"Lean.diagnostics","line":16,"kind":"opaque","docLink":"./Lean/CoreM.html#Lean.diagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">diagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}