{"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Expr","instances":[],"imports":["Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Basic","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Const","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Var","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Not","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.ShiftLeft","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.ShiftRight","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Add","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.ZeroExtend","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Append","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Replicate","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Extract","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.RotateLeft","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.RotateRight","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.SignExtend","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Mul","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Udiv","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Umod","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.lean#L241-L250","name":"Std.Tactic.BVDecide.BVExpr.denote_bitblast","line":241,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.denote_bitblast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.denote_bitblast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">denote_bitblast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">Std.Tactic.BVDecide.BVBit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Std.Tactic.BVDecide.BVExpr.Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">assign</span>.toAIGAssignment</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast\">Std.Tactic.BVDecide.BVExpr.bitblast</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast\">Std.Tactic.BVDecide.BVExpr.bitblast</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">Std.Tactic.BVDecide.BVExpr.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">expr</span>)</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.lean#L59-L237","name":"Std.Tactic.BVDecide.BVExpr.bitblast.go_denote_eq","line":59,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go_denote_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go_denote_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">go_denote_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">Std.Tactic.BVDecide.BVBit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Std.Tactic.BVDecide.BVExpr.Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">assign</span>.toAIGAssignment</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go\">Std.Tactic.BVDecide.BVExpr.bitblast.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span>)</span>.val</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go\">Std.Tactic.BVDecide.BVExpr.bitblast.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span>)</span>.val</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.eval\">Std.Tactic.BVDecide.BVExpr.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">expr</span>)</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.lean#L43-L57","name":"Std.Tactic.BVDecide.BVExpr.bitblast.go_denote_mem_prefix","line":43,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go_denote_mem_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go_denote_mem_prefix\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">go_denote_mem_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">Std.Tactic.BVDecide.BVBit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.Assignment\">Std.Tactic.BVDecide.BVExpr.Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstart : <span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">assign</span>.toAIGAssignment</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go\">Std.Tactic.BVDecide.BVExpr.bitblast.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span>)</span>.val</span>.aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">assign</span>.toAIGAssignment</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">hstart</span> }</span> }</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.lean#L39-L41","name":"Std.Tactic.BVDecide.BVExpr.bitblast.go_val_eq_bitblast","line":39,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go_val_eq_bitblast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go_val_eq_bitblast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">go_val_eq_bitblast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">Std.Tactic.BVDecide.BVBit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast.go\">Std.Tactic.BVDecide.BVExpr.bitblast.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Expr.html#Std.Tactic.BVDecide.BVExpr.bitblast\">Std.Tactic.BVDecide.BVExpr.bitblast</a> <span class=\"fn\">aig</span> <span class=\"fn\">expr</span></span></span></div></div>"}]}