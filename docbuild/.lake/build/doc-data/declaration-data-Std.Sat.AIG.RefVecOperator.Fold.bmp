{"name":"Std.Sat.AIG.RefVecOperator.Fold","instances":[{"typeNames":["Std.Sat.AIG.RefVec.FoldTarget","Std.Sat.AIG.RefVec.fold"],"name":"Std.Sat.AIG.RefVec.instLawfulOperatorFoldTargetFold","className":"Std.Sat.AIG.LawfulOperator"}],"imports":["Std.Sat.AIG.RefVec","Std.Sat.AIG.LawfulVecOperator"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L169-L190","name":"Std.Sat.AIG.RefVec.denote_fold_and","line":169,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.denote_fold_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.denote_fold_and\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">denote_fold_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold\">Std.Sat.AIG.RefVec.fold</a> <span class=\"fn\">aig</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.mkAnd\">Std.Sat.AIG.RefVec.FoldTarget.mkAnd</a> <span class=\"fn\">s</span>)</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">len</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L116-L165","name":"Std.Sat.AIG.RefVec.fold.denote_go_and","line":116,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.denote_go_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.denote_go_and\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold</span>.<span class=\"name\">denote_go_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n      <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go\">Std.Sat.AIG.RefVec.fold.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">acc</span> <span class=\"fn\">curr</span> <span class=\"fn\">len</span> <span class=\"fn\">input</span> <span class=\"fn\">Std.Sat.AIG.mkAndCached</span>)</span>.aig</span>,\n        <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go\">Std.Sat.AIG.RefVec.fold.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">acc</span> <span class=\"fn\">curr</span> <span class=\"fn\">len</span> <span class=\"fn\">input</span> <span class=\"fn\">Std.Sat.AIG.mkAndCached</span>)</span>.ref</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">acc</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx1</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">len</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">idx</span></span> → <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx1</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L110-L112","name":"Std.Sat.AIG.RefVec.instLawfulOperatorFoldTargetFold","line":110,"kind":"instance","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.instLawfulOperatorFoldTargetFold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.instLawfulOperatorFoldTargetFold\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">instLawfulOperatorFoldTargetFold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.RefVec.FoldTarget</span> <span class=\"fn\">Std.Sat.AIG.RefVec.fold</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L97-L108","name":"Std.Sat.AIG.RefVec.fold_decl_eq","line":97,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold_decl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold\">Std.Sat.AIG.RefVec.fold</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold\">Std.Sat.AIG.RefVec.fold</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L78-L95","name":"Std.Sat.AIG.RefVec.fold.go_decl_eq","line":78,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go_decl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold</span>.<span class=\"name\">go_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.BinaryInput</span> → <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.BinaryInput</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go\">Std.Sat.AIG.RefVec.fold.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">acc</span> <span class=\"fn\">i</span> <span class=\"fn\">len</span> <span class=\"fn\">s</span> <span class=\"fn\">f</span>)</span>.aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go\">Std.Sat.AIG.RefVec.fold.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">acc</span> <span class=\"fn\">i</span> <span class=\"fn\">len</span> <span class=\"fn\">s</span> <span class=\"fn\">f</span>)</span>.aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L71-L76","name":"Std.Sat.AIG.RefVec.fold_le_size","line":71,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold_le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold\">Std.Sat.AIG.RefVec.fold</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.aig</span>.decls</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L59-L69","name":"Std.Sat.AIG.RefVec.fold.go_le_size","line":59,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go_le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold</span>.<span class=\"name\">go_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.BinaryInput</span> → <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.BinaryInput</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go\">Std.Sat.AIG.RefVec.fold.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">acc</span> <span class=\"fn\">idx</span> <span class=\"fn\">len</span> <span class=\"fn\">s</span> <span class=\"fn\">f</span>)</span>.aig</span>.decls</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L43-L56","name":"Std.Sat.AIG.RefVec.fold.go","line":43,"kind":"def","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold.go\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.BinaryInput</span> → <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.BinaryInput</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L31-L57","name":"Std.Sat.AIG.RefVec.fold","line":31,"kind":"def","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.fold\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L26-L29","name":"Std.Sat.AIG.RefVec.FoldTarget.mkAnd","line":26,"kind":"def","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.mkAnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.mkAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span>.<span class=\"name\">mkAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(vec : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L22-L22","name":"Std.Sat.AIG.RefVec.FoldTarget.lawful","line":22,"kind":"theorem","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.lawful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.lawful\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span>.<span class=\"name\">lawful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.BinaryInput</span> <span class=\"fn\"><span class=\"fn\">self</span>.func</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L21-L21","name":"Std.Sat.AIG.RefVec.FoldTarget.func","line":21,"kind":"def","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.func","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.func\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span>.<span class=\"name\">func</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aig✝ : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig✝</span>.BinaryInput</span> → <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L20-L20","name":"Std.Sat.AIG.RefVec.FoldTarget.vec","line":20,"kind":"def","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.vec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.vec\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span>.<span class=\"name\">vec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\"><span class=\"fn\">self</span>.len</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L19-L19","name":"Std.Sat.AIG.RefVec.FoldTarget.len","line":19,"kind":"def","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.len\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span>.<span class=\"name\">len</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L18-L18","name":"Std.Sat.AIG.RefVec.FoldTarget.mk","line":18,"kind":"ctor","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(vec : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">len</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(func : <span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.BinaryInput</span> → <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Std.Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[lawful : <span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.BinaryInput</span> <span class=\"fn\">func</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\">Std.Sat.AIG.RefVec.FoldTarget</a> <span class=\"fn\">aig</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/RefVecOperator/Fold.lean#L18-L22","name":"Std.Sat.AIG.RefVec.FoldTarget","line":18,"kind":"structure","docLink":"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/RefVecOperator/Fold.html#Std.Sat.AIG.RefVec.FoldTarget\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">RefVec</span>.<span class=\"name\">FoldTarget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}