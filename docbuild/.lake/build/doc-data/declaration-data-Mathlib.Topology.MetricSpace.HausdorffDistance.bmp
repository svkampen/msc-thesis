{"name":"Mathlib.Topology.MetricSpace.HausdorffDistance","instances":[],"imports":["Init","Mathlib.Analysis.SpecificLimits.Basic","Mathlib.Topology.MetricSpace.IsometricSMul"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L779-L783","name":"IsClosed.hausdorffDist_zero_iff_eq","line":779,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.hausdorffDist_zero_iff_eq","doc":"Two closed sets are at zero Hausdorff distance if and only if they coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.hausdorffDist_zero_iff_eq\"><span class=\"name\">IsClosed</span>.<span class=\"name\">hausdorffDist_zero_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L773-L777","name":"Metric.hausdorffDist_zero_iff_closure_eq_closure","line":773,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_zero_iff_closure_eq_closure","doc":"Two sets are at zero Hausdorff distance if and only if they have the same closures. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_zero_iff_closure_eq_closure\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_zero_iff_closure_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L769-L771","name":"Metric.hausdorffDist_closure","line":769,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_closure","doc":"The Hausdorff distances between two sets and their closures coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_closure\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L764-L767","name":"Metric.hausdorffDist_closure₂","line":764,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_closure₂","doc":"Replacing a set by its closure does not change the Hausdorff distance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_closure₂\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_closure₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L759-L762","name":"Metric.hausdorffDist_closure₁","line":759,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_closure₁","doc":"Replacing a set by its closure does not change the Hausdorff distance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_closure₁\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_closure₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L755-L757","name":"Metric.hausdorffDist_self_closure","line":755,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_self_closure","doc":"The Hausdorff distance between a set and its closure vanishes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_self_closure\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_self_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L747-L753","name":"Metric.hausdorffDist_triangle'","line":747,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_triangle'","doc":"The Hausdorff distance satisfies the triangle inequality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_triangle'\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_triangle'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t u : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L740-L745","name":"Metric.hausdorffDist_triangle","line":740,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_triangle","doc":"The Hausdorff distance satisfies the triangle inequality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_triangle\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_triangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t u : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L735-L738","name":"Metric.hausdorffDist_image","line":735,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_image","doc":"The Hausdorff distance is invariant under isometries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_image\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">(<span class=\"fn\">Φ</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<span class=\"fn\">Φ</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L726-L733","name":"Metric.infDist_le_infDist_add_hausdorffDist","line":726,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_infDist_add_hausdorffDist","doc":"The infimum distance to `s` and `t` are the same, up to the Hausdorff distance\nbetween `s` and `t` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_infDist_add_hausdorffDist\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_le_infDist_add_hausdorffDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L718-L724","name":"Metric.exists_dist_lt_of_hausdorffDist_lt'","line":718,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.exists_dist_lt_of_hausdorffDist_lt'","doc":"If the Hausdorff distance is `< r`, any point in one of the sets is at distance\n`< r` of a point in the other set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.exists_dist_lt_of_hausdorffDist_lt'\"><span class=\"name\">Metric</span>.<span class=\"name\">exists_dist_lt_of_hausdorffDist_lt'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L706-L716","name":"Metric.exists_dist_lt_of_hausdorffDist_lt","line":706,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.exists_dist_lt_of_hausdorffDist_lt","doc":"If the Hausdorff distance is `< r`, any point in one of the sets is at distance\n`< r` of a point in the other set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.exists_dist_lt_of_hausdorffDist_lt\"><span class=\"name\">Metric</span>.<span class=\"name\">exists_dist_lt_of_hausdorffDist_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L701-L704","name":"Metric.infDist_le_hausdorffDist_of_mem","line":701,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_hausdorffDist_of_mem","doc":"The distance to a set is controlled by the Hausdorff distance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_hausdorffDist_of_mem\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_le_hausdorffDist_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L690-L699","name":"Metric.hausdorffDist_le_diam","line":690,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_le_diam","doc":"The Hausdorff distance is controlled by the diameter of the union. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_le_diam\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_le_diam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology.IsBounded\">Bornology.IsBounded</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><span class=\"fn\">t</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bt : <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology.IsBounded\">Bornology.IsBounded</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Bounded.html#Metric.diam\">Metric.diam</a> <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L678-L688","name":"Metric.hausdorffDist_le_of_mem_dist","line":678,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_le_of_mem_dist","doc":"Bounding the Hausdorff distance by exhibiting, for any point in each set,\nanother point in the other set at controlled distance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_le_of_mem_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_le_of_mem_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L664-L676","name":"Metric.hausdorffDist_le_of_infDist","line":664,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_le_of_infDist","doc":"Bounding the Hausdorff distance by bounding the distance of any point\nin each set to the other set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_le_of_infDist\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_le_of_infDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L659-L662","name":"Metric.hausdorffDist_empty'","line":659,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_empty'","doc":"The Hausdorff distance to the empty set vanishes (if you want to have the more reasonable\nvalue `∞` instead, use `EMetric.hausdorffEdist`, which takes values in `ℝ≥0∞`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_empty'\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_empty'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L651-L657","name":"Metric.hausdorffDist_empty","line":651,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_empty","doc":"The Hausdorff distance to the empty set vanishes (if you want to have the more reasonable\nvalue `∞` instead, use `EMetric.hausdorffEdist`, which takes values in `ℝ≥0∞`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_empty\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L647-L649","name":"Metric.hausdorffDist_comm","line":647,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_comm","doc":"The Hausdorff distances from `s` to `t` and from `t` to `s` coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_comm\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">t</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L643-L645","name":"Metric.hausdorffDist_self_zero","line":643,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_self_zero","doc":"The Hausdorff distance between a set and itself is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_self_zero\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_self_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L621-L641","name":"Metric.hausdorffEdist_ne_top_of_nonempty_of_bounded","line":621,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffEdist_ne_top_of_nonempty_of_bounded","doc":"If two sets are nonempty and bounded in a metric space, they are at finite Hausdorff\nedistance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffEdist_ne_top_of_nonempty_of_bounded\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffEdist_ne_top_of_nonempty_of_bounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><span class=\"fn\">t</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology.IsBounded\">Bornology.IsBounded</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bt : <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology.IsBounded\">Bornology.IsBounded</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L618-L619","name":"Metric.hausdorffDist_nonneg","line":618,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_nonneg","doc":"The Hausdorff distance is nonnegative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist_nonneg\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L612-L616","name":"Metric.hausdorffDist","line":612,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist","doc":"The Hausdorff distance between two sets is the smallest nonnegative `r` such that each set is\nincluded in the `r`-neighborhood of the other. If there is no such `r`, it is defined to\nbe `0`, arbitrarily. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\"><span class=\"name\">Metric</span>.<span class=\"name\">hausdorffDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L606-L608","name":"Metric.continuous_infNndist_pt","line":606,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.continuous_infNndist_pt","doc":"The minimal distance to a set (as `ℝ≥0`) is continuous in point "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.continuous_infNndist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">continuous_infNndist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infNndist\">Metric.infNndist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L602-L604","name":"Metric.uniformContinuous_infNndist_pt","line":602,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.uniformContinuous_infNndist_pt","doc":"The minimal distance to a set (as `ℝ≥0`) is uniformly continuous in point "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.uniformContinuous_infNndist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">uniformContinuous_infNndist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infNndist\">Metric.infNndist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L598-L600","name":"Metric.lipschitz_infNndist_pt","line":598,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.lipschitz_infNndist_pt","doc":"The minimal distance to a set (as `ℝ≥0`) is Lipschitz in point with constant 1 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.lipschitz_infNndist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">lipschitz_infNndist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infNndist\">Metric.infNndist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L594-L596","name":"Metric.coe_infNndist","line":594,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.coe_infNndist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.coe_infNndist\"><span class=\"name\">Metric</span>.<span class=\"name\">coe_infNndist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infNndist\">Metric.infNndist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L590-L592","name":"Metric.infNndist","line":590,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infNndist","doc":"The minimal distance of a point to a set as a `ℝ≥0` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infNndist\"><span class=\"name\">Metric</span>.<span class=\"name\">infNndist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L584-L586","name":"Metric.exists_mem_closure_infDist_eq_dist","line":584,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.exists_mem_closure_infDist_eq_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.exists_mem_closure_infDist_eq_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">exists_mem_closure_infDist_eq_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/ProperSpace.html#ProperSpace\">ProperSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hne : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L574-L582","name":"IsClosed.exists_infDist_eq_dist","line":574,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.exists_infDist_eq_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.exists_infDist_eq_dist\"><span class=\"name\">IsClosed</span>.<span class=\"name\">exists_infDist_eq_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/ProperSpace.html#ProperSpace\">ProperSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hne : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L569-L572","name":"IsCompact.exists_infDist_eq_dist","line":569,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsCompact.exists_infDist_eq_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsCompact.exists_infDist_eq_dist\"><span class=\"name\">IsCompact</span>.<span class=\"name\">exists_infDist_eq_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hne : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L558-L567","name":"Metric.infDist_inter_closedBall_of_mem","line":558,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_inter_closedBall_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_inter_closedBall_of_mem\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_inter_closedBall_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L554-L556","name":"Metric.infDist_image","line":554,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_image","doc":"The infimum distance is invariant under isometries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_image\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hΦ : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">(<span class=\"fn\">Φ</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">Φ</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L547-L552","name":"Metric.continuousAt_inv_infDist_pt","line":547,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.continuousAt_inv_infDist_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.continuousAt_inv_infDist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">continuousAt_inv_infDist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L542-L545","name":"IsClosed.not_mem_iff_infDist_pos","line":542,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.not_mem_iff_infDist_pos","doc":"Given a closed set `s`, a point belongs to `s` iff its infimum distance to this set vanishes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.not_mem_iff_infDist_pos\"><span class=\"name\">IsClosed</span>.<span class=\"name\">not_mem_iff_infDist_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L538-L540","name":"IsClosed.mem_iff_infDist_zero","line":538,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.mem_iff_infDist_zero","doc":"Given a closed set `s`, a point belongs to `s` iff its infimum distance to this set vanishes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsClosed.mem_iff_infDist_zero\"><span class=\"name\">IsClosed</span>.<span class=\"name\">mem_iff_infDist_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L534-L536","name":"Metric.mem_closure_iff_infDist_zero","line":534,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.mem_closure_iff_infDist_zero","doc":"A point belongs to the closure of `s` iff its infimum distance to this set vanishes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.mem_closure_iff_infDist_zero\"><span class=\"name\">Metric</span>.<span class=\"name\">mem_closure_iff_infDist_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L528-L532","name":"Metric.infDist_zero_of_mem_closure","line":528,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_zero_of_mem_closure","doc":"If a point belongs to the closure of `s`, then its infimum distance to `s` equals zero.\nThe converse is true provided that `s` is nonempty, see `Metric.mem_closure_iff_infDist_zero`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_zero_of_mem_closure\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_zero_of_mem_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L524-L526","name":"Metric.infDist_closure","line":524,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_closure","doc":"The minimal distances to a set and its closure coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_closure\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L517-L520","name":"Metric.continuous_infDist_pt","line":517,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.continuous_infDist_pt","doc":"The minimal distance to a set is continuous in point "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.continuous_infDist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">continuous_infDist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L513-L515","name":"Metric.uniformContinuous_infDist_pt","line":513,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.uniformContinuous_infDist_pt","doc":"The minimal distance to a set is uniformly continuous in point "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.uniformContinuous_infDist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">uniformContinuous_infDist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L509-L511","name":"Metric.lipschitz_infDist_pt","line":509,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.lipschitz_infDist_pt","doc":"The minimal distance to a set is Lipschitz in point with constant 1 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.lipschitz_infDist_pt\"><span class=\"name\">Metric</span>.<span class=\"name\">lipschitz_infDist_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L502-L505","name":"Metric.dist_le_infDist_add_diam","line":502,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.dist_le_infDist_add_diam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.dist_le_infDist_add_diam\"><span class=\"name\">Metric</span>.<span class=\"name\">dist_le_infDist_add_diam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology.IsBounded\">Bornology.IsBounded</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Bounded.html#Metric.diam\">Metric.diam</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L498-L500","name":"Metric.disjoint_closedBall_of_lt_infDist","line":498,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.disjoint_closedBall_of_lt_infDist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.disjoint_closedBall_of_lt_infDist\"><span class=\"name\">Metric</span>.<span class=\"name\">disjoint_closedBall_of_lt_infDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L495-L496","name":"Metric.ball_infDist_compl_subset","line":495,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.ball_infDist_compl_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.ball_infDist_compl_subset\"><span class=\"name\">Metric</span>.<span class=\"name\">ball_infDist_compl_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>)</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L492-L493","name":"Metric.ball_infDist_subset_compl","line":492,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.ball_infDist_subset_compl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.ball_infDist_subset_compl\"><span class=\"name\">Metric</span>.<span class=\"name\">ball_infDist_subset_compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L489-L490","name":"Metric.disjoint_ball_infDist","line":489,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.disjoint_ball_infDist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.disjoint_ball_infDist\"><span class=\"name\">Metric</span>.<span class=\"name\">disjoint_ball_infDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L486-L487","name":"Metric.not_mem_of_dist_lt_infDist","line":486,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.not_mem_of_dist_lt_infDist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.not_mem_of_dist_lt_infDist\"><span class=\"name\">Metric</span>.<span class=\"name\">not_mem_of_dist_lt_infDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L479-L484","name":"Metric.infDist_le_infDist_add_dist","line":479,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_infDist_add_dist","doc":"The minimal distance from `x` to `s` is bounded by the distance from `y` to `s`, modulo\nthe distance between `x` and `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_infDist_add_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_le_infDist_add_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L474-L477","name":"Metric.infDist_lt_iff","line":474,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_lt_iff","doc":"The minimal distance to a set `s` is `< r` iff there exists a point in `s` at distance `< r`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_lt_iff\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L470-L472","name":"Metric.infDist_le_infDist_of_subset","line":470,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_infDist_of_subset","doc":"The minimal distance is monotone with respect to inclusion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_infDist_of_subset\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_le_infDist_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L465-L468","name":"Metric.infDist_le_dist_of_mem","line":465,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_dist_of_mem","doc":"The minimal distance to a set is bounded by the distance to any point in this set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_le_dist_of_mem\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_le_dist_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L461-L463","name":"Metric.infDist_singleton","line":461,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_singleton","doc":"The minimal distance to a singleton is the distance to the unique point in this singleton. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_singleton\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L457-L459","name":"Metric.infDist_zero_of_mem","line":457,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_zero_of_mem","doc":"The minimal distance of a point to a set containing it vanishes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_zero_of_mem\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_zero_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L453-L455","name":"Metric.infEdist_eq_top_iff","line":453,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infEdist_eq_top_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infEdist_eq_top_iff\"><span class=\"name\">Metric</span>.<span class=\"name\">infEdist_eq_top_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L448-L451","name":"Metric.infEdist_ne_top","line":448,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infEdist_ne_top","doc":"In a metric space, the minimal edistance to a nonempty set is finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infEdist_ne_top\"><span class=\"name\">Metric</span>.<span class=\"name\">infEdist_ne_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L443-L446","name":"Metric.infDist_empty","line":443,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_empty","doc":"The minimal distance to the empty set is 0 (if you want to have the more reasonable\nvalue `∞` instead, use `EMetric.infEdist`, which takes values in `ℝ≥0∞`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_empty\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L440-L441","name":"Metric.infDist_nonneg","line":440,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_nonneg","doc":"The minimal distance is always nonnegative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_nonneg\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L435-L438","name":"Metric.infDist_eq_iInf","line":435,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_eq_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist_eq_iInf\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist_eq_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\">Metric.infDist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">s</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L431-L433","name":"Metric.infDist","line":431,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist","doc":"The minimal distance of a point to a set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.infDist\"><span class=\"name\">Metric</span>.<span class=\"name\">infDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L400-L407","name":"EMetric.empty_or_nonempty_of_hausdorffEdist_ne_top","line":400,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.empty_or_nonempty_of_hausdorffEdist_ne_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.empty_or_nonempty_of_hausdorffEdist_ne_top\"><span class=\"name\">EMetric</span>.<span class=\"name\">empty_or_nonempty_of_hausdorffEdist_ne_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">t</span>.Nonempty</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L395-L398","name":"EMetric.nonempty_of_hausdorffEdist_ne_top","line":395,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.nonempty_of_hausdorffEdist_ne_top","doc":"If a set is at finite Hausdorff edistance of a nonempty set, it is nonempty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.nonempty_of_hausdorffEdist_ne_top\"><span class=\"name\">EMetric</span>.<span class=\"name\">nonempty_of_hausdorffEdist_ne_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L389-L393","name":"EMetric.hausdorffEdist_empty","line":389,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_empty","doc":"The Haudorff edistance to the empty set is infinite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_empty\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ne : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L384-L387","name":"EMetric.hausdorffEdist_zero_iff_eq_of_closed","line":384,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_zero_iff_eq_of_closed","doc":"Two closed sets are at zero Hausdorff edistance if and only if they coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_zero_iff_eq_of_closed\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_zero_iff_eq_of_closed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L380-L382","name":"EMetric.hausdorffEdist_closure","line":380,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_closure","doc":"The Hausdorff edistance between sets or their closures is the same. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L375-L378","name":"EMetric.hausdorffEdist_closure₂","line":375,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_closure₂","doc":"Replacing a set by its closure does not change the Hausdorff edistance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_closure₂\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_closure₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L364-L373","name":"EMetric.hausdorffEdist_closure₁","line":364,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_closure₁","doc":"Replacing a set by its closure does not change the Hausdorff edistance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_closure₁\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_closure₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L359-L362","name":"EMetric.hausdorffEdist_self_closure","line":359,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_self_closure","doc":"The Hausdorff edistance between a set and its closure vanishes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_self_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_self_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L353-L357","name":"EMetric.hausdorffEdist_zero_iff_closure_eq_closure","line":353,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_zero_iff_closure_eq_closure","doc":"Two sets are at zero Hausdorff edistance if and only if they have the same closure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_zero_iff_closure_eq_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_zero_iff_closure_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L332-L351","name":"EMetric.hausdorffEdist_triangle","line":332,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_triangle","doc":"The Hausdorff distance satisfies the triangle inequality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_triangle\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_triangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t u : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L321-L330","name":"EMetric.hausdorffEdist_le_ediam","line":321,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_le_ediam","doc":"The Hausdorff distance is controlled by the diameter of the union. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_le_ediam\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_le_ediam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><span class=\"fn\">t</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Diam.html#EMetric.diam\">EMetric.diam</a> <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L316-L319","name":"EMetric.hausdorffEdist_image","line":316,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_image","doc":"The Hausdorff edistance is invariant under isometries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_image\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">(<span class=\"fn\">Φ</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<span class=\"fn\">Φ</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L296-L314","name":"EMetric.infEdist_le_infEdist_add_hausdorffEdist","line":296,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_infEdist_add_hausdorffEdist","doc":"The distance from `x` to `s` or `t` is controlled in terms of the Hausdorff distance\nbetween `s` and `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_infEdist_add_hausdorffEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_le_infEdist_add_hausdorffEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L287-L294","name":"EMetric.exists_edist_lt_of_hausdorffEdist_lt","line":287,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.exists_edist_lt_of_hausdorffEdist_lt","doc":"If the Hausdorff distance is `< r`, then any point in one of the sets has\na corresponding point at distance `< r` in the other set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.exists_edist_lt_of_hausdorffEdist_lt\"><span class=\"name\">EMetric</span>.<span class=\"name\">exists_edist_lt_of_hausdorffEdist_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L281-L285","name":"EMetric.infEdist_le_hausdorffEdist_of_mem","line":281,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_hausdorffEdist_of_mem","doc":"The distance to a set is controlled by the Hausdorff distance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_hausdorffEdist_of_mem\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_le_hausdorffEdist_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L271-L279","name":"EMetric.hausdorffEdist_le_of_mem_edist","line":271,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_le_of_mem_edist","doc":"Bounding the Hausdorff edistance by exhibiting, for any point in each set,\nanother point in the other set at controlled distance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_le_of_mem_edist\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_le_of_mem_edist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L264-L269","name":"EMetric.hausdorffEdist_le_of_infEdist","line":264,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_le_of_infEdist","doc":"Bounding the Hausdorff edistance by bounding the edistance of any point\nin each set to the other set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_le_of_infEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_le_of_infEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L260-L262","name":"EMetric.hausdorffEdist_comm","line":260,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_comm","doc":"The Haudorff edistances of `s` to `t` and of `t` to `s` coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_comm\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">t</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L254-L258","name":"EMetric.hausdorffEdist_self","line":254,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_self","doc":"The Hausdorff edistance of a set to itself vanishes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_self\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L245-L248","name":"EMetric.hausdorffEdist_def","line":245,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist_def\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\">EMetric.hausdorffEdist</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(⨆ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⨆ <span class=\"fn\">y</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L245-L248","name":"EMetric.hausdorffEdist","line":245,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist","doc":"The Hausdorff edistance between two sets is the smallest `r` such that each set\nis contained in the `r`-neighborhood of the other one "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.hausdorffEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">hausdorffEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L230-L239","name":"EMetric.exists_pos_forall_lt_edist","line":230,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.exists_pos_forall_lt_edist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.exists_pos_forall_lt_edist\"><span class=\"name\">EMetric</span>.<span class=\"name\">exists_pos_forall_lt_edist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hst : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L224-L228","name":"IsCompact.exists_infEdist_eq_edist","line":224,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsCompact.exists_infEdist_eq_edist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsCompact.exists_infEdist_eq_edist\"><span class=\"name\">IsCompact</span>.<span class=\"name\">exists_infEdist_eq_edist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hne : <span class=\"fn\"><span class=\"fn\">s</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L200-L222","name":"IsOpen.exists_iUnion_isClosed","line":200,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsOpen.exists_iUnion_isClosed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#IsOpen.exists_iUnion_isClosed\"><span class=\"name\">IsOpen</span>.<span class=\"name\">exists_iUnion_isClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>), <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<span class=\"fn\">F</span> <span class=\"fn\">n</span>)</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">U</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">U</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">F</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L195-L195","name":"EMetric.infEdist_vadd","line":195,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_vadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_vadd\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_vadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/IsometricSMul.html#IsometricVAdd\">IsometricVAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L195-L198","name":"EMetric.infEdist_smul","line":195,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_smul\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/IsometricSMul.html#IsometricSMul\">IsometricSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L191-L193","name":"EMetric.infEdist_image","line":191,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_image","doc":"The infimum edistance is invariant under isometries "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_image\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hΦ : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">(<span class=\"fn\">Φ</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">Φ</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L181-L189","name":"EMetric.disjoint_closedBall_of_lt_infEdist","line":181,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.disjoint_closedBall_of_lt_infEdist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.disjoint_closedBall_of_lt_infEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">disjoint_closedBall_of_lt_infEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EMetric.closedBall\">EMetric.closedBall</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L175-L179","name":"EMetric.exists_real_pos_lt_infEdist_of_not_mem_closure","line":175,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.exists_real_pos_lt_infEdist_of_not_mem_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.exists_real_pos_lt_infEdist_of_not_mem_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">exists_real_pos_lt_infEdist_of_not_mem_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">E</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L171-L173","name":"EMetric.infEdist_closure_pos_iff_not_mem_closure","line":171,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_closure_pos_iff_not_mem_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_closure_pos_iff_not_mem_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_closure_pos_iff_not_mem_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">E</span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">E</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L165-L169","name":"EMetric.infEdist_pos_iff_not_mem_closure","line":165,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_pos_iff_not_mem_closure","doc":"The infimum edistance of a point to a set is positive if and only if the point is not in the\nclosure of the set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_pos_iff_not_mem_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_pos_iff_not_mem_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">E</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">E</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L161-L163","name":"EMetric.mem_iff_infEdist_zero_of_closed","line":161,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.mem_iff_infEdist_zero_of_closed","doc":"Given a closed set `s`, a point belongs to `s` iff its infimum edistance to this set vanishes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.mem_iff_infEdist_zero_of_closed\"><span class=\"name\">EMetric</span>.<span class=\"name\">mem_iff_infEdist_zero_of_closed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L153-L159","name":"EMetric.mem_closure_iff_infEdist_zero","line":153,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.mem_closure_iff_infEdist_zero","doc":"A point belongs to the closure of `s` iff its infimum edistance to this set vanishes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.mem_closure_iff_infEdist_zero\"><span class=\"name\">EMetric</span>.<span class=\"name\">mem_closure_iff_infEdist_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L137-L151","name":"EMetric.infEdist_closure","line":137,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_closure","doc":"The edist to a set and to its closure coincide "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_closure\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L131-L135","name":"EMetric.continuous_infEdist","line":131,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.continuous_infEdist","doc":"The edist to a set depends continuously on the point "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.continuous_infEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">continuous_infEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L124-L129","name":"EMetric.edist_le_infEdist_add_ediam","line":124,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.edist_le_infEdist_add_ediam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.edist_le_infEdist_add_ediam\"><span class=\"name\">EMetric</span>.<span class=\"name\">edist_le_infEdist_add_ediam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Diam.html#EMetric.diam\">EMetric.diam</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L120-L122","name":"EMetric.infEdist_le_edist_add_infEdist","line":120,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_edist_add_infEdist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_edist_add_infEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_le_edist_add_infEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L112-L118","name":"EMetric.infEdist_le_infEdist_add_edist","line":112,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_infEdist_add_edist","doc":"The edist of `x` to `s` is bounded by the sum of the edist of `y` to `s` and\nthe edist from `x` to `y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_infEdist_add_edist\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_le_infEdist_add_edist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L108-L110","name":"EMetric.infEdist_lt_iff","line":108,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_lt_iff","doc":"The edist to a set is `< r` iff there exists a point in the set at edistance `< r` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_lt_iff\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L104-L106","name":"EMetric.infEdist_anti","line":104,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_anti","doc":"The edist is antitone with respect to inclusion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_anti\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_anti</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L100-L102","name":"EMetric.infEdist_zero_of_mem","line":100,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_zero_of_mem","doc":"If a point `x` belongs to `s`, then its edist to `s` vanishes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_zero_of_mem\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_zero_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L96-L98","name":"EMetric.infEdist_le_edist_of_mem","line":96,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_edist_of_mem","doc":"The edist to a set is bounded above by the edist to any of its points "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_le_edist_of_mem\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_le_edist_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L91-L94","name":"EMetric.infEdist_singleton","line":91,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_singleton","doc":"The edist to a singleton is the edistance to the single point of this singleton "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_singleton\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L88-L89","name":"EMetric.infEdist_biUnion","line":88,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_biUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_biUnion\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_biUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(⋃ <span class=\"fn\">i</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ <span class=\"fn\">i</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L84-L86","name":"EMetric.infEdist_iUnion","line":84,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_iUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_iUnion\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_iUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L79-L82","name":"EMetric.infEdist_union","line":79,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_union","doc":"The edist to a union is the minimum of the edists "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_union\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L76-L77","name":"EMetric.le_infEdist","line":76,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.le_infEdist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.le_infEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">le_infEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L72-L74","name":"EMetric.infEdist_empty","line":72,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist_empty\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\">EMetric.infEdist</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Topology/MetricSpace/HausdorffDistance.lean#L68-L70","name":"EMetric.infEdist","line":68,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist","doc":"The minimal edistance of a point to a set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#EMetric.infEdist\"><span class=\"name\">EMetric</span>.<span class=\"name\">infEdist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></div></div>"}]}