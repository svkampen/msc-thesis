{"name":"Mathlib.Data.Rat.Init","instances":[{"typeNames":["NNRat"],"name":"NNRat.instNNRatCast","className":"NNRatCast"},{"typeNames":["NNRat"],"name":"NNRatCast.toCoeTail","className":"CoeTail"},{"typeNames":["NNRat"],"name":"NNRatCast.toCoeHTCT","className":"CoeHTCT"},{"typeNames":["Rat"],"name":"Rat.instNNRatCast","className":"NNRatCast"}],"imports":["Init","Mathlib.Data.Nat.Notation","Mathlib.Tactic.Lemma","Mathlib.Tactic.ProjectionNotation","Mathlib.Tactic.TypeStar","Batteries.Classes.RatCast"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L82-L82","name":"Rat.cast_eq_id","line":82,"kind":"theorem","docLink":"./Mathlib/Data/Rat/Init.html#Rat.cast_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#Rat.cast_eq_id\"><span class=\"name\">Rat</span>.<span class=\"name\">cast_eq_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Rat.cast</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L81-L81","name":"Rat.cast_id","line":81,"kind":"theorem","docLink":"./Mathlib/Data/Rat/Init.html#Rat.cast_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#Rat.cast_id\"><span class=\"name\">Rat</span>.<span class=\"name\">cast_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L75-L75","name":"NNRat.cast_eq_id","line":75,"kind":"theorem","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.cast_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast_eq_id\"><span class=\"name\">NNRat</span>.<span class=\"name\">cast_eq_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">NNRat.cast</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L74-L74","name":"NNRat.cast_id","line":74,"kind":"theorem","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.cast_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast_id\"><span class=\"name\">NNRat</span>.<span class=\"name\">cast_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L72-L72","name":"NNRat.den_mk","line":72,"kind":"theorem","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.den_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.den_mk\"><span class=\"name\">NNRat</span>.<span class=\"name\">den_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat.den\">NNRat.den</a> <span class=\"fn\">⟨<span class=\"fn\">q</span>, <span class=\"fn\">hq</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span>.den</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L71-L71","name":"NNRat.num_mk","line":71,"kind":"theorem","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.num_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.num_mk\"><span class=\"name\">NNRat</span>.<span class=\"name\">num_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat.num\">NNRat.num</a> <span class=\"fn\">⟨<span class=\"fn\">q</span>, <span class=\"fn\">hq</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.num</span>.natAbs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L68-L69","name":"NNRat.den","line":68,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.den","doc":"The denominator of a nonnegative rational. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.den\"><span class=\"name\">NNRat</span>.<span class=\"name\">den</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L65-L66","name":"NNRat.num","line":65,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.num","doc":"The numerator of a nonnegative rational. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.num\"><span class=\"name\">NNRat</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L59-L59","name":"Rat.instNNRatCast","line":59,"kind":"instance","docLink":"./Mathlib/Data/Rat/Init.html#Rat.instNNRatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#Rat.instNNRatCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instNNRatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L57-L57","name":"NNRatCast.toCoeHTCT","line":57,"kind":"instance","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeHTCT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeHTCT\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">toCoeHTCT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L54-L54","name":"NNRatCast.toCoeTail","line":54,"kind":"instance","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeTail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeTail\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">toCoeTail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L48-L51","name":"NNRat.cast","line":48,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.cast","doc":"Canonical homomorphism from `ℚ≥0` to a division semiring `K`.\n\nThis is just the bare function in order to aid in creating instances of `DivisionSemiring`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast\"><span class=\"name\">NNRat</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> → <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L44-L44","name":"NNRat.instNNRatCast","line":44,"kind":"instance","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.instNNRatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.instNNRatCast\"><span class=\"name\">NNRat</span>.<span class=\"name\">instNNRatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L42-L42","name":"NNRatCast.nnratCast","line":42,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.nnratCast","doc":"The canonical homomorphism `ℚ≥0 → K`.\n\nDo not use directly. Use the coercion instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.nnratCast\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">nnratCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> → <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L38-L38","name":"NNRatCast.mk","line":38,"kind":"ctor","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.mk\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nnratCast : <span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> → <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L34-L42","name":"NNRatCast","line":34,"kind":"class","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast","doc":"Typeclass for the canonical homomorphism `ℚ≥0 → K`.\n\nThis should be considered as a notation typeclass. The sole purpose of this typeclass is to be\nextended by `DivisionSemiring`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\"><span class=\"name\">NNRatCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(K : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L25-L25","name":"«termℚ≥0»","line":25,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#«termℚ≥0»","doc":"Nonnegative rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#«termℚ≥0»\"><span class=\"name\">«termℚ≥0»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L22-L23","name":"NNRat","line":22,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#NNRat","doc":"Nonnegative rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat\"><span class=\"name\">NNRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Rat/Init.lean#L20-L20","name":"termℚ","line":20,"kind":"def","docLink":"./Mathlib/Data/Rat/Init.html#termℚ","doc":"Rational numbers, implemented as a pair of integers `num / den` such that the\ndenominator is positive and the numerator and denominator are coprime.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#termℚ\"><span class=\"name\">termℚ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}