{"name":"Lean.Meta.Tactic.Grind.Core","instances":[],"imports":["Lean.Meta.Tactic.Grind.Types","Lean.Meta.LitValues"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L154-L155","name":"Lean.Meta.Grind.addHEq","line":154,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addHEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addHEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addHEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L151-L152","name":"Lean.Meta.Grind.addEq","line":151,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L143-L149","name":"Lean.Meta.Grind.addEqCore.processTodo","line":143,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addEqCore.processTodo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addEqCore.processTodo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addEqCore</span>.<span class=\"name\">processTodo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L139-L149","name":"Lean.Meta.Grind.addEqCore","line":139,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addEqCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addEqCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addEqCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isHEq : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L43-L46","name":"Lean.Meta.Grind.isSameExpr","line":43,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.isSameExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.isSameExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isSameExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L36-L41","name":"Lean.Meta.Grind.getNext","line":36,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.getNext","doc":"Returns the next element in the equivalence class of `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.getNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L29-L34","name":"Lean.Meta.Grind.getRoot","line":29,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.getRoot","doc":"Returns the root element in the equivalence class of `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L19-L27","name":"Lean.Meta.Grind.mkENode","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.mkENode","doc":"Creates an `ENode` for `e` if one does not already exist.\nThis method assumes `e` has been hashconsed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.mkENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(generation : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Grind/Core.lean#L11-L17","name":"Lean.Meta.Grind.isInterpreted","line":11,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.isInterpreted","doc":"Returns `true` if `e` is `True`, `False`, or a literal value.\nSee `LitValues` for supported literals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.isInterpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isInterpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}