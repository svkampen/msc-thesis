{"name":"Lean.Meta.Check","instances":[],"imports":["Lean.Meta.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L257-L265","name":"Lean.Meta.isTypeCorrect","line":257,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.isTypeCorrect","doc":"Return true if `e` is type correct.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.isTypeCorrect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isTypeCorrect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L245-L255","name":"Lean.Meta.check","line":245,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.check","doc":"Throw an exception if `e` is not type correct.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L195-L203","name":"Lean.Meta.checkApp","line":195,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.checkApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.checkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">checkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L187-L193","name":"Lean.Meta.throwAppTypeMismatch","line":187,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.throwAppTypeMismatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.throwAppTypeMismatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwAppTypeMismatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L173-L185","name":"Lean.Meta.mkHasTypeButIsExpectedMsg","line":173,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.mkHasTypeButIsExpectedMsg","doc":"Return error message \"has type{givenType}\\nbut is expected to have type{expectedType}\"\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.mkHasTypeButIsExpectedMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHasTypeButIsExpectedMsg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(givenType expectedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L85-L171","name":"Lean.Meta.addPPExplicitToExposeDiff.visit","line":85,"kind":"opaque","docLink":"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addPPExplicitToExposeDiff</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L39-L171","name":"Lean.Meta.addPPExplicitToExposeDiff","line":39,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff","doc":"Given two expressions `a` and `b`, this method tries to annotate terms with `pp.explicit := true`\nand other `pp` options to expose \"implicit\" differences.\nFor example, suppose `a` and `b` are of the form\n```lean\n@HashMap Nat Nat eqInst hasInst1\n@HashMap Nat Nat eqInst hasInst2\n```\nBy default, the pretty printer formats both of them as `HashMap Nat Nat`.\nSo, counterintuitive error messages such as\n```lean\nerror: application type mismatch\n  HashMap.insert m\nargument\n  m\nhas type\n  HashMap Nat Nat\nbut is expected to have type\n  HashMap Nat Nat\n```\nwould be produced.\nBy adding `pp.explicit := true`, we can generate the more informative error\n```lean\nerror: application type mismatch\n  HashMap.insert m\nargument\n  m\nhas type\n  @HashMap Nat Nat eqInst hasInst1\nbut is expected to have type\n  @HashMap Nat Nat eqInst hasInst2\n```\n\nRemark: this method implements simple heuristics; we should extend it as we find other counterintuitive\nerror messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addPPExplicitToExposeDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Check.lean#L19-L25","name":"Lean.Meta.throwLetTypeMismatchMessage","line":19,"kind":"def","docLink":"./Lean/Meta/Check.html#Lean.Meta.throwLetTypeMismatchMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.throwLetTypeMismatchMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwLetTypeMismatchMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"}]}