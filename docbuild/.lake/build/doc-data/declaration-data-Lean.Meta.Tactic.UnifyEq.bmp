{"name":"Lean.Meta.Tactic.UnifyEq","instances":[],"imports":["Lean.Meta.Tactic.Injection"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L98-L119","name":"Lean.Meta.unifyEq?.injection","line":98,"kind":"def","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.unifyEq?.injection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.unifyEq?.injection\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unifyEq?</span>.<span class=\"name\">injection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eqFVarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a> := <span class=\"fn\">{ <span class=\"fn\">map</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(caseName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eqDecl : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(injectionOffset? : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L61-L76","name":"Lean.Meta.unifyEq?.substEq","line":61,"kind":"def","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.unifyEq?.substEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.unifyEq?.substEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unifyEq?</span>.<span class=\"name\">substEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eqFVarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a> := <span class=\"fn\">{ <span class=\"fn\">map</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acyclic : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eqDecl : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(symm : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L29-L135","name":"Lean.Meta.unifyEq?","line":29,"kind":"def","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.unifyEq?","doc":"Helper method for methods such as `Cases.unifyEqs?`.\nGiven the given goal `mvarId` containing the local hypothesis `eqFVarId`, it performs the following operations:\n\n- If `eqFVarId` is a heterogeneous equality, tries to convert it to a homogeneous one.\n- If `eqFVarId` is a homogeneous equality of the form `a = b`, it tries\n   - If `a` and `b` are definitionally equal, clear it\n   - Normalize `a` and `b` using the current reducibility setting.\n   - If `a` (`b`) is a free variable not occurring in `b` (`a`), replace it everywhere.\n   - If `a` and `b` are distinct constructors, return `none` to indicate that the goal has been closed.\n   - If `a` and `b` are the same constructor, apply `injection`, the result contains the number of new equalities introduced in the goal.\n   - It also tries to apply the given `acyclic` method to try to close the goal.\n     Remark: It is a parameter because `simp` uses `unifyEq?`, and `acyclic` depends on `simp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.unifyEq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unifyEq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eqFVarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a> := <span class=\"fn\">{ <span class=\"fn\">map</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acyclic : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(caseName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L22-L22","name":"Lean.Meta.UnifyEqResult.numNewEqs","line":22,"kind":"def","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.numNewEqs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.numNewEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">UnifyEqResult</span>.<span class=\"name\">numNewEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L21-L21","name":"Lean.Meta.UnifyEqResult.subst","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">UnifyEqResult</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L20-L20","name":"Lean.Meta.UnifyEqResult.mvarId","line":20,"kind":"def","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">UnifyEqResult</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L19-L19","name":"Lean.Meta.UnifyEqResult.mk","line":19,"kind":"ctor","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">UnifyEqResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numNewEqs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\">Lean.Meta.UnifyEqResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/UnifyEq.lean#L19-L22","name":"Lean.Meta.UnifyEqResult","line":19,"kind":"structure","docLink":"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/UnifyEq.html#Lean.Meta.UnifyEqResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">UnifyEqResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}