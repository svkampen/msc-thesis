{"name":"Mathlib.Tactic.GeneralizeProofs","instances":[],"imports":["Init","Lean.Elab.Tactic.Config","Lean.Elab.Tactic.Location","Mathlib.Lean.Expr.Basic","Batteries.Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L472-L523","name":"Mathlib.Tactic.generalizeProofsElab","line":472,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.generalizeProofsElab","doc":"`generalize_proofs ids* [at locs]?` generalizes proofs in the current goal,\nturning them into new local hypotheses.\n\n- `generalize_proofs` generalizes proofs in the target.\n- `generalize_proofs at h₁ h₂` generalized proofs in hypotheses `h₁` and `h₂`.\n- `generalize_proofs at *` generalizes proofs in the entire local context.\n- `generalize_proofs pf₁ pf₂ pf₃` uses names `pf₁`, `pf₂`, and `pf₃` for the generalized proofs.\n  These can be `_` to not name proofs.\n\nIf a proof is already present in the local context, it will use that rather than create a new\nlocal hypothesis.\n\nWhen doing `generalize_proofs at h`, if `h` is a let binding, its value is cleared,\nand furthermore if `h` duplicates a preceding local hypothesis then it is eliminated.\n\nThe tactic is able to abstract proofs from under binders, creating universally quantified\nproofs in the local context.\nTo disable this, use `generalize_proofs (config := { abstract := false })`.\nThe tactic is also set to recursively abstract proofs from the types of the generalized proofs.\nThis can be controlled with the `maxDepth` configuration option,\nwith `generalize_proofs (config := { maxDepth := 0 })` turning this feature off.\n\nFor example:\n```lean\nexample : List.nthLe [1, 2] 1 (by simp) = 2 := by\n  -- ⊢ [1, 2].nthLe 1 ⋯ = 2\n  generalize_proofs h\n  -- h : 1 < [1, 2].length\n  -- ⊢ [1, 2].nthLe 1 h = 2\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.generalizeProofsElab\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">generalizeProofsElab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L451-L470","name":"Lean.MVarId.generalizeProofs","line":451,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Lean.MVarId.generalizeProofs","doc":"Generalize proofs in the hypotheses `fvars` and, if `target` is true, the target.\nReturns the fvars for the generalized proofs and the new goal.\n\nIf a hypothesis is a proposition and a `let` binding, this will clear the value of the let binding.\n\nIf a hypothesis is a proposition that already appears in the local context, it will be eliminated.\n\nOnly *nontrivial* proofs are generalized. These are proofs that aren't of the form `f a b ...`\nwhere `f` is atomic and `a b ...` are bound variables.\nThese sorts of proofs cannot be meaningfully generalized, and also these are the sorts of proofs\nthat are left in a term after generalization.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Lean.MVarId.generalizeProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">generalizeProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a> := <span class=\"fn\">{ <span class=\"fn\">maxDepth</span> := <span class=\"fn\">8</span>, <span class=\"fn\">abstract</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">debug</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L384-L446","name":"Mathlib.Tactic.GeneralizeProofs.generalizeProofsCore.go","line":384,"kind":"opaque","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.generalizeProofsCore.go","doc":"Loop for `generalizeProofsCore`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.generalizeProofsCore.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">generalizeProofsCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvars rfvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L372-L446","name":"Mathlib.Tactic.GeneralizeProofs.generalizeProofsCore","line":372,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.generalizeProofsCore","doc":"Main loop for `Lean.MVarId.generalizeProofs`.\nThe `fvars` array is the array of fvars to generalize proofs for,\nand `rfvars` is the array of fvars that have been reverted.\nThe `g` metavariable has all of these fvars reverted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.generalizeProofsCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">generalizeProofsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars rfvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L355-L369","name":"Mathlib.Tactic.GeneralizeProofs.withGeneralizedProofs.go","line":355,"kind":"opaque","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.withGeneralizedProofs.go","doc":"Core loop for `withGeneralizedProofs`, adds generalizations one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.withGeneralizedProofs.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">withGeneralizedProofs</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(generalizations : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars pfs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proofToFVar propToFVar : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L336-L370","name":"Mathlib.Tactic.GeneralizeProofs.withGeneralizedProofs","line":336,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.withGeneralizedProofs","doc":"Generalizes the proofs in the type `e` and runs `k` in a local context with these propositions.\nThis continuation `k` is passed\n1. an array of fvars for the propositions\n2. an array of proof terms (extracted from `e`) that prove these propositions\n3. the generalized `e`, which refers to these fvars\n\nThe `propToFVar` map is updated with the new proposition fvars.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.withGeneralizedProofs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">withGeneralizedProofs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L323-L334","name":"Mathlib.Tactic.GeneralizeProofs.initialPropToFVar","line":323,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.initialPropToFVar","doc":"Create a mapping of all propositions in the local context to their fvars.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.initialPropToFVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">initialPropToFVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L278-L321","name":"Mathlib.Tactic.GeneralizeProofs.abstractProofs.visitProof","line":278,"kind":"opaque","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.abstractProofs.visitProof","doc":"Core implementation of abstracting a proof.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.abstractProofs.visitProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">abstractProofs</span>.<span class=\"name\">visitProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L232-L274","name":"Mathlib.Tactic.GeneralizeProofs.abstractProofs.visit","line":232,"kind":"opaque","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.abstractProofs.visit","doc":"Core implementation of `abstractProofs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.abstractProofs.visit\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">abstractProofs</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L210-L321","name":"Mathlib.Tactic.GeneralizeProofs.abstractProofs","line":210,"kind":"opaque","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.abstractProofs","doc":"Abstract proofs occurring in the expression.\nA proof is *abstracted* if it is of the form `f a b ...` where `a b ...` are bound variables\n(that is, they are variables that are not present in the initial local context)\nand where `f` contains no bound variables.\nIn this form, `f` can be immediately lifted to be a local variable and generalized.\nThe abstracted proofs are recorded in the state.\n\nThis function is careful to track the type of `e` based on where it's used,\nsince the inferred type might be different.\nFor example, `(by simp : 1 < [1, 2].length)` has `1 < Nat.succ 1` as the inferred type,\nbut from knowing it's an argument to `List.nthLe` we can deduce `1 < [1, 2].length`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.abstractProofs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">abstractProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L186-L208","name":"Mathlib.Tactic.GeneralizeProofs.mkLambdaFVarsUsedOnly","line":186,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.mkLambdaFVarsUsedOnly","doc":"Does `mkLambdaFVars fvars e` but\n1. zeta reduces let bindings\n2. only includes used fvars\n3. returns the list of fvars that were actually abstracted\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.mkLambdaFVarsUsedOnly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">mkLambdaFVarsUsedOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L157-L184","name":"Mathlib.Tactic.GeneralizeProofs.appArgExpectedTypes.go","line":157,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.appArgExpectedTypes.go","doc":"Core implementation for `appArgExpectedTypes`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.appArgExpectedTypes.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">appArgExpectedTypes</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L145-L184","name":"Mathlib.Tactic.GeneralizeProofs.appArgExpectedTypes","line":145,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.appArgExpectedTypes","doc":"Computes expected types for each argument to `f`,\ngiven that the type of `mkAppN f args` is supposed to be `ty?`\n(where if `ty?` is none, there's no type to propagate inwards).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.appArgExpectedTypes\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">appArgExpectedTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L140-L143","name":"Mathlib.Tactic.GeneralizeProofs.MAbs.withRecurse","line":140,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.withRecurse","doc":"Runs `x` with an increased recursion depth and the initial local context, clearing `fvars`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.withRecurse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MAbs</span>.<span class=\"name\">withRecurse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L136-L138","name":"Mathlib.Tactic.GeneralizeProofs.MAbs.withLocal","line":136,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.withLocal","doc":"Runs `x` with an additional local variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.withLocal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MAbs</span>.<span class=\"name\">withLocal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L118-L134","name":"Mathlib.Tactic.GeneralizeProofs.MAbs.insertProof","line":118,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.insertProof","doc":"Generalize `prop`, where `proof` is its proof.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.insertProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MAbs</span>.<span class=\"name\">insertProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(prop pf : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L109-L116","name":"Mathlib.Tactic.GeneralizeProofs.MAbs.findProof?","line":109,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.findProof?","doc":"Finds a proof of `prop` by looking at `propToFVar` and `propToProof`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs.findProof?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MAbs</span>.<span class=\"name\">findProof?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(prop : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L101-L107","name":"Mathlib.Tactic.GeneralizeProofs.MGen.runMAbs","line":101,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen.runMAbs","doc":"Runs `MAbs` in `MGen`. Returns the value and the `generalizations`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen.runMAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MGen</span>.<span class=\"name\">runMAbs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mx : <span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\">Mathlib.Tactic.GeneralizeProofs.MAbs</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L93-L99","name":"Mathlib.Tactic.GeneralizeProofs.MAbs","line":93,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs","doc":"Monad used to abstract proofs, to prepare for generalization.\nHas a cache (of expr/type? pairs),\nand it also has a reader context `Mathlib.Tactic.GeneralizeProofs.AContext`\nand a state `Mathlib.Tactic.GeneralizeProofs.AState`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MAbs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L91-L91","name":"Mathlib.Tactic.GeneralizeProofs.AState.propToProof","line":91,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState.propToProof","doc":"Map version of `generalizations`. Use `MAbs.findProof?` and `MAbs.insertProof`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState.propToProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AState</span>.<span class=\"name\">propToProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState\">Mathlib.Tactic.GeneralizeProofs.AState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L89-L89","name":"Mathlib.Tactic.GeneralizeProofs.AState.generalizations","line":89,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState.generalizations","doc":"The prop/proof triples to add to the local context.\nThe proofs must not refer to fvars in `fvars`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState.generalizations\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AState</span>.<span class=\"name\">generalizations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState\">Mathlib.Tactic.GeneralizeProofs.AState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L86-L86","name":"Mathlib.Tactic.GeneralizeProofs.AState.mk","line":86,"kind":"ctor","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(generalizations : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(propToProof : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState\">Mathlib.Tactic.GeneralizeProofs.AState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L85-L91","name":"Mathlib.Tactic.GeneralizeProofs.AState","line":85,"kind":"structure","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState","doc":"State for the `MAbs` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AState\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L83-L83","name":"Mathlib.Tactic.GeneralizeProofs.AContext.config","line":83,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.config","doc":"The tactic configuration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\">Mathlib.Tactic.GeneralizeProofs.AContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L81-L81","name":"Mathlib.Tactic.GeneralizeProofs.AContext.initLCtx","line":81,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.initLCtx","doc":"The initial local context, for resetting when recursing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.initLCtx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span>.<span class=\"name\">initLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\">Mathlib.Tactic.GeneralizeProofs.AContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L79-L79","name":"Mathlib.Tactic.GeneralizeProofs.AContext.depth","line":79,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.depth","doc":"The recursion depth, for how many times `visit` is called from within `visitProof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.depth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\">Mathlib.Tactic.GeneralizeProofs.AContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L77-L77","name":"Mathlib.Tactic.GeneralizeProofs.AContext.propToFVar","line":77,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.propToFVar","doc":"A copy of `propToFVar` from `GState`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.propToFVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span>.<span class=\"name\">propToFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\">Mathlib.Tactic.GeneralizeProofs.AContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L75-L75","name":"Mathlib.Tactic.GeneralizeProofs.AContext.fvars","line":75,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.fvars","doc":"The local fvars corresponding to bound variables.\nAbstraction needs to be sure that these variables do not appear in abstracted terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.fvars\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\">Mathlib.Tactic.GeneralizeProofs.AContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L72-L72","name":"Mathlib.Tactic.GeneralizeProofs.AContext.mk","line":72,"kind":"ctor","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(propToFVar : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(initLCtx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\">Mathlib.Tactic.GeneralizeProofs.AContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L71-L83","name":"Mathlib.Tactic.GeneralizeProofs.AContext","line":71,"kind":"structure","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext","doc":"Context for the `MAbs` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.AContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">AContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L67-L69","name":"Mathlib.Tactic.GeneralizeProofs.MGen.insertFVar","line":67,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen.insertFVar","doc":"Inserts a prop/fvar pair into the `propToFVar` map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen.insertFVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MGen</span>.<span class=\"name\">insertFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(prop fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\">Mathlib.Tactic.GeneralizeProofs.MGen</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L63-L65","name":"Mathlib.Tactic.GeneralizeProofs.MGen","line":63,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen","doc":"Monad used to generalize proofs.\nCarries `Mathlib.Tactic.GeneralizeProofs.Config` and `Mathlib.Tactic.GeneralizeProofs.State`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.MGen\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">MGen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L61-L61","name":"Mathlib.Tactic.GeneralizeProofs.GState.propToFVar","line":61,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState.propToFVar","doc":"Mapping from propositions to an fvar in the local context with that type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState.propToFVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">GState</span>.<span class=\"name\">propToFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState\">Mathlib.Tactic.GeneralizeProofs.GState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L59-L59","name":"Mathlib.Tactic.GeneralizeProofs.GState.mk","line":59,"kind":"ctor","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">GState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(propToFVar : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState\">Mathlib.Tactic.GeneralizeProofs.GState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L58-L61","name":"Mathlib.Tactic.GeneralizeProofs.GState","line":58,"kind":"structure","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState","doc":"State for the `MGen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.GState\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">GState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L55-L56","name":"Mathlib.Tactic.GeneralizeProofs.elabConfig","line":55,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.elabConfig","doc":"Elaborates a `Parser.Tactic.config` for `generalize_proofs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.elabConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L53-L53","name":"Mathlib.Tactic.GeneralizeProofs.Config.debug","line":53,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.debug","doc":"(Debugging) When `true`, enables consistency checks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.debug\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">Config</span>.<span class=\"name\">debug</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L51-L51","name":"Mathlib.Tactic.GeneralizeProofs.Config.abstract","line":51,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.abstract","doc":"When `abstract` is `true`, then the tactic will create universally quantified proofs\nto account for bound variables.\nWhen it is `false` then such proofs are left alone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.abstract\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">Config</span>.<span class=\"name\">abstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L47-L47","name":"Mathlib.Tactic.GeneralizeProofs.Config.maxDepth","line":47,"kind":"def","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.maxDepth","doc":"The maximum recursion depth when generalizing proofs.\nWhen `maxDepth > 0`, then proofs are generalized from the types of the generalized proofs too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.maxDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L44-L44","name":"Mathlib.Tactic.GeneralizeProofs.Config.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abstract debug : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\">Mathlib.Tactic.GeneralizeProofs.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/GeneralizeProofs.lean#L41-L53","name":"Mathlib.Tactic.GeneralizeProofs.Config","line":41,"kind":"structure","docLink":"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config","doc":"Configuration for the `generalize_proofs` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GeneralizeProofs.html#Mathlib.Tactic.GeneralizeProofs.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GeneralizeProofs</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}