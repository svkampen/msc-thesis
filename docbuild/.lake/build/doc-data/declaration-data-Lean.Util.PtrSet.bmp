{"name":"Lean.Util.PtrSet","instances":[{"typeNames":["Lean.Ptr"],"name":"Lean.instHashablePtr","className":"Hashable"},{"typeNames":["Lean.Ptr"],"name":"Lean.instBEqPtr","className":"BEq"}],"imports":["Init.Data.Hashable","Lean.Data.HashSet","Lean.Data.HashMap","Std.Data.HashSet.Basic","Std.Data.HashMap.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L54-L55","name":"Lean.PtrMap.find?","line":54,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrMap.find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrMap.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrMap</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\">Lean.PtrMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L51-L52","name":"Lean.PtrMap.contains","line":51,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrMap.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrMap.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrMap</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\">Lean.PtrMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L48-L49","name":"Lean.PtrMap.insert","line":48,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrMap.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrMap.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\">Lean.PtrMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\">Lean.PtrMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L45-L46","name":"Lean.mkPtrMap","line":45,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.mkPtrMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.mkPtrMap\"><span class=\"name\">Lean</span>.<span class=\"name\">mkPtrMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(capacity : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\">Lean.PtrMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L39-L43","name":"Lean.PtrMap","line":39,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrMap","doc":"Map of pointers. It is a low-level auxiliary datastructure used for traversing DAGs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α β : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L36-L37","name":"Lean.PtrSet.contains","line":36,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrSet.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrSet.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrSet</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L33-L34","name":"Lean.PtrSet.insert","line":33,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrSet.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrSet.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrSet</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L30-L31","name":"Lean.mkPtrSet","line":30,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.mkPtrSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.mkPtrSet\"><span class=\"name\">Lean</span>.<span class=\"name\">mkPtrSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(capacity : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L24-L28","name":"Lean.PtrSet","line":24,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.PtrSet","doc":"Set of pointers. It is a low-level auxiliary datastructure used for traversing DAGs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\"><span class=\"name\">Lean</span>.<span class=\"name\">PtrSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L21-L22","name":"Lean.instBEqPtr","line":21,"kind":"instance","docLink":"./Lean/Util/PtrSet.html#Lean.instBEqPtr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.instBEqPtr\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqPtr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/Util/PtrSet.html#Lean.Ptr\">Lean.Ptr</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L18-L19","name":"Lean.instHashablePtr","line":18,"kind":"instance","docLink":"./Lean/Util/PtrSet.html#Lean.instHashablePtr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.instHashablePtr\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashablePtr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">(<a href=\"./Lean/Util/PtrSet.html#Lean.Ptr\">Lean.Ptr</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L16-L16","name":"Lean.Ptr.value","line":16,"kind":"def","docLink":"./Lean/Util/PtrSet.html#Lean.Ptr.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.Ptr.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Ptr</span>.<span class=\"name\">value</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.Ptr\">Lean.Ptr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L15-L15","name":"Lean.Ptr.mk","line":15,"kind":"ctor","docLink":"./Lean/Util/PtrSet.html#Lean.Ptr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.Ptr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Ptr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.Ptr\">Lean.Ptr</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/PtrSet.lean#L15-L16","name":"Lean.Ptr","line":15,"kind":"structure","docLink":"./Lean/Util/PtrSet.html#Lean.Ptr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/PtrSet.html#Lean.Ptr\"><span class=\"name\">Lean</span>.<span class=\"name\">Ptr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}