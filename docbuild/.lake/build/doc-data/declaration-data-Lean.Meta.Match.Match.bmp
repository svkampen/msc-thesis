{"name":"Lean.Meta.Match.Match","instances":[],"imports":["Lean.Meta.LitValues","Lean.Meta.Check","Lean.Meta.Closure","Lean.Meta.CtorRecognizer","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Contradiction","Lean.Meta.GeneralizeTelescope","Lean.Meta.Match.Basic","Lean.Meta.Match.MatcherApp.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L967-L976","name":"Lean.Meta.Match.withMkMatcherInput","line":967,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withMkMatcherInput","doc":"This function is only used for testing purposes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withMkMatcherInput\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">withMkMatcherInput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(matcherName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L937-L965","name":"Lean.Meta.Match.getMkMatcherInputInContext","line":937,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.getMkMatcherInputInContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.getMkMatcherInputInContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">getMkMatcherInputInContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(matcherApp : <a href=\"./Lean/Meta/Match/MatcherApp/Basic.html#Lean.Meta.MatcherApp\">Lean.Meta.MatcherApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L825-L935","name":"Lean.Meta.Match.mkMatcher","line":825,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcher","doc":"Create a dependent matcher for `matchType` where `matchType` is of the form\n`(a_1 : A_1) -> (a_2 : A_2[a_1]) -> ... -> (a_n : A_n[a_1, a_2, ... a_{n-1}]) -> B[a_1, ..., a_n]`\nwhere `n = numDiscrs`, and the `lhss` are the left-hand-sides of the `match`-expression alternatives.\nEach `AltLHS` has a list of local declarations and a list of patterns.\nThe number of patterns must be the same in each `AltLHS`.\nThe generated matcher has the structure described at `MatcherInfo`. The motive argument is of the form\n`(motive : (a_1 : A_1) -> (a_2 : A_2[a_1]) -> ... -> (a_n : A_n[a_1, a_2, ... a_{n-1}]) -> Sort v)`\nwhere `v` is a universe parameter or 0 if `B[a_1, ..., a_n]` is a proposition.\n\nIf `exceptionIfContainsSorry := true`, then `mkMatcher` throws an exception if the auxiliary\ndeclarations contains a `sorry`. We use this argument to workaround a bug at `IndPredBelow.mkBelowMatcher`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">mkMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(input : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exceptionIfContainsSorry : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Lean.Meta.Match.MatcherResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L809-L823","name":"Lean.Meta.Match.withCleanLCtxFor","line":809,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withCleanLCtxFor","doc":"Auxiliary method used at `mkMatcher`. It executes `k` in a local context that contains only\nthe local declarations `m` depends on. This is important because otherwise dependent elimination\nmay \"refine\" the types of unnecessary declarations and accidentally introduce unnecessary dependencies\nin the auto-generated auxiliary declaration. Note that this is not just an optimization because the\nunnecessary dependencies may prevent the termination checker from succeeding. For an example,\nsee issue #1237.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withCleanLCtxFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">withCleanLCtxFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L804-L807","name":"Lean.Meta.Match.MkMatcherInput.collectDependencies","line":804,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectDependencies","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectDependencies\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">collectDependencies</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L800-L802","name":"Lean.Meta.Match.MkMatcherInput.collectFVars","line":800,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">collectFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectFVars.html#Lean.CollectFVars.State\">Lean.CollectFVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L797-L798","name":"Lean.Meta.Match.MkMatcherInput.numDiscrs","line":797,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.numDiscrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.numDiscrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">numDiscrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L795-L795","name":"Lean.Meta.Match.MkMatcherInput.lhss","line":795,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.lhss","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.lhss\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">lhss</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L794-L794","name":"Lean.Meta.Match.MkMatcherInput.discrInfos","line":794,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.discrInfos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.discrInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">discrInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.DiscrInfo\">Lean.Meta.Match.DiscrInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L793-L793","name":"Lean.Meta.Match.MkMatcherInput.matchType","line":793,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matchType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matchType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">matchType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L792-L792","name":"Lean.Meta.Match.MkMatcherInput.matcherName","line":792,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matcherName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matcherName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">matcherName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L791-L791","name":"Lean.Meta.Match.MkMatcherInput.mk","line":791,"kind":"ctor","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(matcherName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(matchType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discrInfos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.DiscrInfo\">Lean.Meta.Match.DiscrInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Lean.Meta.Match.MkMatcherInput</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L791-L795","name":"Lean.Meta.Match.MkMatcherInput","line":791,"kind":"structure","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L767-L789","name":"Lean.Meta.Match.mkMatcherAuxDefinition","line":767,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcherAuxDefinition","doc":"Similar to `mkAuxDefinition`, but uses the cache `matcherExt`.\nIt also returns an Boolean that indicates whether a new matcher function was added to the environment or not. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcherAuxDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">mkMatcherAuxDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.MatcherInfo\">Lean.Meta.MatcherInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L765-L765","name":"Lean.Meta.Match.matcherExt","line":765,"kind":"opaque","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.matcherExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.matcherExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">matcherExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L759-L763","name":"Lean.Meta.Match.bootstrap.genMatcherCode","line":759,"kind":"opaque","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.bootstrap.genMatcherCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.bootstrap.genMatcherCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">bootstrap</span>.<span class=\"name\">genMatcherCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L681-L686","name":"Lean.Meta.Match.isCurrVarInductive","line":681,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.isCurrVarInductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.isCurrVarInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">isCurrVarInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L412-L434","name":"Lean.Meta.Match.processInaccessibleAsCtor","line":412,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.processInaccessibleAsCtor","doc":"Given `alt` s.t. the next pattern is an inaccessible pattern `e`,\ntry to normalize `e` into a constructor application.\nIf it is not a constructor, throw an error.\nOtherwise, if it is a constructor application of `ctorName`,\nupdate the next patterns with the fields of the constructor.\nOtherwise, return none. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.processInaccessibleAsCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">processInaccessibleAsCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L72-L72","name":"Lean.Meta.Match.State.counterExamples","line":72,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.counterExamples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.counterExamples\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span>.<span class=\"name\">counterExamples</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\">Lean.Meta.Match.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L71-L71","name":"Lean.Meta.Match.State.used","line":71,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.used","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\">Lean.Meta.Match.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L70-L70","name":"Lean.Meta.Match.State.mk","line":70,"kind":"ctor","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(used : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(counterExamples : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\">Lean.Meta.Match.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Match/Match.lean#L70-L72","name":"Lean.Meta.Match.State","line":70,"kind":"structure","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}