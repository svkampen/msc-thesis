{"name":"Init.Data.String.Basic","instances":[{"typeNames":["String.Pos"],"name":"String.instOfNatPos","className":"OfNat"},{"typeNames":["String"],"name":"String.instLT","className":"LT"},{"typeNames":["LT.lt"],"name":"String.decLt","className":"Decidable"},{"typeNames":["String"],"name":"String.instLE","className":"LE"},{"typeNames":["LE.le"],"name":"String.decLE","className":"Decidable"},{"typeNames":["String"],"name":"String.instInhabited","className":"Inhabited"},{"typeNames":["String"],"name":"String.instAppend","className":"Append"},{"typeNames":["Eq"],"name":"String.instDecidableEqIterator","className":"Decidable"},{"typeNames":["String.Iterator"],"name":"String.instInhabitedIterator","className":"Inhabited"},{"typeNames":["String.Iterator"],"name":"String.instSizeOfIterator","className":"SizeOf"},{"typeNames":["Substring"],"name":"Substring.hasBeq","className":"BEq"}],"imports":["Init.Data.List.Basic","Init.Data.Char.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1308-L1310","name":"Substring.prevn_zero","line":1308,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Substring.prevn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prevn_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prevn</span> <span class=\"fn\">n</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1306-L1306","name":"Substring.prev_zero","line":1306,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Substring.prev_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prev_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prev</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1297-L1298","name":"String.append_assoc","line":1297,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.append_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append_assoc\"><span class=\"name\">String</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ s₂ s₃ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">(<span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1295-L1295","name":"String.empty_append","line":1295,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.empty_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.empty_append\"><span class=\"name\">String</span>.<span class=\"name\">empty_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1293-L1293","name":"String.append_empty","line":1293,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.append_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append_empty\"><span class=\"name\">String</span>.<span class=\"name\">append_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1291-L1291","name":"String.data_singleton","line":1291,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.data_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_singleton\"><span class=\"name\">String</span>.<span class=\"name\">data_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">c</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1289-L1289","name":"String.singleton_eq","line":1289,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.singleton_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.singleton_eq\"><span class=\"name\">String</span>.<span class=\"name\">singleton_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">[<span class=\"fn\">c</span>]</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1283-L1283","name":"String.next'_eq","line":1283,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.next'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next'_eq\"><span class=\"name\">String</span>.<span class=\"name\">next'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next'</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1281-L1281","name":"String.get'_eq","line":1281,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.get'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get'_eq\"><span class=\"name\">String</span>.<span class=\"name\">get'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get'</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1279-L1279","name":"String.prev_zero","line":1279,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.prev_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev_zero\"><span class=\"name\">String</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prev</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1277-L1277","name":"String.lt_next'","line":1277,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.lt_next'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_next'\"><span class=\"name\">String</span>.<span class=\"name\">lt_next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1275-L1275","name":"String.get!_eq_get","line":1275,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.get!_eq_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get!_eq_get\"><span class=\"name\">String</span>.<span class=\"name\">get!_eq_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get!</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1271-L1271","name":"String.Pos.mk_lt_mk","line":1271,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.mk_lt_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.mk_lt_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_lt_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> }</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1269-L1269","name":"String.Pos.lt_iff","line":1269,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1267-L1267","name":"String.Pos.mk_le_mk","line":1267,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.mk_le_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.mk_le_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> }</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1265-L1265","name":"String.Pos.le_iff","line":1265,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.le_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1262-L1263","name":"String.Pos.zero_addString_eq","line":1262,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.zero_addString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.zero_addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.utf8ByteSize</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1259-L1260","name":"String.Pos.zero_addString_byteIdx","line":1259,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.zero_addString_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.zero_addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.utf8ByteSize</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1257-L1257","name":"String.Pos.addString_eq","line":1257,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.addString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.utf8ByteSize</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1254-L1255","name":"String.Pos.addString_byteIdx","line":1254,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.addString_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.utf8ByteSize</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1252-L1252","name":"String.Pos.ne_of_gt","line":1252,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.ne_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.ne_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1250-L1250","name":"String.Pos.ne_of_lt","line":1250,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.ne_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1245-L1248","name":"String.Pos.addChar_right_comm","line":1245,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.addChar_right_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.addChar_right_comm\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_right_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₁ c₂ : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1243-L1243","name":"String.Pos.zero_addChar_eq","line":1243,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.zero_addChar_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.zero_addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1240-L1241","name":"String.Pos.zero_addChar_byteIdx","line":1240,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.zero_addChar_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.zero_addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1238-L1238","name":"String.Pos.addChar_eq","line":1238,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.addChar_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1236-L1236","name":"String.Pos.addChar_byteIdx","line":1236,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.addChar_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1234-L1234","name":"String.Pos.sub_eq","line":1234,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.sub_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.sub_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">sub_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1232-L1232","name":"String.Pos.sub_byteIdx","line":1232,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.sub_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.sub_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">sub_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p₂</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1230-L1230","name":"String.Pos.add_eq","line":1230,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.add_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">add_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1228-L1228","name":"String.Pos.add_byteIdx","line":1228,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.add_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.add_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">add_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p₂</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1226-L1226","name":"String.Pos.ext_iff","line":1226,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1223-L1224","name":"String.Pos.ext","line":1223,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.ext\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1221-L1221","name":"String.Pos.mk_byteIdx","line":1221,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.mk_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.mk_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1219-L1219","name":"String.Pos.mk_zero","line":1219,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.mk_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.mk_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">0</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1217-L1217","name":"String.Pos.byteIdx_mk","line":1217,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.byteIdx_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.byteIdx_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">n</span> }</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1215-L1215","name":"String.Pos.byteIdx_zero","line":1215,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.byteIdx_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.byteIdx_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.byteIdx\">String.Pos.byteIdx</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1211-L1211","name":"String.lt_iff","line":1211,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s t : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1207-L1207","name":"String.data_append","line":1207,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.data_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_append\"><span class=\"name\">String</span>.<span class=\"name\">data_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">t</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1205-L1205","name":"String.data_push","line":1205,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.data_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_push\"><span class=\"name\">String</span>.<span class=\"name\">data_push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.push</span> <span class=\"fn\">c</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">c</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1202-L1203","name":"String.length_append","line":1202,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.length_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_append\"><span class=\"name\">String</span>.<span class=\"name\">length_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">t</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1199-L1200","name":"String.length_pushn","line":1199,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.length_pushn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_pushn\"><span class=\"name\">String</span>.<span class=\"name\">length_pushn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.pushn</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1195-L1197","name":"String.length_push","line":1195,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.length_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_push\"><span class=\"name\">String</span>.<span class=\"name\">length_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.push</span> <span class=\"fn\">c</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1193-L1193","name":"String.length_singleton","line":1193,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.length_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_singleton\"><span class=\"name\">String</span>.<span class=\"name\">length_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1191-L1191","name":"String.length_empty","line":1191,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.length_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_empty\"><span class=\"name\">String</span>.<span class=\"name\">length_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1189-L1189","name":"String.length_mk","line":1189,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.length_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_mk\"><span class=\"name\">String</span>.<span class=\"name\">length_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">s</span> }</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1187-L1187","name":"String.default_eq","line":1187,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.default_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.default_eq\"><span class=\"name\">String</span>.<span class=\"name\">default_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1185-L1185","name":"String.ext_iff","line":1185,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1182-L1183","name":"String.ext","line":1182,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ext\"><span class=\"name\">String</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.data</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1176-L1176","name":"Char.length_toString","line":1176,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Char.length_toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.length_toString\"><span class=\"name\">Char</span>.<span class=\"name\">length_toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.toString</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1173-L1174","name":"Char.toString","line":1173,"kind":"def","docLink":"./Init/Data/String/Basic.html#Char.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.toString\"><span class=\"name\">Char</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1164-L1167","name":"String.stripSuffix","line":1164,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.stripSuffix","doc":"`s.stripSuffix suff` will remove `suff` from the end of `s` if it occurs there,\nor otherwise return `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.stripSuffix\"><span class=\"name\">String</span>.<span class=\"name\">stripSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s suff : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1159-L1162","name":"String.stripPrefix","line":1159,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.stripPrefix","doc":"`s.stripPrefix pre` will remove `pre` from the beginning of `s` if it occurs there,\nor otherwise return `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.stripPrefix\"><span class=\"name\">String</span>.<span class=\"name\">stripPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1153-L1157","name":"String.dropSuffix?","line":1153,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropSuffix?","doc":"If `suff` is a suffix of `s`, i.e. `s = t ++ suff`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropSuffix?\"><span class=\"name\">String</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s suff : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1147-L1151","name":"String.dropPrefix?","line":1147,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropPrefix?","doc":"If `pre` is a prefix of `s`, i.e. `s = pre ++ t`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropPrefix?\"><span class=\"name\">String</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1144-L1145","name":"String.decapitalize","line":1144,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.decapitalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decapitalize\"><span class=\"name\">String</span>.<span class=\"name\">decapitalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1141-L1142","name":"String.capitalize","line":1141,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.capitalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.capitalize\"><span class=\"name\">String</span>.<span class=\"name\">capitalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1138-L1139","name":"String.toLower","line":1138,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toLower","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toLower\"><span class=\"name\">String</span>.<span class=\"name\">toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1135-L1136","name":"String.toUpper","line":1135,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toUpper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toUpper\"><span class=\"name\">String</span>.<span class=\"name\">toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1132-L1133","name":"String.nextUntil","line":1132,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.nextUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.nextUntil\"><span class=\"name\">String</span>.<span class=\"name\">nextUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1129-L1130","name":"String.nextWhile","line":1129,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.nextWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.nextWhile\"><span class=\"name\">String</span>.<span class=\"name\">nextWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1126-L1127","name":"String.trim","line":1126,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.trim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trim\"><span class=\"name\">String</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1123-L1124","name":"String.trimLeft","line":1123,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.trimLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trimLeft\"><span class=\"name\">String</span>.<span class=\"name\">trimLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1120-L1121","name":"String.trimRight","line":1120,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.trimRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trimRight\"><span class=\"name\">String</span>.<span class=\"name\">trimRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1117-L1118","name":"String.endsWith","line":1117,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.endsWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endsWith\"><span class=\"name\">String</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s post : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1114-L1115","name":"String.startsWith","line":1114,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.startsWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startsWith\"><span class=\"name\">String</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1111-L1112","name":"String.dropRightWhile","line":1111,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropRightWhile\"><span class=\"name\">String</span>.<span class=\"name\">dropRightWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1108-L1109","name":"String.takeRightWhile","line":1108,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.takeRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeRightWhile\"><span class=\"name\">String</span>.<span class=\"name\">takeRightWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1105-L1106","name":"String.dropWhile","line":1105,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1102-L1103","name":"String.takeWhile","line":1102,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1099-L1100","name":"String.takeRight","line":1099,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.takeRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeRight\"><span class=\"name\">String</span>.<span class=\"name\">takeRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1096-L1097","name":"String.take","line":1096,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.take\"><span class=\"name\">String</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1093-L1094","name":"String.dropRight","line":1093,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropRight\"><span class=\"name\">String</span>.<span class=\"name\">dropRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1090-L1091","name":"String.drop","line":1090,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.drop\"><span class=\"name\">String</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1076-L1084","name":"Substring.dropSuffix?","line":1076,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropSuffix?","doc":"If `suff` is a suffix of `s`, i.e. `s = t ++ suff`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropSuffix?\"><span class=\"name\">Substring</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s suff : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1066-L1074","name":"Substring.dropPrefix?","line":1066,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropPrefix?","doc":"If `pre` is a prefix of `s`, i.e. `s = pre ++ t`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropPrefix?\"><span class=\"name\">Substring</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s pre : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1053-L1063","name":"Substring.commonSuffix.loop","line":1053,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.commonSuffix.loop","doc":"Returns the starting position of the common prefix, working down from `spos, tpos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.commonSuffix.loop\"><span class=\"name\">Substring</span>.<span class=\"name\">commonSuffix</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(spos tpos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1045-L1064","name":"Substring.commonSuffix","line":1045,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.commonSuffix","doc":"Returns the longest common suffix of two substrings.\nThe returned substring will use the same underlying string as `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.commonSuffix\"><span class=\"name\">Substring</span>.<span class=\"name\">commonSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1034-L1042","name":"Substring.commonPrefix.loop","line":1034,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.commonPrefix.loop","doc":"Returns the ending position of the common prefix, working up from `spos, tpos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.commonPrefix.loop\"><span class=\"name\">Substring</span>.<span class=\"name\">commonPrefix</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(spos tpos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1026-L1043","name":"Substring.commonPrefix","line":1026,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.commonPrefix","doc":"Returns the longest common prefix of two substrings.\nThe returned substring will use the same underlying string as `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.commonPrefix\"><span class=\"name\">Substring</span>.<span class=\"name\">commonPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1022-L1024","name":"Substring.sameAs","line":1022,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.sameAs","doc":"Checks whether two substrings have the same position and content. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.sameAs\"><span class=\"name\">Substring</span>.<span class=\"name\">sameAs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss1 ss2 : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1020-L1020","name":"Substring.hasBeq","line":1020,"kind":"instance","docLink":"./Init/Data/String/Basic.html#Substring.hasBeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.hasBeq\"><span class=\"name\">Substring</span>.<span class=\"name\">hasBeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1017-L1018","name":"Substring.beq","line":1017,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.beq\"><span class=\"name\">Substring</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss1 ss2 : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1011-L1015","name":"Substring.toNat?","line":1011,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.toNat?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toNat?\"><span class=\"name\">Substring</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1008-L1009","name":"Substring.isNat","line":1008,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.isNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.isNat\"><span class=\"name\">Substring</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L1002-L1006","name":"Substring.trim","line":1002,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.trim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trim\"><span class=\"name\">Substring</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L999-L1000","name":"Substring.trimRight","line":999,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.trimRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trimRight\"><span class=\"name\">Substring</span>.<span class=\"name\">trimRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L996-L997","name":"Substring.trimLeft","line":996,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.trimLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trimLeft\"><span class=\"name\">Substring</span>.<span class=\"name\">trimLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L991-L994","name":"Substring.dropRightWhile","line":991,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropRightWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">dropRightWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L986-L989","name":"Substring.takeRightWhile","line":986,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRightWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRightWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L975-L984","name":"Substring.takeRightWhileAux","line":975,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeRightWhileAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRightWhileAux\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRightWhileAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(begPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L970-L973","name":"Substring.dropWhile","line":970,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L965-L968","name":"Substring.takeWhile","line":965,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L956-L963","name":"Substring.takeWhileAux","line":956,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeWhileAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\"><span class=\"name\">Substring</span>.<span class=\"name\">takeWhileAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L953-L954","name":"Substring.contains","line":953,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L950-L951","name":"Substring.all","line":950,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.all\"><span class=\"name\">Substring</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L946-L948","name":"Substring.any","line":946,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.any\"><span class=\"name\">Substring</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L942-L944","name":"Substring.foldr","line":942,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L938-L940","name":"Substring.foldl","line":938,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L917-L934","name":"Substring.splitOn.loop","line":917,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.splitOn.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.splitOn.loop\"><span class=\"name\">Substring</span>.<span class=\"name\">splitOn</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot; &quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b i j : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L913-L936","name":"Substring.splitOn","line":913,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.splitOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.splitOn\"><span class=\"name\">Substring</span>.<span class=\"name\">splitOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot; &quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L910-L911","name":"Substring.extract","line":910,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L907-L908","name":"Substring.atEnd","line":907,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L904-L905","name":"Substring.takeRight","line":904,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRight\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L901-L902","name":"Substring.take","line":901,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.take\"><span class=\"name\">Substring</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L898-L899","name":"Substring.dropRight","line":898,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropRight\"><span class=\"name\">Substring</span>.<span class=\"name\">dropRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L895-L896","name":"Substring.drop","line":895,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L889-L893","name":"Substring.posOf","line":889,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.posOf","doc":"Return the offset into `s` of the first occurrence of `c` in `s`,\nor `s.bsize` if `c` doesn't occur. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.posOf\"><span class=\"name\">Substring</span>.<span class=\"name\">posOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L886-L887","name":"Substring.front","line":886,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.front\"><span class=\"name\">Substring</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L882-L884","name":"Substring.prevn","line":882,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L878-L880","name":"Substring.nextn","line":878,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L871-L876","name":"Substring.prev","line":871,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.prev","doc":"Given an offset of a codepoint into the substring,\nreturn the offset there of the previous codepoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L862-L869","name":"Substring.lt_next","line":862,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Substring.lt_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.lt_next\"><span class=\"name\">Substring</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.bsize</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">i</span>)</span>.byteIdx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L855-L860","name":"Substring.next","line":855,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.next","doc":"Given an offset of a codepoint into the substring,\nreturn the offset there of the next codepoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.next\"><span class=\"name\">Substring</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L851-L853","name":"Substring.get","line":851,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.get","doc":"Return the codepoint at the given offset into the substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.get\"><span class=\"name\">Substring</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L848-L849","name":"Substring.toIterator","line":848,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">toIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L845-L846","name":"Substring.toString","line":845,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L842-L843","name":"Substring.isEmpty","line":842,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L832-L836","name":"String.findLineStart","line":832,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.findLineStart","doc":"Return the beginning of the line that contains character `pos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.findLineStart\"><span class=\"name\">String</span>.<span class=\"name\">findLineStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L818-L828","name":"String.replace.loop","line":818,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.replace.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replace.loop\"><span class=\"name\">String</span>.<span class=\"name\">replace</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s pattern replacement : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hPatt : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pattern</span>.endPos</span>.byteIdx</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(accStop pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L813-L830","name":"String.replace","line":813,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.replace","doc":"Replace all occurrences of `pattern` in `s` with `replacement`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replace\"><span class=\"name\">String</span>.<span class=\"name\">replace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s pattern replacement : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L809-L811","name":"String.isPrefixOf","line":809,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.isPrefixOf","doc":"Return true iff `p` is a prefix of `s` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isPrefixOf\"><span class=\"name\">String</span>.<span class=\"name\">isPrefixOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L798-L803","name":"String.substrEq.loop","line":798,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.substrEq.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.substrEq.loop\"><span class=\"name\">String</span>.<span class=\"name\">substrEq</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s1 s2 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off1 off2 stop1 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L792-L807","name":"String.substrEq","line":792,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.substrEq","doc":"Return `true` iff the substring of byte size `sz` starting at position `off1` in `s1` is equal to that starting at `off2` in `s2.`.\nFalse if either substring of that byte size does not exist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.substrEq\"><span class=\"name\">String</span>.<span class=\"name\">substrEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s1 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off1 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s2 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off2 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sz : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L786-L790","name":"String.toNat?","line":786,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toNat?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toNat?\"><span class=\"name\">String</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L783-L784","name":"String.isNat","line":783,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.isNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isNat\"><span class=\"name\">String</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L780-L781","name":"String.map","line":780,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.map\"><span class=\"name\">String</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L771-L778","name":"String.mapAux","line":771,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.mapAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mapAux\"><span class=\"name\">String</span>.<span class=\"name\">mapAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L756-L769","name":"String.mapAux_lemma","line":756,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.mapAux_lemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mapAux_lemma\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_lemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span>.endPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span>.next</span> <span class=\"fn\">i</span>)</span>.byteIdx</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.endPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L741-L753","name":"String.set_next_add.foo","line":741,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.set_next_add.foo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set_next_add.foo\"><span class=\"name\">String</span>.<span class=\"name\">set_next_add</span>.<span class=\"name\">foo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ b₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">cs</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span>)</span>.utf8Size</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c</span> <span class=\"fn\">cs</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span>)</span>.utf8Size</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c</span> <span class=\"fn\">cs</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L736-L754","name":"String.set_next_add","line":736,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.set_next_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set_next_add\"><span class=\"name\">String</span>.<span class=\"name\">set_next_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ b₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">i</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.endPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span>.next</span> <span class=\"fn\">i</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span>.endPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L730-L734","name":"String.utf8SetAux_of_gt","line":730,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.utf8SetAux_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8SetAux_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_gt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c'</span> <span class=\"fn\">cs</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L727-L728","name":"String.contains","line":727,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.contains\"><span class=\"name\">String</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L724-L725","name":"String.all","line":724,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.all\"><span class=\"name\">String</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L721-L722","name":"String.any","line":721,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.any\"><span class=\"name\">String</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L712-L719","name":"String.anyAux","line":712,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.anyAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.anyAux\"><span class=\"name\">String</span>.<span class=\"name\">anyAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L709-L710","name":"String.foldr","line":709,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldr\"><span class=\"name\">String</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L699-L707","name":"String.foldrAux","line":699,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldrAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldrAux\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i begPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L696-L697","name":"String.foldl","line":696,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldl\"><span class=\"name\">String</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L689-L694","name":"String.foldlAux","line":689,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldlAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldlAux\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L686-L687","name":"String.offsetOfPos","line":686,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.offsetOfPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offsetOfPos\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L677-L684","name":"String.offsetOfPosAux","line":677,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.offsetOfPosAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L669-L674","name":"String.Iterator.prevn","line":669,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.prevn","doc":"Moves the iterator's position several characters back.\n\nIf asked to go back more characters than available, stops at the beginning of the string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L664-L667","name":"String.Iterator.nextn","line":664,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.nextn","doc":"Moves the iterator's position several characters forward.\n\nThe resulting iterator is only valid if the number of characters to skip is less than or equal to\nthe number of characters left in the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L660-L662","name":"String.Iterator.remainingToString","line":660,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.remainingToString","doc":"The remaining characters in an iterator, as a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L652-L658","name":"String.Iterator.forward","line":652,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.forward","doc":"Moves the iterator's position several characters forward.\n\nThe resulting iterator is only valid if the number of characters to skip is less than or equal to\nthe number of characters left in the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.forward\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L643-L650","name":"String.Iterator.extract","line":643,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.extract","doc":"Extracts the substring between the positions of two iterators.\n\nReturns the empty string if the iterators are for different strings, or if the position of the first\niterator is past the position of the second iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L637-L641","name":"String.Iterator.toEnd","line":637,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.toEnd","doc":"Moves the iterator's position to the end of the string.\n\nNote that `i.toEnd.atEnd` is always `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L629-L635","name":"String.Iterator.setCurr","line":629,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.setCurr","doc":"Replaces the current character in the string.\n\nDoes nothing if the iterator is at the end of the string. If the iterator contains the only\nreference to its string, this function will mutate the string in-place instead of allocating a new\none. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">setCurr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L625-L627","name":"String.Iterator.next'","line":625,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.next'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.next'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.hasNext</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L621-L623","name":"String.Iterator.curr'","line":621,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.curr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.curr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.hasNext</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L617-L619","name":"String.Iterator.hasPrev","line":617,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.hasPrev","doc":"True if the position is not zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L613-L615","name":"String.Iterator.hasNext","line":613,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.hasNext","doc":"True if the iterator is not past the string's last character. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L609-L611","name":"String.Iterator.atEnd","line":609,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.atEnd","doc":"True if the iterator is past the string's last character. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L603-L607","name":"String.Iterator.prev","line":603,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.prev","doc":"Decreases the iterator's position.\n\nIf the position is zero, this function is the identity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L596-L601","name":"String.Iterator.next","line":596,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.next","doc":"Moves the iterator's position forward by one character, unconditionally.\n\nIt is only valid to call this function if the iterator is not at the end of the string, *i.e.*\n`Iterator.atEnd` is `false`; otherwise, the resulting iterator will be invalid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L590-L594","name":"String.Iterator.curr","line":590,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.curr","doc":"The character at the current position.\n\nOn an invalid position, returns `(default : Char)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L587-L588","name":"String.Iterator.pos","line":587,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.pos","doc":"The current position.\n\nThis position is not necessarily valid for the string, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent character is `(default : Char)`, similar to `String.get` on an invalid position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L583-L585","name":"String.Iterator.remainingBytes","line":583,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.remainingBytes","doc":"Number of bytes remaining in the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L580-L581","name":"String.Iterator.toString","line":580,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.toString","doc":"The string the iterator is for. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L576-L577","name":"String.Iterator.sizeOf_eq","line":576,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Iterator.sizeOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.sizeOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.s</span>.utf8ByteSize</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.i</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L572-L574","name":"String.instSizeOfIterator","line":572,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instSizeOfIterator","doc":"The size of a string iterator is the number of bytes remaining. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instSizeOfIterator\"><span class=\"name\">String</span>.<span class=\"name\">instSizeOfIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L569-L570","name":"String.iter","line":569,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.iter","doc":"Creates an iterator at the beginning of a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.iter\"><span class=\"name\">String</span>.<span class=\"name\">iter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L565-L567","name":"String.mkIterator","line":565,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.mkIterator","doc":"Creates an iterator at the beginning of a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L563-L563","name":"String.instInhabitedIterator","line":563,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instInhabitedIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedIterator\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L563-L563","name":"String.instDecidableEqIterator","line":563,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instDecidableEqIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableEqIterator\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableEqIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L562-L562","name":"String.Iterator.i","line":562,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.i","doc":"The current position.\n\nThis position is not necessarily valid for the string, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent character is `(default : Char)`, similar to `String.get` on an invalid position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.i\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">i</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L556-L556","name":"String.Iterator.s","line":556,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.s","doc":"The string the iterator is for. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.s\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L554-L554","name":"String.Iterator.mk","line":554,"kind":"ctor","docLink":"./Init/Data/String/Basic.html#String.Iterator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L539-L563","name":"String.Iterator","line":539,"kind":"structure","docLink":"./Init/Data/String/Basic.html#String.Iterator","doc":"Iterator over the characters (`Char`) of a `String`.\n\nTypically created by `s.iter`, where `s` is a `String`.\n\nAn iterator is *valid* if the position `i` is *valid* for the string `s`, meaning `0 ≤ i ≤ s.endPos`\nand `i` lies on a UTF8 byte boundary. If `i = s.endPos`, the iterator is at the end of the string.\n\nMost operations on iterators return arbitrary values if the iterator is not valid. The functions in\nthe `String.Iterator` API should rule out the creation of invalid iterators, with two exceptions:\n\n- `Iterator.next iter` is invalid if `iter` is already at the end of the string (`iter.atEnd` is\n  `true`), and\n- `Iterator.forward iter n`/`Iterator.nextn iter n` is invalid if `n` is strictly greater than the\n  number of remaining characters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L535-L537","name":"String.intercalate.go","line":535,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.intercalate.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.intercalate.go\"><span class=\"name\">String</span>.<span class=\"name\">intercalate</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(acc s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L532-L537","name":"String.intercalate","line":532,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.intercalate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.intercalate\"><span class=\"name\">String</span>.<span class=\"name\">intercalate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L529-L530","name":"String.singleton","line":529,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.singleton\"><span class=\"name\">String</span>.<span class=\"name\">singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L526-L527","name":"String.join","line":526,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.join\"><span class=\"name\">String</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L523-L524","name":"String.isEmpty","line":523,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isEmpty\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L520-L521","name":"String.pushn","line":520,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.pushn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pushn\"><span class=\"name\">String</span>.<span class=\"name\">pushn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L517-L518","name":"String.str","line":517,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.str\"><span class=\"name\">String</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L515-L515","name":"String.instAppend","line":515,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instAppend\"><span class=\"name\">String</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L513-L513","name":"String.instInhabited","line":513,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabited\"><span class=\"name\">String</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L497-L511","name":"String.splitOn","line":497,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.splitOn","doc":"Splits a string `s` on occurrences of the separator `sep`. When `sep` is empty, it returns `[s]`;\nwhen `sep` occurs in overlapping patterns, the first match is taken. There will always be exactly\n`n+1` elements in the returned list if there were `n` nonoverlapping matches of `sep` in the string.\nThe default separator is `\" \"`. The separators are not included in the returned substrings.\n\n```\n\"here is some text \".splitOn = [\"here\", \"is\", \"some\", \"text\", \"\"]\n\"here is some text \".splitOn \"some\" = [\"here is \", \" text \"]\n\"here is some text \".splitOn \"\" = [\"here is some text \"]\n\"ababacabac\".splitOn \"aba\" = [\"\", \"bac\", \"c\"]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitOn\"><span class=\"name\">String</span>.<span class=\"name\">splitOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot; &quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L451-L495","name":"String.splitOnAux","line":451,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.splitOnAux","doc":"Auxiliary for `splitOn`. Preconditions:\n* `sep` is not empty\n* `b <= i` are indexes into `s`\n* `j` is an index into `sep`, and not at the end\n\nIt represents the state where we have currently parsed some split parts into `r` (in reverse order),\n`b` is the beginning of the string / the end of the previous match of `sep`, and the first `j` bytes\nof `sep` match the bytes `i-j .. i` of `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitOnAux\"><span class=\"name\">String</span>.<span class=\"name\">splitOnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s sep : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b i j : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L448-L449","name":"String.split","line":448,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.split\"><span class=\"name\">String</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L435-L446","name":"String.splitAux","line":435,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.splitAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitAux\"><span class=\"name\">String</span>.<span class=\"name\">splitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L430-L432","name":"String.extract.go₂","line":430,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.extract.go₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract.go₂\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L426-L428","name":"String.extract.go₁","line":426,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.extract.go₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract.go₁\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L422-L432","name":"String.extract","line":422,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract\"><span class=\"name\">String</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L412-L418","name":"String.firstDiffPos.loop","line":412,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.firstDiffPos.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L409-L420","name":"String.firstDiffPos","line":409,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.firstDiffPos","doc":"Returns the first position where the two strings differ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.firstDiffPos\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L406-L407","name":"String.Pos.min","line":406,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Pos.min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.min\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">min</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L403-L404","name":"String.revFind","line":403,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revFind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revFind\"><span class=\"name\">String</span>.<span class=\"name\">revFind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L394-L401","name":"String.revFindAux","line":394,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revFindAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revFindAux\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L391-L392","name":"String.find","line":391,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.find","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.find\"><span class=\"name\">String</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L382-L389","name":"String.findAux","line":382,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.findAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.findAux\"><span class=\"name\">String</span>.<span class=\"name\">findAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L370-L380","name":"String.revPosOf","line":370,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revPosOf","doc":"Returns the position of the last occurrence of a character, `c`, in `s`.\nIf `s` does not contain `c`, returns `none`.\n\nExamples:\n* `\"abba\".posOf 'a' = some ⟨3⟩`\n* `\"abba\".posOf 'z' = none`\n* `\"L∃∀N\".posOf '∀' = some ⟨4⟩`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revPosOf\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L361-L368","name":"String.revPosOfAux","line":361,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revPosOfAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revPosOfAux\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L349-L359","name":"String.posOf","line":349,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.posOf","doc":"Returns the position of the first occurrence of a character, `c`, in `s`.\nIf `s` does not contain `c`, returns `s.endPos`.\n\nExamples:\n* `\"abba\".posOf 'a' = ⟨0⟩`\n* `\"abba\".posOf 'z' = ⟨4⟩`\n* `\"L∃∀N\".posOf '∀' = ⟨4⟩`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.posOf\"><span class=\"name\">String</span>.<span class=\"name\">posOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L340-L347","name":"String.posOfAux","line":340,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.posOfAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.posOfAux\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L336-L338","name":"String.prev_lt_of_pos","line":336,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.prev_lt_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">prev_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.prev</span> <span class=\"fn\">i</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L325-L334","name":"String.utf8PrevAux_lt_of_pos","line":325,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.utf8PrevAux_lt_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8PrevAux_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">String.utf8PrevAux</a> <span class=\"fn\">cs</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L322-L323","name":"String.lt_next","line":322,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.lt_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_next\"><span class=\"name\">String</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">i</span>)</span>.byteIdx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L319-L320","name":"String.Pos.ne_zero_of_lt","line":319,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Pos.ne_zero_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.ne_zero_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_zero_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L317-L317","name":"String.pos_add_char","line":317,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.pos_add_char","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos_add_char\"><span class=\"name\">String</span>.<span class=\"name\">pos_add_char</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L315-L315","name":"String.pos_lt_eq","line":315,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.pos_lt_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos_lt_eq\"><span class=\"name\">String</span>.<span class=\"name\">pos_lt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L313-L313","name":"String.one_le_csize","line":313,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.one_le_csize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.one_le_csize\"><span class=\"name\">String</span>.<span class=\"name\">one_le_csize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L310-L311","name":"Char.utf8Size_le_four","line":310,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Char.utf8Size_le_four","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.utf8Size_le_four\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_le_four</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">4</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L307-L308","name":"Char.utf8Size_pos","line":307,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Char.utf8Size_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.utf8Size_pos\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L285-L305","name":"String.next'","line":285,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.next'","doc":"Returns the next position in a string after position `p`.\nIf `p` is not a valid position, the result is unspecified.\n\nRequires evidence, `h`, that `p` is within bounds\ninstead of performing a runtime bounds check as in `next`.\n\nExamples:\n* `let abc := \"abc\"; abc.get (abc.next' 0 (by decide)) = 'b'`\n\nA typical pattern combines `next'` with a dependent if-else expression\nto avoid the overhead of an additional bounds check. For example:\n```\ndef next? (s: String) (p : String.Pos) : Option Char :=\n  if h : s.atEnd p then none else s.get (s.next' p h)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next'\"><span class=\"name\">String</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L258-L283","name":"String.get'","line":258,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get'","doc":"Returns the character at position `p` of a string.\nIf `p` is not a valid position, returns `(default : Char)`.\n\nRequires evidence, `h`, that `p` is within bounds\ninstead of performing a runtime bounds check as in `get`.\n\nExamples:\n* `\"abc\".get' 0 (by decide) = 'a'`\n* `let lean := \"L∃∀N\"; lean.get' (0 |> lean.next |> lean.next) (by decide) = '∀'`\n\nA typical pattern combines `get'` with a dependent if-else expression\nto avoid the overhead of an additional bounds check. For example:\n```\ndef getInBounds? (s : String) (p : String.Pos) : Option Char :=\n  if h : s.atEnd p then none else some (s.get' p h)\n```\n\nEven with evidence of `¬ s.atEnd p`,\n`p` may be invalid if a byte index points into the middle of a multi-byte UTF-8 character.\nFor example, `\"L∃∀N\".get' ⟨2⟩ (by decide) = (default : Char)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get'\"><span class=\"name\">String</span>.<span class=\"name\">get'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L242-L256","name":"String.atEnd","line":242,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.atEnd","doc":"Returns `true` if a specified position is greater than or equal to the position which\npoints to the end of a string. Otherwise, returns `false`.\n\nExamples:\nGiven `def abc := \"abc\"` and `def lean := \"L∃∀N\"`,\n* `(0 |> abc.next |> abc.next |> abc.atEnd) = false`\n* `(0 |> abc.next |> abc.next |> abc.next |> abc.next |> abc.atEnd) = true`\n* `(0 |> lean.next |> lean.next |> lean.next |> lean.next |> lean.atEnd) = true`\n\nBecause `\"L∃∀N\"` contains multi-byte characters, `lean.next (lean.next 0)` is not equal to `abc.next (abc.next 0)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L232-L240","name":"String.back","line":232,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.back","doc":"Returns the last character in `s`. If `s = \"\"`, returns `(default : Char)`.\n\nExamples:\n* `\"abc\".back = 'c'`\n* `\"\".back = (default : Char)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.back\"><span class=\"name\">String</span>.<span class=\"name\">back</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L222-L230","name":"String.front","line":222,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.front","doc":"Returns the first character in `s`. If `s = \"\"`, returns `(default : Char)`.\n\nExamples:\n* `\"abc\".front = 'a'`\n* `\"\".front = (default : Char)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.front\"><span class=\"name\">String</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L208-L220","name":"String.prev","line":208,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.prev","doc":"Returns the position in a string before a specified position, `p`. If `p = ⟨0⟩`, returns `0`.\nIf `p` is not a valid position, the result is unspecified.\n\nExamples:\nGiven `def abc := \"abc\"` and `def lean := \"L∃∀N\"`,\n* `abc.get (abc.endPos |> abc.prev) = 'c'`\n* `lean.get (lean.endPos |> lean.prev |> lean.prev |> lean.prev) = '∃'`\n* `\"L∃∀N\".prev ⟨3⟩` is unspecified, since byte 3 occurs in the middle of the multi-byte character `'∃'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev\"><span class=\"name\">String</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L202-L206","name":"String.utf8PrevAux","line":202,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8PrevAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L184-L200","name":"String.next","line":184,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.next","doc":"Returns the next position in a string after position `p`. If `p` is not a valid position or `p = s.endPos`,\nthe result is unspecified.\n\nExamples:\nGiven `def abc := \"abc\"` and `def lean := \"L∃∀N\"`,\n* `abc.get (0 |> abc.next) = 'b'`\n* `lean.get (0 |> lean.next |> lean.next) = '∀'`\n\nCases where the result is unspecified:\n* `\"abc\".next ⟨3⟩`, since `3 = s.endPos`\n* `\"L∃∀N\".next ⟨2⟩`, since `2` points into the middle of a multi-byte UTF-8 character\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next\"><span class=\"name\">String</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L173-L182","name":"String.modify","line":173,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.modify","doc":"Replaces the character at position `p` in the string `s` with the result of applying `f` to that character.\nIf `p` is an invalid position, the string is returned unchanged.\n\nExamples:\n* `abc.modify ⟨1⟩ Char.toUpper = \"aBc\"`\n* `abc.modify ⟨3⟩ Char.toUpper = \"abc\"`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.modify\"><span class=\"name\">String</span>.<span class=\"name\">modify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L154-L171","name":"String.set","line":154,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.set","doc":"Replaces the character at a specified position in a string with a new character. If the position\nis invalid, the string is returned unchanged.\n\nIf both the replacement character and the replaced character are ASCII characters and the string\nis not shared, destructive updates are used.\n\nExamples:\n* `\"abc\".set ⟨1⟩ 'B' = \"aBc\"`\n* `\"abc\".set ⟨3⟩ 'D' = \"abc\"`\n* `\"L∃∀N\".set ⟨4⟩ 'X' = \"L∃XN\"`\n\nBecause `'∃'` is a multi-byte character, the byte index `2` in `L∃∀N` is an invalid position,\nso `\"L∃∀N\".set ⟨2⟩ 'X' = \"L∃∀N\"`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set\"><span class=\"name\">String</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L149-L152","name":"String.utf8SetAux","line":149,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8SetAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8SetAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L133-L147","name":"String.get!","line":133,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get!","doc":"Returns the character at position `p` of a string. If `p` is not a valid position,\nreturns `(default : Char)` and produces a panic error message.\n\nExamples:\n* `\"abc\".get! ⟨1⟩ = 'b'`\n* `\"abc\".get! ⟨3⟩` panics\n\nPositions can also be invalid if a byte index points into the middle of a multi-byte UTF-8 character. For example,\n`\"L∃∀N\".get! ⟨2⟩` panics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get!\"><span class=\"name\">String</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L119-L131","name":"String.get?","line":119,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get?","doc":"Returns the character at position `p`. If `p` is not a valid position, returns `none`.\n\nExamples:\n* `\"abc\".get? ⟨1⟩ = some 'b'`\n* `\"abc\".get? ⟨3⟩ = none`\n\nPositions can also be invalid if a byte index points into the middle of a multi-byte UTF-8\ncharacter. For example, `\"L∃∀N\".get? ⟨2⟩ = none`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get?\"><span class=\"name\">String</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L115-L117","name":"String.utf8GetAux?","line":115,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8GetAux?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L97-L113","name":"String.get","line":97,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get","doc":"Returns the character at position `p` of a string. If `p` is not a valid position,\nreturns `(default : Char)`.\n\nSee `utf8GetAux` for the reference implementation.\n\nExamples:\n* `\"abc\".get ⟨1⟩ = 'b'`\n* `\"abc\".get ⟨3⟩ = (default : Char) = 'A'`\n\nPositions can also be invalid if a byte index points into the middle of a multi-byte UTF-8\ncharacter. For example,`\"L∃∀N\".get ⟨2⟩ = (default : Char) = 'A'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get\"><span class=\"name\">String</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L93-L95","name":"String.utf8GetAux","line":93,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8GetAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8GetAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L89-L91","name":"String.Pos.isValid.go","line":89,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Pos.isValid.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.isValid.go\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">isValid</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L83-L91","name":"String.Pos.isValid","line":83,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Pos.isValid","doc":"Returns true if `p` is a valid UTF-8 position in the string `s`, meaning that `p ≤ s.endPos`\nand `p` lies on a UTF-8 character boundary. This has an O(1) implementation in the runtime. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.isValid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">isValid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L71-L81","name":"String.toList","line":71,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toList","doc":"Converts a string to a list of characters.\n\nEven though the logical model of strings is as a structure that wraps a list of characters,\nthis operation takes time and space linear in the length of the string, because the compiler\nuses an optimized representation as dynamic arrays.\n\nExample: `\"abc\".toList = ['a', 'b', 'c']`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toList\"><span class=\"name\">String</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L59-L69","name":"String.append","line":59,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.append","doc":"Appends two strings.\n\nThe internal implementation uses dynamic arrays and will perform destructive updates\nif the string is not shared.\n\nExample: `\"abc\".append \"def\" = \"abcdef\"`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append\"><span class=\"name\">String</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L47-L57","name":"String.push","line":47,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.push","doc":"Pushes a character onto the end of a string.\n\nThe internal implementation uses dynamic arrays and will perform destructive updates\nif the string is not shared.\n\nExample: `\"abc\".push 'd' = \"abcd\"`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.push\"><span class=\"name\">String</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L35-L45","name":"String.length","line":35,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.length","doc":"Returns the length of a string in Unicode code points.\n\nExamples:\n* `\"\".length = 0`\n* `\"abc\".length = 3`\n* `\"L∃∀N\".length = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length\"><span class=\"name\">String</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L32-L33","name":"String.decLE","line":32,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.decLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decLE\"><span class=\"name\">String</span>.<span class=\"name\">decLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ s₂ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L29-L30","name":"String.instLE","line":29,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLE\"><span class=\"name\">String</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L27-L27","name":"String.le","line":27,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.le\"><span class=\"name\">String</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L23-L25","name":"String.decLt","line":23,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decLt\"><span class=\"name\">String</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ s₂ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L20-L21","name":"String.instLT","line":20,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLT\"><span class=\"name\">String</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L17-L18","name":"String.instOfNatPos","line":17,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instOfNatPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instOfNatPos\"><span class=\"name\">String</span>.<span class=\"name\">instOfNatPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Basic.lean#L12-L13","name":"List.asString","line":12,"kind":"def","docLink":"./Init/Data/String/Basic.html#List.asString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString\"><span class=\"name\">List</span>.<span class=\"name\">asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"}]}