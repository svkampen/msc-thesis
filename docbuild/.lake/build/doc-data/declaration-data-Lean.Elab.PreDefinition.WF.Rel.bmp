{"name":"Lean.Elab.PreDefinition.WF.Rel","instances":[],"imports":["Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Rename","Lean.Elab.SyntheticMVars","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.TerminationArgument","Lean.Meta.ArgsPacker"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/WF/Rel.lean#L49-L64","name":"Lean.Elab.WF.elabWFRel","line":49,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/Rel.html#Lean.Elab.WF.elabWFRel","doc":"If the `termArgs` map the packed argument `argType` to `β`, then this function passes to the\ncontinuation a value of type `WellFoundedRelation argType` that is derived from the instance\nfor `WellFoundedRelation β` using `invImage`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Rel.html#Lean.Elab.WF.elabWFRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">elabWFRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(preDefs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unaryPreDefName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prefixArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(termArgs : <a href=\"./Lean/Elab/PreDefinition/TerminationArgument.html#Lean.Elab.TerminationArguments\">Lean.Elab.TerminationArguments</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/WF/Rel.lean#L19-L47","name":"Lean.Elab.WF.checkCodomains","line":19,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/Rel.html#Lean.Elab.WF.checkCodomains","doc":"The termination arguments must not depend on the varying parameters of the function, and in\na mutual clique, they must be the same for all functions.\n\nThis ensures the preconditions for `ArgsPacker.uncurryND`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Rel.html#Lean.Elab.WF.checkCodomains\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">checkCodomains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(names : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prefixArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arities : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(termArgs : <a href=\"./Lean/Elab/PreDefinition/TerminationArgument.html#Lean.Elab.TerminationArguments\">Lean.Elab.TerminationArguments</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}