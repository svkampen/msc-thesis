{"name":"Mathlib.Data.Matrix.DMatrix","instances":[{"typeNames":["DMatrix"],"name":"DMatrix.instInhabited","className":"Inhabited"},{"typeNames":["DMatrix"],"name":"DMatrix.instAdd","className":"Add"},{"typeNames":["DMatrix"],"name":"DMatrix.instAddSemigroup","className":"AddSemigroup"},{"typeNames":["DMatrix"],"name":"DMatrix.instAddCommSemigroup","className":"AddCommSemigroup"},{"typeNames":["DMatrix"],"name":"DMatrix.instZero","className":"Zero"},{"typeNames":["DMatrix"],"name":"DMatrix.instAddMonoid","className":"AddMonoid"},{"typeNames":["DMatrix"],"name":"DMatrix.instAddCommMonoid","className":"AddCommMonoid"},{"typeNames":["DMatrix"],"name":"DMatrix.instNeg","className":"Neg"},{"typeNames":["DMatrix"],"name":"DMatrix.instSub","className":"Sub"},{"typeNames":["DMatrix"],"name":"DMatrix.instAddGroup","className":"AddGroup"},{"typeNames":["DMatrix"],"name":"DMatrix.instAddCommGroup","className":"AddCommGroup"},{"typeNames":["DMatrix"],"name":"DMatrix.instUnique","className":"Unique"},{"typeNames":["DMatrix"],"name":"DMatrix.instSubsingleton","className":"Subsingleton"},{"typeNames":["DMatrix"],"name":"DMatrix.subsingleton_of_empty_left","className":"Subsingleton"},{"typeNames":["DMatrix"],"name":"DMatrix.subsingleton_of_empty_right","className":"Subsingleton"}],"imports":["Init","Mathlib.Algebra.Group.Hom.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L160-L163","name":"AddMonoidHom.mapDMatrix_apply","line":160,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#AddMonoidHom.mapDMatrix_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#AddMonoidHom.mapDMatrix_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mapDMatrix_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#AddMonoidHom.mapDMatrix\">AddMonoidHom.mapDMatrix</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L152-L158","name":"AddMonoidHom.mapDMatrix","line":152,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#AddMonoidHom.mapDMatrix","doc":"The `AddMonoidHom` between spaces of dependently typed matrices\ninduced by an `AddMonoidHom` between their coefficients. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#AddMonoidHom.mapDMatrix\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mapDMatrix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L147-L148","name":"DMatrix.subsingleton_of_empty_right","line":147,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.subsingleton_of_empty_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.subsingleton_of_empty_right\"><span class=\"name\">DMatrix</span>.<span class=\"name\">subsingleton_of_empty_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L142-L145","name":"DMatrix.subsingleton_of_empty_left","line":142,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.subsingleton_of_empty_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.subsingleton_of_empty_left\"><span class=\"name\">DMatrix</span>.<span class=\"name\">subsingleton_of_empty_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L137-L140","name":"DMatrix.map_sub","line":137,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_sub\"><span class=\"name\">DMatrix</span>.<span class=\"name\">map_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">N</span>)</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">N</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L132-L135","name":"DMatrix.map_add","line":132,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_add\"><span class=\"name\">DMatrix</span>.<span class=\"name\">map_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">N</span>)</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">N</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L127-L130","name":"DMatrix.map_zero","line":127,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_zero\"><span class=\"name\">DMatrix</span>.<span class=\"name\">map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map\">DMatrix.map</a> <span class=\"fn\">0</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L123-L125","name":"DMatrix.sub_apply","line":123,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.sub_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.sub_apply\"><span class=\"name\">DMatrix</span>.<span class=\"name\">sub_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">N</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L119-L121","name":"DMatrix.add_apply","line":119,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.add_apply\"><span class=\"name\">DMatrix</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">N</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L116-L117","name":"DMatrix.neg_apply","line":116,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.neg_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.neg_apply\"><span class=\"name\">DMatrix</span>.<span class=\"name\">neg_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">M</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L113-L114","name":"DMatrix.zero_apply","line":113,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.zero_apply\"><span class=\"name\">DMatrix</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L105-L106","name":"DMatrix.instSubsingleton","line":105,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instSubsingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instSubsingleton\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instSubsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>), <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L102-L103","name":"DMatrix.instUnique","line":102,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instUnique\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L99-L100","name":"DMatrix.instAddCommGroup","line":99,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddCommGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddCommGroup\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAddCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L96-L97","name":"DMatrix.instAddGroup","line":96,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddGroup\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L93-L94","name":"DMatrix.instSub","line":93,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instSub\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L90-L91","name":"DMatrix.instNeg","line":90,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instNeg\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L87-L88","name":"DMatrix.instAddCommMonoid","line":87,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddCommMonoid\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAddCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L84-L85","name":"DMatrix.instAddMonoid","line":84,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddMonoid\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAddMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L81-L82","name":"DMatrix.instZero","line":81,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instZero\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instZero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L78-L79","name":"DMatrix.instAddCommSemigroup","line":78,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddCommSemigroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddCommSemigroup\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAddCommSemigroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L75-L76","name":"DMatrix.instAddSemigroup","line":75,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddSemigroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAddSemigroup\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAddSemigroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L72-L73","name":"DMatrix.instAdd","line":72,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instAdd\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L69-L70","name":"DMatrix.instInhabited","line":69,"kind":"instance","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.instInhabited\"><span class=\"name\">DMatrix</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L65-L67","name":"DMatrix.row","line":65,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.row","doc":"`DMatrix.row u` is the row matrix whose entries are given by `u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.row\"><span class=\"name\">DMatrix</span>.<span class=\"name\">row</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">n</span> <span class=\"fn\">fun (<span class=\"fn\">_i</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) =&gt; <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L61-L63","name":"DMatrix.col","line":61,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.col","doc":"`DMatrix.col u` is the column matrix whose entries are given by `u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.col\"><span class=\"name\">DMatrix</span>.<span class=\"name\">col</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">_j</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L58-L59","name":"DMatrix.«term_ᵀ»","line":58,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.«term_ᵀ»","doc":"The transpose of a dmatrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.«term_ᵀ»\"><span class=\"name\">DMatrix</span>.<span class=\"name\">«term_ᵀ»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L54-L56","name":"DMatrix.transpose","line":54,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.transpose","doc":"The transpose of a dmatrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.transpose\"><span class=\"name\">DMatrix</span>.<span class=\"name\">transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) =&gt; <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L49-L52","name":"DMatrix.map_map","line":49,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_map\"><span class=\"name\">DMatrix</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.map</span> <span class=\"fn\">f</span>)</span>.map</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.map</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\">n</span>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x_2</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L45-L47","name":"DMatrix.map_apply","line":45,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map_apply\"><span class=\"name\">DMatrix</span>.<span class=\"name\">map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">n</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.map</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L41-L43","name":"DMatrix.map","line":41,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map","doc":"`M.map f` is the DMatrix obtained by applying `f` to each entry of the matrix `M`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.map\"><span class=\"name\">DMatrix</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">⦃<span class=\"fn\">i</span> : <span class=\"fn\">m</span>⦄ → <span class=\"fn\">⦃<span class=\"fn\">j</span> : <span class=\"fn\">n</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L35-L37","name":"DMatrix.ext","line":35,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.ext\"><span class=\"name\">DMatrix</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">N</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L32-L33","name":"DMatrix.ext_iff","line":32,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix.ext_iff\"><span class=\"name\">DMatrix</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\">DMatrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">m</span>) (<span class=\"fn\">j</span> : <span class=\"fn\">n</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">N</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/DMatrix.lean#L15-L21","name":"DMatrix","line":15,"kind":"def","docLink":"./Mathlib/Data/Matrix/DMatrix.html#DMatrix","doc":"`DMatrix m n` is the type of dependently typed matrices\nwhose rows are indexed by the type `m` and\nwhose columns are indexed by the type `n`.\n\nIn most applications `m` and `n` are finite types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/DMatrix.html#DMatrix\"><span class=\"name\">DMatrix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u')</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Type</a> v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u u' v)</div></div>"}]}