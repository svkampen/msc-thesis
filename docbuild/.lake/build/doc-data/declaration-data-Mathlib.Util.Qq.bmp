{"name":"Mathlib.Util.Qq","instances":[],"imports":["Init","Mathlib.Init","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Qq.lean#L29-L29","name":"Qq.QuotedDefEq.rfl","line":29,"kind":"theorem","docLink":"./Mathlib/Util/Qq.html#Qq.QuotedDefEq.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.QuotedDefEq.rfl\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">«$a»</span> =Q <span class=\"fn\">«$a»</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Qq.lean#L19-L27","name":"Qq.inferTypeQ'","line":19,"kind":"def","docLink":"./Mathlib/Util/Qq.html#Qq.inferTypeQ'","doc":"Variant of `inferTypeQ` that yields a type in `Type u` rather than `Sort u`.\nThrows an error if the type is a `Prop` or if it's otherwise not possible to represent\nthe universe as `Type u` (for example due to universe level metavariables). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.inferTypeQ'\"><span class=\"name\">Qq</span>.<span class=\"name\">inferTypeQ'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>) ×\n    <span class=\"fn\">(<span class=\"fn\">α</span> :\n      <span class=\"fn\">let <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n      <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span></span>) ×\n      <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span>)</span></span></div></div>"}]}