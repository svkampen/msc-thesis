{"name":"Std.Tactic.BVDecide.Normalize.Equal","instances":[],"imports":["Init.Data.Bool","Init.Data.BitVec"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Normalize/Equal.lean#L28-L34","name":"Std.Tactic.BVDecide.Frontend.Normalize.BitVec.not_beq_not","line":28,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Equal.html#Std.Tactic.BVDecide.Frontend.Normalize.BitVec.not_beq_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Equal.html#Std.Tactic.BVDecide.Frontend.Normalize.BitVec.not_beq_not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_beq_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Normalize/Equal.lean#L24-L26","name":"Std.Tactic.BVDecide.Frontend.Normalize.Bool.not_beq_not","line":24,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Equal.html#Std.Tactic.BVDecide.Frontend.Normalize.Bool.not_beq_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Equal.html#Std.Tactic.BVDecide.Frontend.Normalize.Bool.not_beq_not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>)</span></span></div></div>"}]}