{"name":"Init.Data.Format.Syntax","instances":[{"typeNames":["Lean.Syntax"],"name":"Lean.Syntax.instToFormat","className":"Std.ToFormat"},{"typeNames":["Lean.Syntax"],"name":"Lean.Syntax.instToString","className":"ToString"},{"typeNames":["Lean.TSyntax"],"name":"Lean.Syntax.instToFormatTSyntax","className":"Std.ToFormat"},{"typeNames":["Lean.TSyntax"],"name":"Lean.Syntax.instToStringTSyntax","className":"ToString"}],"imports":["Init.Data.Format.Macro","Init.Data.Format.Instances","Init.Meta"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Format/Syntax.lean#L55-L55","name":"Lean.Syntax.instToStringTSyntax","line":55,"kind":"instance","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToStringTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToStringTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToStringTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Format/Syntax.lean#L54-L54","name":"Lean.Syntax.instToFormatTSyntax","line":54,"kind":"instance","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormatTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormatTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToFormatTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">Lean.SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Format/Syntax.lean#L52-L52","name":"Lean.Syntax.instToString","line":52,"kind":"instance","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Format/Syntax.lean#L51-L51","name":"Lean.Syntax.instToFormat","line":51,"kind":"instance","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Format/Syntax.lean#L45-L49","name":"Lean.Syntax.formatStx","line":45,"kind":"def","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStx","doc":"Pretty print the given syntax `stx` as a `Format`.\nNodes deeper than `maxDepth` are omitted.\nSetting the `showInfo` flag will also print the `SourceInfo` for each node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">formatStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(showInfo : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Format/Syntax.lean#L23-L43","name":"Lean.Syntax.formatStxAux","line":23,"kind":"opaque","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStxAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStxAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">formatStxAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(showInfo : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"}]}