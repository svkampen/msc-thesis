{"name":"Lean.Elab.DefView","instances":[{"typeNames":["Lean.Elab.DefKind"],"name":"Lean.Elab.instInhabitedDefKind","className":"Inhabited"},{"typeNames":["Lean.Elab.DefKind"],"name":"Lean.Elab.instBEqDefKind","className":"BEq"},{"typeNames":["Lean.Elab.DefViewElabHeaderData"],"name":"Lean.Elab.instInhabitedDefViewElabHeaderData","className":"Inhabited"},{"typeNames":["Lean.Elab.BodyProcessedSnapshot"],"name":"Lean.Elab.instNonemptyBodyProcessedSnapshot","className":"Nonempty"},{"typeNames":["Lean.Elab.BodyProcessedSnapshot"],"name":"Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.HeaderProcessedSnapshot"],"name":"Lean.Elab.instNonemptyHeaderProcessedSnapshot","className":"Nonempty"},{"typeNames":["Lean.Elab.HeaderProcessedSnapshot"],"name":"Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.DefParsed"],"name":"Lean.Elab.instNonemptyDefParsed","className":"Nonempty"},{"typeNames":["Lean.Elab.DefsParsedSnapshot"],"name":"Lean.Elab.instNonemptyDefsParsedSnapshot","className":"Nonempty"},{"typeNames":["Lean.Elab.DefsParsedSnapshot"],"name":"Lean.Elab.instTypeNameDefsParsedSnapshot","className":"TypeName"},{"typeNames":["Lean.Elab.DefsParsedSnapshot"],"name":"Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.DefView"],"name":"Lean.Elab.instInhabitedDefView","className":"Inhabited"}],"imports":["Lean.Elab.Command","Lean.Elab.DeclNameGen","Lean.Elab.DeclUtil"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L208-L223","name":"Lean.Elab.Command.mkDefView","line":208,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L199-L206","name":"Lean.Elab.Command.isDefLike","line":199,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.isDefLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.isDefLike\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">isDefLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L191-L197","name":"Lean.Elab.Command.mkDefViewOfExample","line":191,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfExample","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfExample</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L178-L189","name":"Lean.Elab.Command.mkDefViewOfOpaque","line":178,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfOpaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfOpaque</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L156-L176","name":"Lean.Elab.Command.mkDefViewOfInstance","line":156,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L150-L154","name":"Lean.Elab.Command.mkDefViewOfTheorem","line":150,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L143-L148","name":"Lean.Elab.Command.mkDefViewOfDef","line":143,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfDef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfDef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfDef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L135-L141","name":"Lean.Elab.Command.mkDefViewOfAbbrev","line":135,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfAbbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfAbbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfAbbrev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L129-L130","name":"Lean.Elab.DefView.isInstance","line":129,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.isInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.isInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">isInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(view : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L127-L127","name":"Lean.Elab.instInhabitedDefView","line":127,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L126-L126","name":"Lean.Elab.DefView.deriving?","line":126,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.deriving?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.deriving?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">deriving?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L125-L125","name":"Lean.Elab.DefView.headerSnap?","line":125,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerSnap?","doc":"Snapshot for incremental processing of this definition.\n\nInvariant: If the bundle's `old?` is set, then elaboration of the header is guaranteed to result\nin the same elaboration result and state, i.e. reuse is possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">headerSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Lean.Language.SnapshotBundle</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L118-L118","name":"Lean.Elab.DefView.value","line":118,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L117-L117","name":"Lean.Elab.DefView.type?","line":117,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.type?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L116-L116","name":"Lean.Elab.DefView.binders","line":116,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.binders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L115-L115","name":"Lean.Elab.DefView.declId","line":115,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.declId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.declId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">declId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L114-L114","name":"Lean.Elab.DefView.modifiers","line":114,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.modifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L113-L113","name":"Lean.Elab.DefView.headerRef","line":113,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerRef","doc":"An unstructured syntax object that comprises the \"header\" of the definition, i.e. everything up\nto the value. Used as a more specific ref for header elaboration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">headerRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L108-L108","name":"Lean.Elab.DefView.ref","line":108,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L107-L107","name":"Lean.Elab.DefView.kind","line":107,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L106-L106","name":"Lean.Elab.DefView.mk","line":106,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref headerRef : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(modifiers : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Lean.Elab.Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declId binders : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(headerSnap? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Lean.Language.SnapshotBundle</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(deriving? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">Lean.Elab.DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L106-L127","name":"Lean.Elab.DefView","line":106,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L100-L102","name":"Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","line":100,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">Lean.Elab.DefsParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L99-L99","name":"Lean.Elab.instTypeNameDefsParsedSnapshot","line":99,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instTypeNameDefsParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instTypeNameDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instTypeNameDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">Lean.Elab.DefsParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L99-L99","name":"Lean.Elab.instNonemptyDefsParsedSnapshot","line":99,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefsParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">Lean.Elab.DefsParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L98-L98","name":"Lean.Elab.DefsParsedSnapshot.defs","line":98,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.defs","doc":"Definitions of this mutual block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.defs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">defs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">Lean.Elab.DefsParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">Lean.Elab.DefParsed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L96-L96","name":"Lean.Elab.DefsParsedSnapshot.mk","line":96,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toSnapshot : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(defs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">Lean.Elab.DefParsed</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">Lean.Elab.DefsParsedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L95-L99","name":"Lean.Elab.DefsParsedSnapshot","line":95,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot","doc":"Snapshot after syntax tree has been split into separate mutual def headers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L93-L93","name":"Lean.Elab.instNonemptyDefParsed","line":93,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefParsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefParsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyDefParsed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">Lean.Elab.DefParsed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L92-L92","name":"Lean.Elab.DefParsed.headerProcessedSnap","line":92,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.headerProcessedSnap","doc":"Elaboration result, unless fatal exception occurred. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.headerProcessedSnap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">headerProcessedSnap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">Lean.Elab.DefParsed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L90-L90","name":"Lean.Elab.DefParsed.fullHeaderRef","line":90,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.fullHeaderRef","doc":"Unstructured syntax object comprising the full \"header\" of the definition from the modifiers\n(incl. docstring) up to the value, used for determining header elaboration reuse.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.fullHeaderRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">fullHeaderRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">Lean.Elab.DefParsed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L85-L85","name":"Lean.Elab.DefParsed.mk","line":85,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fullHeaderRef : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(headerProcessedSnap : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">Lean.Elab.DefParsed</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L84-L93","name":"Lean.Elab.DefParsed","line":84,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed","doc":"State before elaboration of a mutual definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L77-L82","name":"Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","line":77,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeHeaderProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L76-L76","name":"Lean.Elab.instNonemptyHeaderProcessedSnapshot","line":76,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyHeaderProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyHeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyHeaderProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L75-L75","name":"Lean.Elab.HeaderProcessedSnapshot.bodySnap","line":75,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodySnap","doc":"Result of body elaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodySnap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">bodySnap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L73-L73","name":"Lean.Elab.HeaderProcessedSnapshot.bodyStx","line":73,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodyStx","doc":"Syntax of definition body, for checking reuse of `bodySnap`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodyStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">bodyStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L71-L71","name":"Lean.Elab.HeaderProcessedSnapshot.tacSnap?","line":71,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacSnap?","doc":"Incremental execution of main tactic block, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">tacSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Lean.Elab.Tactic.TacticParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L69-L69","name":"Lean.Elab.HeaderProcessedSnapshot.tacStx?","line":69,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacStx?","doc":"Syntax of top-level tactic block if any, for checking reuse of `tacSnap?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacStx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">tacStx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L67-L67","name":"Lean.Elab.HeaderProcessedSnapshot.state","line":67,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.state","doc":"Resulting elaboration state, including any environment additions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.state\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Lean.Elab.Term.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L65-L65","name":"Lean.Elab.HeaderProcessedSnapshot.view","line":65,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.view","doc":"Elaboration results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.view\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">view</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L63-L63","name":"Lean.Elab.HeaderProcessedSnapshot.mk","line":63,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toSnapshot : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(view : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(state : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Lean.Elab.Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacStx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacSnap? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Lean.Elab.Tactic.TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bodyStx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bodySnap : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Lean.Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">Lean.Elab.HeaderProcessedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L62-L76","name":"Lean.Elab.HeaderProcessedSnapshot","line":62,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot","doc":"Snapshot after elaboration of a definition header. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L59-L60","name":"Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","line":59,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeBodyProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Lean.Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L58-L58","name":"Lean.Elab.instNonemptyBodyProcessedSnapshot","line":58,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyBodyProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyBodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyBodyProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L57-L57","name":"Lean.Elab.BodyProcessedSnapshot.value","line":57,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.value","doc":"Elaboration result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L55-L55","name":"Lean.Elab.BodyProcessedSnapshot.state","line":55,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.state","doc":"State after elaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.state\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Lean.Elab.Term.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L53-L53","name":"Lean.Elab.BodyProcessedSnapshot.mk","line":53,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toSnapshot : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(state : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Lean.Elab.Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">Lean.Elab.BodyProcessedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L52-L58","name":"Lean.Elab.BodyProcessedSnapshot","line":52,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot","doc":"Snapshot after processing of a definition body.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L47-L47","name":"Lean.Elab.instInhabitedDefViewElabHeaderData","line":47,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefViewElabHeaderData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L46-L46","name":"Lean.Elab.DefViewElabHeaderData.type","line":46,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.type","doc":"Type including parameters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L44-L44","name":"Lean.Elab.DefViewElabHeaderData.numParams","line":44,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.numParams","doc":"Number of parameters before `:`, it also includes auto-implicit parameters automatically added by Lean. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L42-L42","name":"Lean.Elab.DefViewElabHeaderData.binderIds","line":42,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.binderIds","doc":"Syntax objects for the binders occurring before `:`, we use them to populate the `InfoTree` when elaborating `valueStx`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.binderIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">binderIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L40-L40","name":"Lean.Elab.DefViewElabHeaderData.levelNames","line":40,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.levelNames","doc":"Universe level parameter names explicitly provided by the user. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L38-L38","name":"Lean.Elab.DefViewElabHeaderData.declName","line":38,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.declName","doc":"Full name for this declaration. This is the name that will be added to the `Environment`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L36-L36","name":"Lean.Elab.DefViewElabHeaderData.shortDeclName","line":36,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.shortDeclName","doc":"Short name. Recall that all declarations in Lean 4 are potentially recursive. We use `shortDeclName` to refer\nto them at `valueStx`, and other declarations in the same mutual block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.shortDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">shortDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L32-L32","name":"Lean.Elab.DefViewElabHeaderData.mk","line":32,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(shortDeclName declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderIds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">Lean.Elab.DefViewElabHeaderData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L31-L47","name":"Lean.Elab.DefViewElabHeaderData","line":31,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData","doc":"Header elaboration data of a `DefView`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L27-L29","name":"Lean.Elab.DefKind.isExample","line":27,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isExample","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isExample</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L21-L25","name":"Lean.Elab.DefKind.isDefOrAbbrevOrOpaque","line":21,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isDefOrAbbrevOrOpaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isDefOrAbbrevOrOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isDefOrAbbrevOrOpaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L17-L19","name":"Lean.Elab.DefKind.isTheorem","line":17,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L15-L15","name":"Lean.Elab.instBEqDefKind","line":15,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instBEqDefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L15-L15","name":"Lean.Elab.instInhabitedDefKind","line":15,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.abbrev","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.abbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.abbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">abbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.opaque","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.opaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.opaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.example","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.example","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.example\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">example</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.theorem","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.theorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.theorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">theorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.def","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.def\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">def</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">Lean.Elab.DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/DefView.lean#L13-L15","name":"Lean.Elab.DefKind","line":13,"kind":"inductive","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}