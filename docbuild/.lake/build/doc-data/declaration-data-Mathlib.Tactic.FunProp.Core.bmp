{"name":"Mathlib.Tactic.FunProp.Core","instances":[],"imports":["Init","Mathlib.Tactic.FunProp.Theorems","Mathlib.Tactic.FunProp.ToBatteries","Mathlib.Tactic.FunProp.Types","Mathlib.Lean.Expr.Basic","Batteries.Tactic.Exact"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L624-L658","name":"Mathlib.Meta.FunProp.funProp","line":624,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.funProp","doc":"Main `funProp` function. Returns proof of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.funProp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">funProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L618-L620","name":"Mathlib.Meta.FunProp.cacheFailure","line":618,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.cacheFailure","doc":"Cache for failed goals such that `fun_prop` can fail fast next time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.cacheFailure\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">cacheFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L613-L616","name":"Mathlib.Meta.FunProp.cacheResult","line":613,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.cacheResult","doc":"Cache result if it does not have any subgoals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.cacheResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">cacheResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L563-L610","name":"Mathlib.Meta.FunProp.constAppCase","line":563,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.constAppCase","doc":"Prove function property of `fun x => f x₁ ... xₙ` where `f` is declared function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.constAppCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">constAppCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L527-L560","name":"Mathlib.Meta.FunProp.fvarAppCase","line":527,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.fvarAppCase","doc":"Prove function property of `fun x => f x₁ ... xₙ` where `f` is free variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.fvarAppCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">fvarAppCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L471-L525","name":"Mathlib.Meta.FunProp.tryTheorems","line":471,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorems","doc":"Try to apply *function theorems* `thms` to `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thms : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Theorems.html#Mathlib.Meta.FunProp.FunctionTheorem\">Mathlib.Meta.FunProp.FunctionTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L418-L468","name":"Mathlib.Meta.FunProp.getLocalTheorems","line":418,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getLocalTheorems","doc":"Get candidate theorems from the local context for function property `funPropDecl` and\nfunction `funName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getLocalTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getLocalTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mainArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(appliedArgs : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Theorems.html#Mathlib.Meta.FunProp.FunctionTheorem\">Mathlib.Meta.FunProp.FunctionTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L398-L416","name":"Mathlib.Meta.FunProp.getDeclTheorems","line":398,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getDeclTheorems","doc":"Get candidate theorems from the environment for function property `funPropDecl` and\nfunction `funName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getDeclTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getDeclTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mainArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(appliedArgs : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Theorems.html#Mathlib.Meta.FunProp.FunctionTheorem\">Mathlib.Meta.FunProp.FunctionTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L386-L396","name":"Mathlib.Meta.FunProp.bvarAppCase","line":386,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.bvarAppCase","doc":"Prove function property of `fun f => f x₁ ... xₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.bvarAppCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">bvarAppCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L360-L383","name":"Mathlib.Meta.FunProp.removeArgRule","line":360,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.removeArgRule","doc":"Try to remove applied argument i.e. prove `P (fun x => f x y)` from `P (fun x => f x)`.\n\nFor example\n- `funPropDecl` is `FunPropDecl` for `Continuous`\n- `e = q(Continuous fun x => foo (bar x) y)`\n- `fData` contains info on `fun x => foo (bar x) y`\nThis tries to prove `Continuous fun x => foo (bar x) y` from `Continuous fun x => foo (bar x)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.removeArgRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">removeArgRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L341-L358","name":"Mathlib.Meta.FunProp.applyTransitionRules","line":341,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyTransitionRules","doc":"Prove function property of using *transition theorems*. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyTransitionRules\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyTransitionRules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L313-L339","name":"Mathlib.Meta.FunProp.applyMorRules","line":313,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyMorRules","doc":"Prove function property of using *morphism theorems*. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyMorRules\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyMorRules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L264-L310","name":"Mathlib.Meta.FunProp.letCase","line":264,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.letCase","doc":"Try to prove `e = q(P (fun x => let y := φ x; ψ x y)`.\n\nFor example,\n- `funPropDecl` is `FunPropDecl` for `Continuous`\n- `e = q(Continuous fun x => let y := φ x; ψ x y)`\n- `f = q(fun x => let y := φ x; ψ x y)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.letCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">letCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L241-L261","name":"Mathlib.Meta.FunProp.applyPiRule","line":241,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyPiRule","doc":"Try to prove `e` using *pi lambda theorem*.\n\nFor example, `e = q(Continuous fun x y => f x y)` and `funPropDecl` is `FunPropDecl` for\n`Continuous`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyPiRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyPiRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L217-L239","name":"Mathlib.Meta.FunProp.applyCompRule","line":217,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyCompRule","doc":"Try to prove `e` using *composition lambda theorem*.\n\nFor example, `e = q(Continuous fun x => f (g x))` and `funPropDecl` is `FunPropDecl` for\n`Continuous`\n\nYou also have to provide the functions `f` and `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyCompRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyCompRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e f g : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L203-L215","name":"Mathlib.Meta.FunProp.applyApplyRule","line":203,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyApplyRule","doc":"Try to prove `e` using using *apply lambda theorem*.\n\nFor example, `e = q(Continuous fun f => f x)` and `funPropDecl` is `FunPropDecl` for `Continuous`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyApplyRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyApplyRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L183-L201","name":"Mathlib.Meta.FunProp.applyConstRule","line":183,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyConstRule","doc":"Try to prove `e` using using *constant lambda theorem*.\n\nFor example, `e = q(Continuous fun x => y)` and `funPropDecl` is `FunPropDecl` for `Continuous`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyConstRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyConstRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L163-L181","name":"Mathlib.Meta.FunProp.applyIdRule","line":163,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyIdRule","doc":"Try to prove `e` using using *identity lambda theorem*.\n\nFor example, `e = q(Continuous fun x => x)` and `funPropDecl` is `FunPropDecl` for `Continuous`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyIdRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyIdRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L157-L160","name":"Mathlib.Meta.FunProp.tryTheorem?","line":157,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorem?","doc":"Try to apply a theorem `thmOrigin` to the goal `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorem?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheorem?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newMCtxDepth : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L118-L154","name":"Mathlib.Meta.FunProp.tryTheoremWithHint?","line":118,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremWithHint?","doc":"Try to apply a theorem provided some of the theorem arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremWithHint?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheoremWithHint?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hint : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newMCtxDepth : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L100-L115","name":"Mathlib.Meta.FunProp.tryTheoremCore","line":100,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremCore","doc":"Try to apply theorem - core function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheoremCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val type e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L42-L97","name":"Mathlib.Meta.FunProp.synthesizeArgs","line":42,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeArgs","doc":"Synthesize arguments `xs` either with typeclass synthesis, with `fun_prop` or with\ndischarger. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">synthesizeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/Core.lean#L22-L38","name":"Mathlib.Meta.FunProp.synthesizeInstance","line":22,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeInstance","doc":"Synthesize instance of type `type` and\n1. assign it to `x` if `x` is meta variable\n2. check it is equal to `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">synthesizeInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}