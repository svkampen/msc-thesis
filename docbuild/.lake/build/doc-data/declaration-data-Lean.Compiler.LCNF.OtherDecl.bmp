{"name":"Lean.Compiler.LCNF.OtherDecl","instances":[],"imports":["Lean.Compiler.LCNF.BaseTypes","Lean.Compiler.LCNF.MonoTypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/OtherDecl.lean#L12-L19","name":"Lean.Compiler.LCNF.getOtherDeclType","line":12,"kind":"def","docLink":"./Lean/Compiler/LCNF/OtherDecl.html#Lean.Compiler.LCNF.getOtherDeclType","doc":"Return the LCNF type for constructors, inductive types, and foreign functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/OtherDecl.html#Lean.Compiler.LCNF.getOtherDeclType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getOtherDeclType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span> := <span class=\"fn\">[]</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}