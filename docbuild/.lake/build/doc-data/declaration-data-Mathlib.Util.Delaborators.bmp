{"name":"Mathlib.Util.Delaborators","instances":[],"imports":["Init","Mathlib.Init","Lean.PrettyPrinter.Delaborator.Builtins"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L161-L167","name":"delab_not_in","line":161,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#delab_not_in","doc":"Delaborator for `∉`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#delab_not_in\"><span class=\"name\">delab_not_in</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L98-L156","name":"exists_delab","line":98,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#exists_delab","doc":"Delaborator for existential quantifier, including extended binders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#exists_delab\"><span class=\"name\">exists_delab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L76-L91","name":"PiNotation.delabPi'","line":76,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.delabPi'","doc":"Override the Lean 4 pi notation delaborator with one that uses `Π` and prints\ncute binders such as `∀ ε > 0`.\nNote that this takes advantage of the fact that `(x : α) → p x` notation is\nnever used for propositions, so we can match on this result and rewrite it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.delabPi'\"><span class=\"name\">PiNotation</span>.<span class=\"name\">delabPi'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L46-L74","name":"PiNotation.delabPi","line":46,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.delabPi","doc":"Override the Lean 4 pi notation delaborator with one that prints cute binders\nsuch as `∀ ε > 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.delabPi\"><span class=\"name\">PiNotation</span>.<span class=\"name\">delabPi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L40-L44","name":"PiNotation.replacePiNotation","line":40,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.replacePiNotation","doc":"Since pi notation and forall notation are interchangeable, we can\nparse it by simply using the pre-existing forall parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.replacePiNotation\"><span class=\"name\">PiNotation</span>.<span class=\"name\">replacePiNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L31-L34","name":"PiNotation.«termΠ__,_»","line":31,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.«termΠ__,_»","doc":"Dependent function type (a \"pi type\"). The notation `Π x ∈ s, β x` is\nshort for `Π x, x ∈ s → β x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.«termΠ__,_»\"><span class=\"name\">PiNotation</span>.<span class=\"name\">«termΠ__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/Delaborators.lean#L22-L29","name":"PiNotation.piNotation","line":22,"kind":"def","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.piNotation","doc":"Dependent function type (a \"pi type\"). The notation `Π x : α, β x` can\nalso be written as `(x : α) → β x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.piNotation\"><span class=\"name\">PiNotation</span>.<span class=\"name\">piNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"}]}