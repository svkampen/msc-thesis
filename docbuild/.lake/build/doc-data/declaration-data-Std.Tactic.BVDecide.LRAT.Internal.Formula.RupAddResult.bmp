{"name":"Std.Tactic.BVDecide.LRAT.Internal.Formula.RupAddResult","instances":[],"imports":["Std.Tactic.BVDecide.LRAT.Internal.Formula.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L1317-L1338","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupAdd_result","line":1317,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupAdd_result","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupAdd_result\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">rupAdd_result</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">Std.Tactic.BVDecide.LRAT.Internal.DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_readyForRupAdd : <span class=\"fn\"><span class=\"fn\">f</span>.ReadyForRupAdd</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupAddSuccess : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.performRupAdd</span> <span class=\"fn\">c</span> <span class=\"fn\">rupHints</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">f'</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.insert</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L1278-L1315","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments_performRupCheck","line":1278,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments_performRupCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments_performRupCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">restoreAssignments_performRupCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.assignments</span>\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.snd</span>.fst</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span>.assignments</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L1196-L1276","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments_performRupCheck_base_case","line":1196,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments_performRupCheck_base_case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.restoreAssignments_performRupCheck_base_case\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">restoreAssignments_performRupCheck_base_case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_f'_def : <span class=\"fn\"><span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f'_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f'</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits_arr : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits_arr_def : <span class=\"fn\"><span class=\"fn\">derivedLits_arr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toList</span> := <span class=\"fn\">derivedLits</span> }</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits_satisfies_invariant :\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\"><span class=\"fn\">f'</span>.assignments</span> <span class=\"fn\">f'_assignments_size</span> <span class=\"fn\">derivedLits</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_derivedLits_arr_nodup : <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">derivedLits_arr</span>.size</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">derivedLits_arr</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">derivedLits_arr</span>[<span class=\"fn\">j</span>]</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ClearInsertInductionMotive</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\">derivedLits_arr</span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">f'</span>.assignments</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L1102-L1194","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_derivedLits","line":1102,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_derivedLits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_derivedLits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">nodup_derivedLits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f'_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits_satisfies_invariant :\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.assignments</span> <span class=\"fn\">f'_assignments_size</span>\n    <span class=\"fn\">derivedLits</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits_arr : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits_arr_def : <span class=\"fn\"><span class=\"fn\">derivedLits_arr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toList</span> := <span class=\"fn\">derivedLits</span> }</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">derivedLits_arr</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i_ne_j : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">derivedLits_arr</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">derivedLits_arr</span>[<span class=\"fn\">j</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L1082-L1100","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.derivedLitsInvariant_performRupCheck","line":1082,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.derivedLitsInvariant_performRupCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.derivedLitsInvariant_performRupCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">derivedLitsInvariant_performRupCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f'_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">rupCheckRes</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rupCheckRes</span>.fst</span>.assignments</span> <span class=\"fn\">f'_assignments_size</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rupCheckRes</span>.snd</span>.fst</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L1035-L1080","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.derivedLitsInvariant_confirmRupHint","line":1035,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.derivedLitsInvariant_confirmRupHint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.derivedLitsInvariant_confirmRupHint\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">derivedLitsInvariant_confirmRupHint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">rupHints</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc :\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih : <span class=\"fn\">∃ (<span class=\"fn\">hsize</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.fst</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\"><span class=\"fn\">acc</span>.fst</span> <span class=\"fn\">hsize</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.snd</span>.fst</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">rupHint_res</span> := <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint</a> <span class=\"fn\"><span class=\"fn\">f</span>.clauses</span> <span class=\"fn\">acc</span> <span class=\"fn\"><span class=\"fn\">rupHints</span>[<span class=\"fn\">i</span>]</span></span>;\n<span class=\"fn\">∃ (<span class=\"fn\">hsize</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rupHint_res</span>.fst</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\"><span class=\"fn\">rupHint_res</span>.fst</span> <span class=\"fn\">hsize</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rupHint_res</span>.snd</span>.fst</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L772-L1033","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint_preserves_invariant_helper","line":772,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint_preserves_invariant_helper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint_preserves_invariant_helper\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">confirmRupHint_preserves_invariant_helper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc :\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsize : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.fst</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\"><span class=\"fn\">acc</span>.fst</span> <span class=\"fn\">hsize</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.snd</span>.fst</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment.hasAssignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment.hasAssignment</a> <span class=\"fn\"><span class=\"fn\">l</span>.snd</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.fst</span>[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.fst</span>.val</span>]!</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let_fun <span class=\"fn\">hsize'</span> := <span class=\"fn\">⋯</span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.DerivedLitsInvariant</span> <span class=\"fn\">f_assignments_size</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.fst</span>.modify</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.fst</span>.val</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment.addAssignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment.addAssignment</a> <span class=\"fn\"><span class=\"fn\">l</span>.snd</span>)</span>)</span> <span class=\"fn\">hsize'</span>\n  <span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.snd</span>.fst</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L750-L770","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.DerivedLitsInvariant","line":750,"kind":"def","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.DerivedLitsInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.DerivedLitsInvariant\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">DerivedLitsInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fassignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L739-L748","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_performRupCheck","line":739,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_performRupCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_performRupCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_assignments_performRupCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L730-L737","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignemnts_confirmRupHint","line":730,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignemnts_confirmRupHint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignemnts_confirmRupHint\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_assignemnts_confirmRupHint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(clauses : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">Std.Tactic.BVDecide.LRAT.Internal.DefaultClause</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(derivedLits : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b1 b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint</a> <span class=\"fn\">clauses</span> <span class=\"fn\">(<span class=\"fn\">assignments</span>, <span class=\"fn\">derivedLits</span>, <span class=\"fn\">b1</span>, <span class=\"fn\">b2</span>)</span>\n        <span class=\"fn\">id</span>)</span>.fst</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">assignments</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L726-L728","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratUnits_performRupCheck","line":726,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratUnits_performRupCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratUnits_performRupCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">ratUnits_performRupCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L722-L724","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupUnits_performRupCheck","line":722,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupUnits_performRupCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupUnits_performRupCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">rupUnits_performRupCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.rupUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.rupUnits</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L718-L720","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses_performRupCheck","line":718,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses_performRupCheck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses_performRupCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clauses_performRupCheck</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupHints : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.performRupCheck</span> <span class=\"fn\">rupHints</span>)</span>.fst</span>.clauses</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.clauses</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L693-L716","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRup","line":693,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRup\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clear_insertRup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_readyForRupAdd : <span class=\"fn\"><span class=\"fn\">f</span>.ReadyForRupAdd</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.clearRupUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L515-L691","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insert_inductive_case","line":515,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insert_inductive_case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insert_inductive_case\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clear_insert_inductive_case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units_nodup : <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">units</span>.size</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">units</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">units</span>[<span class=\"fn\">j</span>]</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">units</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ClearInsertInductionMotive</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\">units</span> <span class=\"fn\">(↑<span class=\"fn\">idx</span>)</span> <span class=\"fn\">assignments</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ClearInsertInductionMotive</span> <span class=\"fn\">f_assignments_size</span> <span class=\"fn\">units</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">idx</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>\n  <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clearUnit\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clearUnit</a> <span class=\"fn\">assignments</span> <span class=\"fn\"><span class=\"fn\">units</span>[<span class=\"fn\">idx</span>]</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L505-L513","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRup_base_case","line":505,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRup_base_case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clear_insertRup_base_case\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clear_insertRup_base_case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_readyForRupAdd : <span class=\"fn\"><span class=\"fn\">f</span>.ReadyForRupAdd</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.ClearInsertInductionMotive</span> <span class=\"fn\">⋯</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.rupUnits</span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.assignments</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L484-L503","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ClearInsertInductionMotive","line":484,"kind":"def","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ClearInsertInductionMotive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ClearInsertInductionMotive\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">ClearInsertInductionMotive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L475-L482","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_clearUnit_foldl","line":475,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_clearUnit_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_clearUnit_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_clearUnit_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_preserves_size : <span class=\"fn\">∀ (<span class=\"fn\">arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">arr</span> <span class=\"fn\">a</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">arr</span>.size</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">assignments</span> <span class=\"fn\">l</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">assignments</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L471-L473","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_clearUnit","line":471,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_clearUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_clearUnit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_clearUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clearUnit\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clearUnit</a> <span class=\"fn\">assignments</span> <span class=\"fn\">l</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">assignments</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L400-L469","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_insertRupUnits","line":400,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_insertRupUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.nodup_insertRupUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">nodup_insertRupUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_readyForRupAdd : <span class=\"fn\"><span class=\"fn\">f</span>.ReadyForRupAdd</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.rupUnits</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.rupUnits</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.rupUnits</span>[<span class=\"fn\">j</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L381-L398","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertRupUnits","line":381,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertRupUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertRupUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">insertUnitInvariant_insertRupUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_readyForRupAdd : <span class=\"fn\"><span class=\"fn\">f</span>.ReadyForRupAdd</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">assignments</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.assignments</span>;\n<span class=\"fn\">let_fun <span class=\"fn\">hsize</span> := <span class=\"fn\">⋯</span>;\n<span class=\"fn\">let <span class=\"fn\">rupUnits</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.rupUnits</span>;\n<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant</a> <span class=\"fn\"><span class=\"fn\">f</span>.assignments</span> <span class=\"fn\">⋯</span> <span class=\"fn\">rupUnits</span> <span class=\"fn\">assignments</span> <span class=\"fn\">hsize</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L361-L379","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertUnit_fold","line":361,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertUnit_fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertUnit_fold\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">insertUnitInvariant_insertUnit_fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(assignments0 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments0_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">assignments0</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rupUnits : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant</a> <span class=\"fn\">assignments0</span> <span class=\"fn\">assignments0_size</span> <span class=\"fn\">rupUnits</span> <span class=\"fn\">assignments</span>\n    <span class=\"fn\">assignments_size</span></span> →\n  <span class=\"fn\">let <span class=\"fn\">update_res</span> :=\n    <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit</span> <span class=\"fn\">(<span class=\"fn\">rupUnits</span>, <span class=\"fn\">assignments</span>, <span class=\"fn\">b</span>)</span> <span class=\"fn\">units</span></span>;\n  <span class=\"fn\">let_fun <span class=\"fn\">update_res_size</span> := <span class=\"fn\">⋯</span>;\n  <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant</a> <span class=\"fn\">assignments0</span> <span class=\"fn\">assignments0_size</span> <span class=\"fn\"><span class=\"fn\">update_res</span>.fst</span>\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">update_res</span>.snd</span>.fst</span> <span class=\"fn\">update_res_size</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L74-L359","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertUnit","line":74,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnitInvariant_insertUnit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">insertUnitInvariant_insertUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(assignments0 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments0_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">assignments0</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(foundContradiction : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant</a> <span class=\"fn\">assignments0</span> <span class=\"fn\">assignments0_size</span> <span class=\"fn\">units</span> <span class=\"fn\">assignments</span>\n    <span class=\"fn\">assignments_size</span></span> →\n  <span class=\"fn\">let <span class=\"fn\">update_res</span> :=\n    <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit</a> <span class=\"fn\">(<span class=\"fn\">units</span>, <span class=\"fn\">assignments</span>, <span class=\"fn\">foundContradiction</span>)</span> <span class=\"fn\">l</span></span>;\n  <span class=\"fn\">let_fun <span class=\"fn\">update_res_size</span> := <span class=\"fn\">⋯</span>;\n  <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant</a> <span class=\"fn\">assignments0</span> <span class=\"fn\">assignments0_size</span> <span class=\"fn\"><span class=\"fn\">update_res</span>.fst</span>\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">update_res</span>.snd</span>.fst</span> <span class=\"fn\">update_res_size</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L57-L72","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant","line":57,"kind":"def","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.InsertUnitInvariant\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">InsertUnitInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(original_assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(original_assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">original_assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments_size : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L52-L55","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratUnits_insertRupUnits","line":52,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratUnits_insertRupUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ratUnits_insertRupUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">ratUnits_insertRupUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.ratUnits</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.ratUnits</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L47-L50","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses_insertRupUnits","line":47,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses_insertRupUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses_insertRupUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">clauses_insertRupUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.clauses</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.clauses</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L41-L45","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_insertRupUnits","line":41,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_insertRupUnits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_assignments_insertRupUnits\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_assignments_insertRupUnits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Std.Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.insertRupUnits</span> <span class=\"fn\">units</span>)</span>.fst</span>.assignments</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.assignments</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L29-L39","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_insertUnit_fold","line":29,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_insertUnit_fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_insertUnit_fold\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_insertUnit_fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{units : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(unitsAcc : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit</span> <span class=\"fn\">(<span class=\"fn\">unitsAcc</span>, <span class=\"fn\">assignments</span>, <span class=\"fn\">b</span>)</span> <span class=\"fn\">units</span>)</span>.snd</span>.fst</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">assignments</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean#L23-L27","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_insertUnit","line":23,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_insertUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.size_insertUnit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">size_insertUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(units : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Std.Tactic.BVDecide.LRAT.Internal.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Std.Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">Std.Tactic.BVDecide.LRAT.Internal.PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit\">Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit</a> <span class=\"fn\">(<span class=\"fn\">units</span>, <span class=\"fn\">assignments</span>, <span class=\"fn\">b</span>)</span> <span class=\"fn\">l</span>)</span>.snd</span>.fst</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">assignments</span>.size</span></span></div></div>"}]}