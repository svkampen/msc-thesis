{"name":"Lean.Meta.CtorRecognizer","instances":[],"imports":["Lean.Meta.LitValues","Lean.Meta.Offset"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L71-L92","name":"Lean.Meta.constructorApp'?","line":71,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp'?","doc":"Similar to `constructorApp?`, but on failure it puts `e` in WHNF and tries again.\nIt also `isOffset?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp'?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">constructorApp'?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L58-L69","name":"Lean.Meta.constructorApp?","line":58,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp?","doc":"If `e` is a constructor application, return a pair containing the corresponding `ConstructorVal` and the constructor\napplication arguments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">constructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L51-L56","name":"Lean.Meta.isConstructorApp'","line":51,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'","doc":"Returns `true` if `isConstructorApp e` or `isConstructorApp (← whnf e)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L44-L49","name":"Lean.Meta.isConstructorApp","line":44,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp","doc":"Returns `true`, if `e` is constructor application of builtin literal defeq to\na constructor application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L36-L42","name":"Lean.Meta.isConstructorApp'?","line":36,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'?","doc":"Similar to `isConstructorApp?`, but uses `whnf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp'?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L29-L34","name":"Lean.Meta.isConstructorApp?","line":29,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp?","doc":"If `e` is a constructor application or a builtin literal defeq to a constructor application,\nthen return the corresponding `ConstructorVal`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/CtorRecognizer.lean#L17-L27","name":"Lean.Meta.isConstructorAppCore?","line":17,"kind":"def","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorAppCore?","doc":"If `e` is a constructor application,\nthen return the corresponding `ConstructorVal`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorAppCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorAppCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span></div></div>"}]}