{"name":"Std.Tactic.BVDecide.Reflect","instances":[],"imports":["Init.Data.BitVec","Std.Tactic.BVDecide.LRAT.Checker","Std.Tactic.BVDecide.LRAT.Parser","Std.Tactic.BVDecide.Bitblast","Std.Sat.AIG.CNF","Std.Sat.AIG.RelabelNat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L189-L197","name":"Std.Tactic.BVDecide.Reflect.unsat_of_verifyBVExpr_eq_true","line":189,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.unsat_of_verifyBVExpr_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.unsat_of_verifyBVExpr_eq_true\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">unsat_of_verifyBVExpr_eq_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(bv : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">Std.Tactic.BVDecide.BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyBVExpr\">Std.Tactic.BVDecide.Reflect.verifyBVExpr</a> <span class=\"fn\">bv</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">bv</span>.Unsat</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L183-L187","name":"Std.Tactic.BVDecide.Reflect.verifyBVExpr","line":183,"kind":"def","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyBVExpr","doc":"Verify that `cert` is an UNSAT proof for the SAT problem obtained by bitblasting `bv`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyBVExpr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">verifyBVExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(bv : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">Std.Tactic.BVDecide.BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cert : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L175-L181","name":"Std.Tactic.BVDecide.Reflect.verifyCert_correct","line":175,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert_correct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert_correct\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">verifyCert_correct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cnf : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">Std.Sat.CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cert : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert\">Std.Tactic.BVDecide.Reflect.verifyCert</a> <span class=\"fn\">cnf</span> <span class=\"fn\">cert</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">cnf</span>.Unsat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L167-L173","name":"Std.Tactic.BVDecide.Reflect.verifyCert","line":167,"kind":"def","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert","doc":"Verify that a proof certificate is valid for a given formula.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">verifyCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cnf : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">Std.Sat.CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cert : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L160-L161","name":"Std.Tactic.BVDecide.Reflect.Bool.lemma_congr","line":160,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.lemma_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.lemma_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">lemma_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x x' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L157-L158","name":"Std.Tactic.BVDecide.Reflect.Bool.false_of_eq_true_of_eq_false","line":157,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.false_of_eq_true_of_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.false_of_eq_true_of_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">false_of_eq_true_of_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L152-L155","name":"Std.Tactic.BVDecide.Reflect.Bool.ite_congr","line":152,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.ite_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.ite_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(discr lhs rhs discr' lhs' rhs' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">discr'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">discr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h3 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(if <span class=\"fn\"><span class=\"fn\">discr'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> then <span class=\"fn\">lhs'</span> else <span class=\"fn\">rhs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> then <span class=\"fn\">lhs</span> else <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L148-L150","name":"Std.Tactic.BVDecide.Reflect.Bool.imp_congr","line":148,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.imp_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.imp_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">imp_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L144-L146","name":"Std.Tactic.BVDecide.Reflect.Bool.beq_congr","line":144,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.beq_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.beq_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">beq_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L140-L142","name":"Std.Tactic.BVDecide.Reflect.Bool.xor_congr","line":140,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.xor_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.xor_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">xor_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">rhs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L136-L138","name":"Std.Tactic.BVDecide.Reflect.Bool.and_congr","line":136,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.and_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.and_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L133-L134","name":"Std.Tactic.BVDecide.Reflect.Bool.not_congr","line":133,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.not_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.not_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x x' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L125-L127","name":"Std.Tactic.BVDecide.Reflect.BitVec.if_false","line":125,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.if_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.if_false\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">if_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(if <span class=\"fn\"><span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> then <span class=\"fn\">lhs</span> else <span class=\"fn\">rhs</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L121-L123","name":"Std.Tactic.BVDecide.Reflect.BitVec.if_true","line":121,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.if_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.if_true\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">if_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(if <span class=\"fn\"><span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> then <span class=\"fn\">lhs</span> else <span class=\"fn\">rhs</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">lhs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L117-L119","name":"Std.Tactic.BVDecide.Reflect.BitVec.umod_congr","line":117,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.umod_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.umod_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">umod_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L113-L115","name":"Std.Tactic.BVDecide.Reflect.BitVec.udiv_congr","line":113,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.udiv_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.udiv_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">udiv_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L110-L111","name":"Std.Tactic.BVDecide.Reflect.BitVec.ofBool_congr","line":110,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ofBool_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ofBool_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">e'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e'</span>.getLsbD</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L106-L108","name":"Std.Tactic.BVDecide.Reflect.BitVec.getLsbD_congr","line":106,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.getLsbD_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.getLsbD_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e e' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">e'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e'</span>.getLsbD</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.getLsbD</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L102-L104","name":"Std.Tactic.BVDecide.Reflect.BitVec.ult_congr","line":102,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ult_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ult_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ult_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span>.ult</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.ult</span> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L98-L100","name":"Std.Tactic.BVDecide.Reflect.BitVec.beq_congr","line":98,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.beq_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.beq_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L94-L96","name":"Std.Tactic.BVDecide.Reflect.BitVec.mul_congr","line":94,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.mul_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.mul_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L90-L92","name":"Std.Tactic.BVDecide.Reflect.BitVec.rotateRight_congr","line":90,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateRight_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateRight_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">rotateRight_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.rotateRight</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.rotateRight</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L86-L88","name":"Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr","line":86,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">rotateLeft_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.rotateLeft</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.rotateLeft</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L82-L84","name":"Std.Tactic.BVDecide.Reflect.BitVec.extract_congr","line":82,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.extract_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.extract_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extract_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(start len w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">start</span> <span class=\"fn\">len</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">start</span> <span class=\"fn\">len</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L78-L80","name":"Std.Tactic.BVDecide.Reflect.BitVec.replicate_congr","line":78,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.replicate_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.replicate_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">replicate_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr expr' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">expr'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">expr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.replicate\">BitVec.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">expr'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.replicate\">BitVec.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">expr</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L73-L76","name":"Std.Tactic.BVDecide.Reflect.BitVec.append_congr","line":73,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.append_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.append_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lw rw : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs lhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">lw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">rw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L69-L71","name":"Std.Tactic.BVDecide.Reflect.BitVec.signExtend_congr","line":69,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.signExtend_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.signExtend_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">n</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L65-L67","name":"Std.Tactic.BVDecide.Reflect.BitVec.zeroExtend_congr","line":65,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.zeroExtend_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.zeroExtend_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\">BitVec.zeroExtend</a> <span class=\"fn\">n</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\">BitVec.zeroExtend</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L61-L63","name":"Std.Tactic.BVDecide.Reflect.BitVec.add_congr","line":61,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.add_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.add_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L57-L59","name":"Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRight_congr","line":57,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRight_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRight_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">arithShiftRight_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.sshiftRight</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.sshiftRight</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L52-L55","name":"Std.Tactic.BVDecide.Reflect.BitVec.shiftRight_congr","line":52,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftRight_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftRight_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftRight_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">rhs'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L48-L50","name":"Std.Tactic.BVDecide.Reflect.BitVec.shiftRightNat_congr","line":48,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftRightNat_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftRightNat_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftRightNat_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L43-L46","name":"Std.Tactic.BVDecide.Reflect.BitVec.shiftLeft_congr","line":43,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftLeft_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftLeft_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">rhs'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L39-L41","name":"Std.Tactic.BVDecide.Reflect.BitVec.shiftLeftNat_congr","line":39,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftLeftNat_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftLeftNat_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftNat_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L36-L37","name":"Std.Tactic.BVDecide.Reflect.BitVec.not_congr","line":36,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.not_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.not_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x x' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L32-L34","name":"Std.Tactic.BVDecide.Reflect.BitVec.xor_congr","line":32,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.xor_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.xor_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">xor_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L28-L30","name":"Std.Tactic.BVDecide.Reflect.BitVec.or_congr","line":28,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.or_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.or_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">or_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">rhs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Reflect.lean#L24-L26","name":"Std.Tactic.BVDecide.Reflect.BitVec.and_congr","line":24,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.and_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.and_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs lhs' rhs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">rhs</span></span></span></div></div>"}]}