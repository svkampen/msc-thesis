{"name":"Mathlib.Tactic.Bound.Attribute","instances":[],"imports":["Init","Mathlib.Algebra.Group.ZeroOne","Mathlib.Tactic.Bound.Init","Qq","Aesop"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L139-L140","name":"Mathlib.Tactic.Bound.attrBound_forward","line":139,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.attrBound_forward","doc":"Attribute for `forward` rules for the `bound` tactic.\n\n`@[bound_forward]` lemmas should produce inequalities given other hypotheses that might be in the\ncontext. A typical example is exposing an inequality field of a structure, such as\n`HasPowerSeriesOnBall.r_pos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.attrBound_forward\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">attrBound_forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L78-L88","name":"Mathlib.Tactic.Bound.scoreToConfig","line":78,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.scoreToConfig","doc":"Map a score to either `norm apply` or `safe apply <priority>` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.scoreToConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">scoreToConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(score : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Frontend/RuleExpr.html#Aesop.Frontend.RuleConfig\">Aesop.Frontend.RuleConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L71-L76","name":"Mathlib.Tactic.Bound.declPriority","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.declPriority","doc":"Map a theorem decl to a score (0 means `norm apply`, `0 <` means `safe apply`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.declPriority\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">declPriority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L63-L69","name":"Mathlib.Tactic.Bound.typePriority.checkResult","line":63,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.typePriority.checkResult","doc":"Insist that our conclusion is an inequality "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.typePriority.checkResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">typePriority</span>.<span class=\"name\">checkResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L60-L61","name":"Mathlib.Tactic.Bound.typePriority.argPriority","line":60,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.typePriority.argPriority","doc":"Score the type of argument `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.typePriority.argPriority\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">typePriority</span>.<span class=\"name\">argPriority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L53-L69","name":"Mathlib.Tactic.Bound.typePriority","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.typePriority","doc":"Map a type to a score "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.typePriority\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">typePriority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L38-L51","name":"Mathlib.Tactic.Bound.hypPriority","line":38,"kind":"opaque","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.hypPriority","doc":"Map a hypothesis type to a score "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.hypPriority\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">hypPriority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hyp : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L34-L36","name":"Mathlib.Tactic.Bound.ineqPriority","line":34,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.ineqPriority","doc":"Map the arguments of an inequality expression to a score "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.ineqPriority\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">ineqPriority</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Bound/Attribute.lean#L28-L32","name":"Mathlib.Tactic.Bound.isZero","line":28,"kind":"def","docLink":"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.isZero","doc":"Check if an expression is zero "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Bound/Attribute.html#Mathlib.Tactic.Bound.isZero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bound</span>.<span class=\"name\">isZero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}