{"name":"Aesop.RulePattern","instances":[{"typeNames":["Aesop.RulePattern"],"name":"Aesop.instInhabitedRulePattern","className":"Inhabited"},{"typeNames":["Aesop.RulePatternInstantiation"],"name":"Aesop.instRulePatternInstantiationInhabited","className":"Inhabited"},{"typeNames":["Aesop.RulePatternInstantiation"],"name":"Aesop.instRulePatternInstantiationBEq","className":"BEq"},{"typeNames":["Aesop.RulePatternInstantiation"],"name":"Aesop.instRulePatternInstantiationHashable","className":"Hashable"},{"typeNames":["Aesop.RulePatternInstantiation"],"name":"Aesop.instEmptyCollectionRulePatternInstantiation","className":"EmptyCollection"}],"imports":["Init","Aesop.Rule.Name","Aesop.Tracing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L196-L214","name":"Aesop.RulePattern.elab.abstractMVars'","line":196,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab.abstractMVars'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab.abstractMVars'\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span>.<span class=\"name\">abstractMVars'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L190-L193","name":"Aesop.RulePattern.elab.setMVarUserNamesToUniqueNames","line":190,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab.setMVarUserNamesToUniqueNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab.setMVarUserNamesToUniqueNames\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span>.<span class=\"name\">setMVarUserNamesToUniqueNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L184-L188","name":"Aesop.RulePattern.elab.fvarsToMVars","line":184,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab.fvarsToMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab.fvarsToMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span>.<span class=\"name\">fvarsToMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L174-L214","name":"Aesop.RulePattern.elab","line":174,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ruleType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L156-L170","name":"Aesop.RulePattern.specializeRule","line":156,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.specializeRule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.specializeRule\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">specializeRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inst : <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rule : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L140-L154","name":"Aesop.RulePattern.openRuleType","line":140,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.openRuleType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.openRuleType\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">openRuleType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inst : <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L129-L138","name":"Aesop.RulePattern.getInstantiation","line":129,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.getInstantiation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.getInstantiation\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">getInstantiation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inst : <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIndex : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L122-L125","name":"Aesop.matchRulePatterns","line":122,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.matchRulePatterns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.matchRulePatterns\"><span class=\"name\">Aesop</span>.<span class=\"name\">matchRulePatterns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pats : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">Aesop.RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">Aesop.RuleName</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L87-L120","name":"Aesop.matchRulePatternsCore","line":87,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.matchRulePatternsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.matchRulePatternsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">matchRulePatternsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pats : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">Aesop.RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">Aesop.RuleName</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a>)</span>)</span> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L81-L83","name":"Aesop.forEachExprInGoal","line":81,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.forEachExprInGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.forEachExprInGoal\"><span class=\"name\">Aesop</span>.<span class=\"name\">forEachExprInGoal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">ω</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L77-L79","name":"Aesop.forEachExprInGoal'","line":77,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.forEachExprInGoal'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.forEachExprInGoal'\"><span class=\"name\">Aesop</span>.<span class=\"name\">forEachExprInGoal'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">ω</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L65-L75","name":"Aesop.forEachExprInGoalCore","line":65,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.forEachExprInGoalCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.forEachExprInGoalCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">forEachExprInGoalCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">ω</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCacheT\">Lean.MonadCacheT</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L57-L58","name":"Aesop.instEmptyCollectionRulePatternInstantiation","line":57,"kind":"instance","docLink":"./Aesop/RulePattern.html#Aesop.instEmptyCollectionRulePatternInstantiation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instEmptyCollectionRulePatternInstantiation\"><span class=\"name\">Aesop</span>.<span class=\"name\">instEmptyCollectionRulePatternInstantiation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L54-L55","name":"Aesop.RulePatternInstantiation.toArray","line":54,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation.toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation.toArray\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePatternInstantiation</span>.<span class=\"name\">toArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L52-L52","name":"Aesop.instRulePatternInstantiationHashable","line":52,"kind":"instance","docLink":"./Aesop/RulePattern.html#Aesop.instRulePatternInstantiationHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instRulePatternInstantiationHashable\"><span class=\"name\">Aesop</span>.<span class=\"name\">instRulePatternInstantiationHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L52-L52","name":"Aesop.instRulePatternInstantiationBEq","line":52,"kind":"instance","docLink":"./Aesop/RulePattern.html#Aesop.instRulePatternInstantiationBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instRulePatternInstantiationBEq\"><span class=\"name\">Aesop</span>.<span class=\"name\">instRulePatternInstantiationBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L52-L52","name":"Aesop.instRulePatternInstantiationInhabited","line":52,"kind":"instance","docLink":"./Aesop/RulePattern.html#Aesop.instRulePatternInstantiationInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instRulePatternInstantiationInhabited\"><span class=\"name\">Aesop</span>.<span class=\"name\">instRulePatternInstantiationInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\">Aesop.RulePatternInstantiation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L51-L52","name":"Aesop.RulePatternInstantiation","line":51,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePatternInstantiation\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePatternInstantiation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L45-L47","name":"Aesop.RulePattern.open","line":45,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.open","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.open\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">open</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L41-L41","name":"Aesop.instInhabitedRulePattern","line":41,"kind":"instance","docLink":"./Aesop/RulePattern.html#Aesop.instInhabitedRulePattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instInhabitedRulePattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRulePattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L40-L40","name":"Aesop.RulePattern.argMap","line":40,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.argMap","doc":"A partial map from the index set `{0, ..., n-1}` into `{0, ..., k-1}`. If\n`argMap[i] = j`, this indicates that when matching against the rule type, the\ninstantiation `tⱼ` of `yⱼ` should be substituted for `xᵢ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.argMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">argMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L34-L34","name":"Aesop.RulePattern.pattern","line":34,"kind":"def","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.pattern","doc":"An expression of the form `λ y₀ ... yₖ, p` representing the\npattern.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.pattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">pattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L29-L29","name":"Aesop.RulePattern.mk","line":29,"kind":"ctor","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argMap : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">Aesop.RulePattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RulePattern.lean#L14-L41","name":"Aesop.RulePattern","line":14,"kind":"structure","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern","doc":"A rule pattern. For a rule of type `∀ (x₀ : T₀) ... (xₙ : Tₙ), U`, a valid rule\npattern is an expression `p` such that `x₀ : T₁, ..., xₙ : Tₙ ⊢ p : P`. Let\n`y₀, ..., yₖ` be those variables `xᵢ` on which `p` depends. When `p` matches an\nexpression `e`, this means that `e` is defeq to `p` (where each `yᵢ` is replaced\nwith a metavariable) and we obtain a substitution\n\n    {y₀ ↦ t₀ : T₀, y₁ ↦ t₁ : T₁[x₀ := t₀], ...}\n\nNow suppose we want to match the above rule type against a type `V` (where `V`\nis the target for an `apply`-like rule and a hypothesis type for a\n`forward`-like rule). To that end, we take `U` and replace each `xᵢ` where\n`xᵢ = yⱼ` with `tⱼ` and each `xᵢ` with `xᵢ ≠ yⱼ ∀ j` with a metavariable. The\nresulting expression `U'` is then matched against `V`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}