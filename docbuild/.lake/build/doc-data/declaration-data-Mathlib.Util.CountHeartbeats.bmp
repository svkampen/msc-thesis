{"name":"Mathlib.Util.CountHeartbeats","instances":[],"imports":["Init","Mathlib.Init","Lean.Util.Heartbeats","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L155-L174","name":"Mathlib.CountHeartbeats.commandCount_heartbeats!_In__","line":155,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandCount_heartbeats!_In__","doc":"`count_heartbeats! in cmd` runs a command `10` times, reporting the range in heartbeats, and the\nstandard deviation. The command `count_heartbeats! n in cmd` runs it `n` times instead.\n\nExample usage:\n```\ncount_heartbeats! in\ndef f := 37\n```\ndisplays the info message `Min: 7 Max: 8 StdDev: 14%`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandCount_heartbeats!_In__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">commandCount_heartbeats!_In__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L145-L153","name":"Mathlib.CountHeartbeats.elabForHeartbeats","line":145,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.elabForHeartbeats","doc":"Run a command, optionally restoring the original state, and report just the number of heartbeats.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.elabForHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">elabForHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cmd : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(revert : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L120-L143","name":"Mathlib.CountHeartbeats.commandGuard_min_heartbeats_In__","line":120,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandGuard_min_heartbeats_In__","doc":"Guard the minimal number of heartbeats used in the enclosed command.\n\nThis is most useful in the context of debugging and minimizing an example of a slow declaration.\nBy guarding the number of heartbeats used in the slow declaration,\nan error message will be generated if a minimization step makes the slow behaviour go away.\n\nThe default number of minimal heartbeats is the value of `maxHeartbeats` (typically 200000).\nAlternatively, you can specify a number of heartbeats to guard against,\nusing the syntax `guard_min_heartbeats n in cmd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandGuard_min_heartbeats_In__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">commandGuard_min_heartbeats_In__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L83-L118","name":"Mathlib.CountHeartbeats.commandCount_heartbeatsIn__","line":83,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandCount_heartbeatsIn__","doc":"Count the heartbeats used in the enclosed command.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that that internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandCount_heartbeatsIn__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">commandCount_heartbeatsIn__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L69-L81","name":"Mathlib.CountHeartbeats.tacticCount_heartbeats!_In__","line":69,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.tacticCount_heartbeats!_In__","doc":"`count_heartbeats! in tac` runs a tactic 10 times, counting the heartbeats used, and logs the range\nand standard deviation. The tactic `count_heartbeats! n in tac` runs it `n` times instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.tacticCount_heartbeats!_In__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">tacticCount_heartbeats!_In__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L65-L67","name":"Mathlib.CountHeartbeats.tacticCount_heartbeats_","line":65,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.tacticCount_heartbeats_","doc":"Count the heartbeats used by a tactic, e.g.: `count_heartbeats simp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.tacticCount_heartbeats_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">tacticCount_heartbeats_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L56-L63","name":"Mathlib.CountHeartbeats.logVariation","line":56,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.logVariation","doc":"Given a `List Nat`, log an info message with the minimum, maximum, and standard deviation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.logVariation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">logVariation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(counts : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L42-L54","name":"Mathlib.CountHeartbeats.variation","line":42,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.variation","doc":"Given a `List Nat`, return the minimum, maximum, and standard deviation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.variation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">variation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(counts : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CountHeartbeats.lean#L31-L40","name":"Mathlib.CountHeartbeats.runTacForHeartbeats","line":31,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.runTacForHeartbeats","doc":"Run a tactic, optionally restoring the original state, and report just the number of heartbeats.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.runTacForHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">runTacForHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tac : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(revert : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"}]}