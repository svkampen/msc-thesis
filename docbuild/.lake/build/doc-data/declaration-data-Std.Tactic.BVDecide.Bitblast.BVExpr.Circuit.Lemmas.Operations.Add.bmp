{"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Add","instances":[],"imports":["Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Basic","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Operations.Add"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L205-L233","name":"Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastAdd","line":205,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastAdd\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">denote_blastAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.BinaryRefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.rhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">rhs</span>)</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L137-L201","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_denote_eq","line":137,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_denote_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_denote_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go_denote_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cin : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhsExpr rhsExpr : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhsExpr</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhsExpr</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcin : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">cin</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">curr</span> <span class=\"fn\">lhsExpr</span> <span class=\"fn\">rhsExpr</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx1 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">idx</span></span> →\n  <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n      <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.aig</span>,\n        <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx1</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">(<span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx1</span></span> }</span>⟧</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a>       <span class=\"fn\">(<span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx1</span></span> }</span>⟧</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">idx</span> <span class=\"fn\">lhsExpr</span> <span class=\"fn\">rhsExpr</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L130-L135","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.atLeastTwo_eq_halfAdder","line":130,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.atLeastTwo_eq_halfAdder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.atLeastTwo_eq_halfAdder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">atLeastTwo_eq_halfAdder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhsBit rhsBit carry : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhsBit</span>.atLeastTwo</span> <span class=\"fn\">rhsBit</span> <span class=\"fn\">carry</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhsBit</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">rhsBit</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">carry</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">lhsBit</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhsBit</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L121-L128","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_get","line":121,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_get\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cin : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span>)</span>.cast</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L92-L119","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_get_aux","line":92,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_get_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_get_aux\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go_get_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cin : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfoo : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span>)</span>.cast</span> <span class=\"fn\">hfoo</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L76-L90","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_denote_mem_prefix","line":76,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_denote_mem_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_denote_mem_prefix\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go_denote_mem_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cin : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstart : <span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">hstart</span> }</span> }</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L62-L74","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.mkFullAdder_denote_mem_prefix","line":62,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.mkFullAdder_denote_mem_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.mkFullAdder_denote_mem_prefix\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">mkFullAdder_denote_mem_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstart : <span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdder\">Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdder</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">hstart</span> }</span> }</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L36-L60","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.denote_mkFullAdderCarry","line":36,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.denote_mkFullAdderCarry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.denote_mkFullAdderCarry\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">denote_mkFullAdderCarry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry\">Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.lhs</span> }</span>⟧</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.rhs</span> }</span>⟧</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a>       <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.cin</span> }</span>⟧</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a>     <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.lhs</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.rhs</span> }</span>⟧</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.lean#L26-L34","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.denote_mkFullAdderOut","line":26,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.denote_mkFullAdderOut","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.denote_mkFullAdderOut\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">denote_mkFullAdderOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut\">Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.lhs</span> }</span>⟧</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.rhs</span> }</span>⟧</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a>     <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.cin</span> }</span>⟧</span>)</span></span></div></div>"}]}