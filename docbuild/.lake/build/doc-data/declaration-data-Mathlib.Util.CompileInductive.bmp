{"name":"Mathlib.Util.CompileInductive","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.Command","Lean.Compiler.CSimpAttr","Lean.Util.FoldConsts","Lean.Data.AssocList"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L219-L227","name":"Mathlib.Util.«commandCompile_inductive%_»","line":219,"kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.«commandCompile_inductive%_»","doc":"`compile_inductive% Foo` creates compiled code for the recursor `Foo.rec`,\nso that `Foo.rec` can be used in a definition\nwithout having to mark the definition as `noncomputable`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.«commandCompile_inductive%_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">«commandCompile_inductive%_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L197-L215","name":"Mathlib.Util.compileSizeOf","line":197,"kind":"opaque","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileSizeOf","doc":"Compiles the `sizeOf` auxiliary functions. It also recursively compiles any inductives required to\ncompile the `sizeOf` definition (because `sizeOf` definitions depend on `T.rec`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileSizeOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">compileSizeOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(iv : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L190-L195","name":"Mathlib.Util.compileInductive","line":190,"kind":"opaque","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileInductive","doc":"Generate compiled code for the recursor for `iv`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileInductive\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">compileInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(iv : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(warn : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L125-L186","name":"Mathlib.Util.compileInductiveOnly","line":125,"kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileInductiveOnly","doc":"Generate compiled code for the recursor for `iv`, excluding the `sizeOf` function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileInductiveOnly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">compileInductiveOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(iv : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(warn : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L81-L93","name":"Mathlib.Util.«commandCompile_def%_»","line":81,"kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.«commandCompile_def%_»","doc":"`compile_def% Foo.foo` adds compiled code for the definition `Foo.foo`.\nThis can be used for type class projections or definitions like `List._sizeOf_1`,\nfor which Lean does not generate compiled code by default\n(since it is not used 99% of the time).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.«commandCompile_def%_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">«commandCompile_def%_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L76-L79","name":"Mathlib.Util.isCompiled","line":76,"kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.isCompiled","doc":"Returns true if the given declaration has already been compiled, either directly or via a\n`@[csimp]` lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.isCompiled\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">isCompiled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L51-L72","name":"Mathlib.Util.compileDefn","line":51,"kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileDefn","doc":"Compile the definition `dv` by adding a second definition `dv✝` with the same body,\nand registering a `csimp`-lemma `dv = dv✝`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.compileDefn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">compileDefn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(dv : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Util/CompileInductive.lean#L33-L41","name":"Mathlib.Util.mkRecNames","line":33,"kind":"def","docLink":"./Mathlib/Util/CompileInductive.html#Mathlib.Util.mkRecNames","doc":"Returns the names of the recursors for a nested or mutual inductive,\nusing the `all` and `numMotives` arguments from `RecursorVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CompileInductive.html#Mathlib.Util.mkRecNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">mkRecNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numMotives : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"}]}