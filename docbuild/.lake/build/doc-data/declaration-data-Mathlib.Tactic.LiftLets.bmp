{"name":"Mathlib.Tactic.LiftLets","instances":[],"imports":["Init","Mathlib.Tactic.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L105-L120","name":"Mathlib.Tactic.lift_lets","line":105,"kind":"def","docLink":"./Mathlib/Tactic/LiftLets.html#Mathlib.Tactic.lift_lets","doc":"Lift all the `let` bindings in the type of an expression as far out as possible.\n\nWhen applied to the main goal, this gives one the ability to `intro` embedded `let` expressions.\nFor example,\n```lean\nexample : (let x := 1; x) = 1 := by\n  lift_lets\n  -- ⊢ let x := 1; x = 1\n  intro x\n  sorry\n```\n\nDuring the lifting process, let bindings are merged if they have the same type and value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Mathlib.Tactic.lift_lets\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">lift_lets</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L103-L103","name":"Mathlib.Tactic.elabConfig","line":103,"kind":"def","docLink":"./Mathlib/Tactic/LiftLets.html#Mathlib.Tactic.elabConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Mathlib.Tactic.elabConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig\">Lean.Expr.LiftLetsConfig</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L90-L99","name":"Lean.Expr.liftLets","line":90,"kind":"def","docLink":"./Mathlib/Tactic/LiftLets.html#Lean.Expr.liftLets","doc":"Take all the `let`s in an expression and move them outwards as far as possible.\nAll top-level `let`s are added to the local context, and then `f` is called with the list\nof local bindings (each an fvar) and the new expression.\n\nLet bindings are merged if they have the same type and value.\n\nUse `e.liftLets mkLetFVars` to get a defeq expression with all `let`s lifted as far as possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.liftLets\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">liftLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig\">Lean.Expr.LiftLetsConfig</a> := <span class=\"fn\">{ <span class=\"fn\">proofs</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">merge</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L24-L24","name":"Lean.Expr.LiftLetsConfig.merge","line":24,"kind":"def","docLink":"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig.merge","doc":"Whether to merge let bindings if they have the same type and value.\nThis test is by syntactic equality, not definitional equality.\nThe default is to merge. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig\">Lean.Expr.LiftLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L20-L20","name":"Lean.Expr.LiftLetsConfig.proofs","line":20,"kind":"def","docLink":"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig.proofs","doc":"Whether to lift lets out of proofs. The default is not to. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig\">Lean.Expr.LiftLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L18-L18","name":"Lean.Expr.LiftLetsConfig.mk","line":18,"kind":"ctor","docLink":"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(proofs merge : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig\">Lean.Expr.LiftLetsConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/LiftLets.lean#L17-L24","name":"Lean.Expr.LiftLetsConfig","line":17,"kind":"structure","docLink":"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig","doc":"Configuration for `Lean.Expr.liftLets` and the `lift_lets` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/LiftLets.html#Lean.Expr.LiftLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">LiftLetsConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}