{"name":"Mathlib.GroupTheory.FreeGroup.Basic","instances":[{"typeNames":["FreeGroup"],"name":"FreeGroup.instOne","className":"One"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instZero","className":"Zero"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instInhabited","className":"Inhabited"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instInhabited","className":"Inhabited"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instUniqueOfIsEmpty","className":"Unique"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instUniqueOfIsEmpty","className":"Unique"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instMul","className":"Mul"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instAdd","className":"Add"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instInv","className":"Inv"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instNeg","className":"Neg"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instGroup","className":"Group"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instAddGroup","className":"AddGroup"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instMonad","className":"Monad"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instMonad","className":"Monad"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instLawfulMonad","className":"LawfulMonad"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instLawfulMonad","className":"LawfulMonad"}],"imports":["Init","Mathlib.Algebra.BigOperators.Group.List","Mathlib.Algebra.Group.Subgroup.Ker"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L878-L878","name":"FreeAddGroup.instLawfulMonad","line":878,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instLawfulMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instLawfulMonad\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L878-L893","name":"FreeGroup.instLawfulMonad","line":878,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instLawfulMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instLawfulMonad\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L874-L874","name":"FreeAddGroup.neg_bind","line":874,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">neg_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L874-L876","name":"FreeGroup.inv_bind","line":874,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">inv_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L870-L870","name":"FreeAddGroup.add_bind","line":870,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">add_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L870-L872","name":"FreeGroup.mul_bind","line":870,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mul_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L866-L866","name":"FreeAddGroup.zero_bind","line":866,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">zero_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L866-L868","name":"FreeGroup.one_bind","line":866,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">one_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L862-L862","name":"FreeAddGroup.pure_bind","line":862,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.pure_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.pure_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L862-L864","name":"FreeGroup.pure_bind","line":862,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pure_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pure_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L858-L858","name":"FreeAddGroup.map_neg","line":858,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_neg\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L858-L860","name":"FreeGroup.map_inv","line":858,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L854-L854","name":"FreeAddGroup.map_add","line":854,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_add\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L854-L856","name":"FreeGroup.map_mul","line":854,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_mul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L850-L850","name":"FreeAddGroup.map_zero","line":850,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_zero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L850-L852","name":"FreeGroup.map_one","line":850,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L846-L846","name":"FreeAddGroup.map_pure","line":846,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_pure\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L846-L848","name":"FreeGroup.map_pure","line":846,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_pure\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L839-L839","name":"FreeAddGroup.induction_on","line":839,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.induction_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.induction_on\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cp : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Ci : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cm : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L839-L844","name":"FreeGroup.induction_on","line":839,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.induction_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.induction_on\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cp : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Ci : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cm : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L833-L833","name":"FreeAddGroup.instMonad","line":833,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instMonad\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L833-L837","name":"FreeGroup.instMonad","line":833,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMonad\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L807-L827","name":"FreeGroup.freeGroupUnitEquivInt","line":807,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupUnitEquivInt","doc":"The bijection between the free group on a singleton, and the integers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupUnitEquivInt\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupUnitEquivInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L799-L800","name":"FreeAddGroup.freeAddGroupEmptyEquivAddUnit","line":799,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit","doc":"The bijection between the additive free group on the empty type, and a type with one\nelement."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupEmptyEquivAddUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L798-L805","name":"FreeGroup.freeGroupEmptyEquivUnit","line":798,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupEmptyEquivUnit","doc":"The bijection between the free group on the empty type, and a type with one element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupEmptyEquivUnit\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupEmptyEquivUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L792-L794","name":"FreeGroup.sum.map_inv","line":792,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.sum</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L788-L790","name":"FreeGroup.sum.map_one","line":788,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L784-L786","name":"FreeGroup.sum.map_mul","line":784,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_mul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.sum</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.sum</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L778-L780","name":"FreeGroup.sum.of","line":778,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L774-L776","name":"FreeGroup.sum_mk","line":774,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span>)</span> <span class=\"fn\">L</span>)</span>.sum</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L767-L770","name":"FreeGroup.sum","line":767,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum","doc":"If `α` is a group, then any function from `α` to `α` extends uniquely to a homomorphism from the\nfree group over `α` to `α`. This is the additive version of `Prod`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L757-L757","name":"FreeAddGroup.lift_eq_sum_map","line":757,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_eq_sum_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_eq_sum_map\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_eq_sum_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L757-L761","name":"FreeGroup.lift_eq_prod_map","line":757,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_eq_prod_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_eq_prod_map\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_eq_prod_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L751-L751","name":"FreeAddGroup.sum.unique","line":751,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L751-L753","name":"FreeGroup.prod.unique","line":751,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L747-L747","name":"FreeAddGroup.sum.of","line":747,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L747-L749","name":"FreeGroup.prod.of","line":747,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L743-L743","name":"FreeAddGroup.sum_mk","line":743,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span>)</span> <span class=\"fn\">L</span>)</span>.sum</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L743-L745","name":"FreeGroup.prod_mk","line":743,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.1</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span>)</span> <span class=\"fn\">L</span>)</span>.prod</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L736-L737","name":"FreeAddGroup.sum","line":736,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum","doc":"If `α` is an additive group, then any function from `α` to `α` extends uniquely to an\nadditive homomorphism from the additive free group over `α` to `α`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L734-L739","name":"FreeGroup.prod","line":734,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod","doc":"If `α` is a group, then any function from `α` to `α` extends uniquely to a homomorphism from the\nfree group over `α` to `α`. This is the multiplicative version of `FreeGroup.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L723-L723","name":"FreeAddGroup.freeAddGroupCongr_trans","line":723,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_trans\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">e</span>)</span>.trans</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.trans</span> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L723-L726","name":"FreeGroup.freeGroupCongr_trans","line":723,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_trans\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">e</span>)</span>.trans</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.trans</span> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L719-L719","name":"FreeAddGroup.freeAddGroupCongr_symm","line":719,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_symm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">e</span>)</span>.symm</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L719-L721","name":"FreeGroup.freeGroupCongr_symm","line":719,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_symm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">e</span>)</span>.symm</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L715-L715","name":"FreeAddGroup.freeAddGroupCongr_refl","line":715,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_refl\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.refl\">AddEquiv.refl</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L715-L717","name":"FreeGroup.freeGroupCongr_refl","line":715,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_refl\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.refl\">MulEquiv.refl</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L706-L706","name":"FreeAddGroup.freeAddGroupCongr_apply","line":706,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">e</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L706-L706","name":"FreeGroup.freeGroupCongr_apply","line":706,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">e</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L706-L707","name":"FreeAddGroup.freeAddGroupCongr","line":706,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr","doc":"Equivalent types give rise to additively equivalent additive free groups."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L701-L713","name":"FreeGroup.freeGroupCongr","line":701,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr","doc":"Equivalent types give rise to multiplicatively equivalent free groups.\n\nThe converse can be found in `GroupTheory.FreeAbelianGroupFinsupp`,\nas `Equiv.of_freeGroupEquiv`\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L697-L697","name":"FreeAddGroup.map_eq_lift","line":697,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_eq_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_eq_lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_eq_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">(<span class=\"fn\">FreeAddGroup.of</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L697-L699","name":"FreeGroup.map_eq_lift","line":697,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_eq_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_eq_lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_eq_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">(<span class=\"fn\">FreeGroup.of</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L684-L684","name":"FreeAddGroup.map.unique","line":684,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L684-L695","name":"FreeGroup.map.unique","line":684,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L680-L680","name":"FreeAddGroup.map.of","line":680,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L680-L682","name":"FreeGroup.map.of","line":680,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L675-L675","name":"FreeAddGroup.map.comp","line":675,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.comp\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L675-L678","name":"FreeGroup.map.comp","line":675,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.comp\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L671-L671","name":"FreeAddGroup.map.id'","line":671,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id'\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L671-L673","name":"FreeGroup.map.id'","line":671,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id'\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L668-L668","name":"FreeAddGroup.map.id","line":668,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">id</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L668-L669","name":"FreeGroup.map.id","line":668,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">id</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L664-L664","name":"FreeAddGroup.map.mk","line":664,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span>)</span> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L664-L666","name":"FreeGroup.map.mk","line":664,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span>)</span> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L655-L656","name":"FreeAddGroup.map","line":655,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map","doc":"Any function from `α` to `β` extends uniquely to an additive group homomorphism from\nthe additive free group over `α` to the additive free group over `β`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L653-L660","name":"FreeGroup.map","line":653,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map","doc":"Any function from `α` to `β` extends uniquely to a group homomorphism from the free group over\n`α` to the free group over `β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L641-L641","name":"FreeAddGroup.closure_range_of","line":641,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.closure_range_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.closure_range_of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">closure_range_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#AddSubgroup.closure\">AddSubgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">FreeAddGroup.of</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L645","name":"FreeGroup.closure_range_of","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.closure_range_of","doc":"The generators of `FreeGroup α` generate `FreeGroup α`. That is, the subgroup closure of the\nset of generators equals `⊤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.closure_range_of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">closure_range_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#Subgroup.closure\">Subgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">FreeGroup.of</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L632-L632","name":"FreeAddGroup.lift.range_eq_closure","line":632,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_eq_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_eq_closure\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span>)</span>.range</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#AddSubgroup.closure\">AddSubgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L632-L637","name":"FreeGroup.lift.range_eq_closure","line":632,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_eq_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_eq_closure\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span>)</span>.range</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#Subgroup.closure\">Subgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L625-L625","name":"FreeAddGroup.lift.range_le","line":625,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span>)</span>.range</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L625-L630","name":"FreeGroup.lift.range_le","line":625,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span>)</span>.range</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L621-L621","name":"FreeAddGroup.lift.of_eq","line":621,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of_eq\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">FreeAddGroup.of</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L621-L623","name":"FreeGroup.lift.of_eq","line":621,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of_eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">FreeGroup.of</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L617-L617","name":"FreeAddGroup.lift_of_eq_id","line":617,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_of_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_of_eq_id\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_of_eq_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">FreeAddGroup.of</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.id\">AddMonoidHom.id</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L617-L619","name":"FreeGroup.lift_of_eq_id","line":617,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_of_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_of_eq_id\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_of_eq_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">FreeGroup.of</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L611-L611","name":"FreeGroup.ext_hom","line":611,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom","doc":"Two homomorphisms out of a free group are equal if they are equal on generators.\n\nSee note [partially-applied ext lemmas]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">ext_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L611-L612","name":"FreeAddGroup.ext_hom","line":611,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom","doc":"Two homomorphisms out of a free additive group are equal if they are\nequal on generators. See note [partially-applied ext lemmas]."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">ext_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L603-L603","name":"FreeAddGroup.lift.unique","line":603,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L603-L606","name":"FreeGroup.lift.unique","line":603,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L599-L599","name":"FreeAddGroup.lift.of","line":599,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L599-L601","name":"FreeGroup.lift.of","line":599,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L595-L595","name":"FreeAddGroup.lift.mk","line":595,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span></span>)</span> <span class=\"fn\">L</span>)</span>.sum</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L595-L597","name":"FreeGroup.lift.mk","line":595,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span>)</span> <span class=\"fn\">L</span>)</span>.prod</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L572-L572","name":"FreeAddGroup.lift_symm_apply","line":572,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_symm_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a✝ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span>.symm</span> <span class=\"fn\">g</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">FreeAddGroup.of</span>)</span> <span class=\"fn\">a✝</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L572-L572","name":"FreeGroup.lift_symm_apply","line":572,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_symm_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a✝ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span>.symm</span> <span class=\"fn\">g</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">FreeGroup.of</span>)</span> <span class=\"fn\">a✝</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L572-L574","name":"FreeAddGroup.lift","line":572,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift","doc":"If `β` is an additive group, then any function from `α` to `β` extends uniquely to an\nadditive group homomorphism from the free additive group over `α` to `β`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L570-L591","name":"FreeGroup.lift","line":570,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift","doc":"If `β` is a group, then any function from `α` to `β` extends uniquely to a group homomorphism\nfrom the free group over `α` to `β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L566-L566","name":"FreeAddGroup.Red.Step.lift","line":566,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L566-L568","name":"FreeGroup.Red.Step.lift","line":566,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\">FreeGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\">FreeGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L561-L562","name":"FreeAddGroup.Lift.aux","line":561,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux","doc":"Given `f : α → β` with `β` an additive group, the canonical map\n`list (α × bool) → β`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Lift</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L560-L564","name":"FreeGroup.Lift.aux","line":560,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux","doc":"Given `f : α → β` with `β` a group, the canonical map `List (α × Bool) → β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Lift</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L551-L551","name":"FreeAddGroup.of_injective","line":551,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective","doc":"The canonical map from the type to the additive free group is an injection."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeAddGroup.of</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L550-L554","name":"FreeGroup.of_injective","line":550,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of_injective","doc":"The canonical map from the type to the free group is an injection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeGroup.of</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L544-L544","name":"FreeAddGroup.Red.exact","line":544,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.exact\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L544-L548","name":"FreeGroup.Red.exact","line":544,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.exact\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L539-L540","name":"FreeAddGroup.of","line":539,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of","doc":"`of` is the canonical injection from the type to the free group over that type\nby sending each element to the equivalence class of the letter that is the element."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L537-L542","name":"FreeGroup.of","line":537,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of","doc":"`of` is the canonical injection from the type to the free group over that type by sending each\nelement to the equivalence class of the letter that is the element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L531-L531","name":"FreeAddGroup.nsmul_mk","line":531,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.nsmul_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.nsmul_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">nsmul_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">L</span>)</span>.flatten</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L531-L535","name":"FreeGroup.pow_mk","line":531,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pow_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pow_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">pow_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">L</span>)</span>.flatten</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L517-L517","name":"FreeAddGroup.instAddGroup","line":517,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L517-L529","name":"FreeGroup.instGroup","line":517,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L513-L513","name":"FreeAddGroup.red_negRev_iff","line":513,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.red_negRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.red_negRev_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">red_negRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L513-L515","name":"FreeGroup.red_invRev_iff","line":513,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red_invRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red_invRev_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">red_invRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L508-L508","name":"FreeAddGroup.Red.step_negRev_iff","line":508,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.step_negRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.step_negRev_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">step_negRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L508-L511","name":"FreeGroup.Red.step_invRev_iff","line":508,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.step_invRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.step_invRev_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">step_invRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L504-L504","name":"FreeAddGroup.Red.negRev","line":504,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L504-L506","name":"FreeGroup.Red.invRev","line":504,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L498-L498","name":"FreeAddGroup.Red.Step.negRev","line":498,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L498-L502","name":"FreeGroup.Red.Step.invRev","line":498,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L494-L494","name":"FreeAddGroup.neg_mk","line":494,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">neg_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L494-L496","name":"FreeGroup.inv_mk","line":494,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">inv_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L486-L486","name":"FreeAddGroup.instNeg","line":486,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNeg\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L486-L492","name":"FreeGroup.instInv","line":486,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv\">Inv</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L482-L482","name":"FreeAddGroup.negRev_bijective","line":482,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_bijective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L482-L484","name":"FreeGroup.invRev_bijective","line":482,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_bijective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L478-L478","name":"FreeAddGroup.negRev_surjective","line":478,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_surjective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L478-L480","name":"FreeGroup.invRev_surjective","line":478,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_surjective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L474-L474","name":"FreeAddGroup.negRev_injective","line":474,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L474-L476","name":"FreeGroup.invRev_injective","line":474,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L471-L471","name":"FreeAddGroup.negRev_involutive","line":471,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_involutive\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L471-L472","name":"FreeGroup.invRev_involutive","line":471,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_involutive\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L467-L467","name":"FreeAddGroup.negRev_empty","line":467,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_empty\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L467-L469","name":"FreeGroup.invRev_empty","line":467,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_empty\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L463-L463","name":"FreeAddGroup.negRev_negRev","line":463,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L463-L465","name":"FreeGroup.invRev_invRev","line":463,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L460-L460","name":"FreeAddGroup.negRev_length","line":460,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L460-L461","name":"FreeGroup.invRev_length","line":460,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L455-L456","name":"FreeAddGroup.negRev","line":455,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev","doc":"Transform a word representing a free group element into a word representing its\nnegative."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L454-L458","name":"FreeGroup.invRev","line":454,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev","doc":"Transform a word representing a free group element into a word representing its inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L450-L450","name":"FreeAddGroup.add_mk","line":450,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">add_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L450-L452","name":"FreeGroup.mul_mk","line":450,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mul_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L441-L441","name":"FreeAddGroup.instAdd","line":441,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAdd\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L441-L448","name":"FreeGroup.instMul","line":441,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L438-L438","name":"FreeAddGroup.instUniqueOfIsEmpty","line":438,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instUniqueOfIsEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instUniqueOfIsEmpty\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instUniqueOfIsEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L438-L439","name":"FreeGroup.instUniqueOfIsEmpty","line":438,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instUniqueOfIsEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instUniqueOfIsEmpty\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instUniqueOfIsEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L434-L434","name":"FreeAddGroup.instInhabited","line":434,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instInhabited\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L434-L436","name":"FreeGroup.instInhabited","line":434,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInhabited\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L430-L430","name":"FreeAddGroup.zero_eq_mk","line":430,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_eq_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">zero_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L430-L432","name":"FreeGroup.one_eq_mk","line":430,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_eq_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">one_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L426-L426","name":"FreeAddGroup.instZero","line":426,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instZero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instZero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L426-L428","name":"FreeGroup.instOne","line":426,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instOne\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L421-L421","name":"FreeAddGroup.quot_map_mk","line":421,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_map_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_map_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_map_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeAddGroup.Red.Step</span> <a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">⇒</a> <span class=\"fn\">FreeAddGroup.Red.Step</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L421-L424","name":"FreeGroup.quot_map_mk","line":421,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_map_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_map_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_map_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">FreeGroup.Red.Step</span> <a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">⇒</a> <span class=\"fn\">FreeGroup.Red.Step</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L416-L416","name":"FreeAddGroup.quot_liftOn_mk","line":416,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_liftOn_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_liftOn_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_liftOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L416-L419","name":"FreeGroup.quot_liftOn_mk","line":416,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_liftOn_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_liftOn_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_liftOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L411-L411","name":"FreeAddGroup.quot_lift_mk","line":411,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_lift_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_lift_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L411-L414","name":"FreeGroup.quot_lift_mk","line":411,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_lift_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_lift_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L407-L407","name":"FreeAddGroup.quot_mk_eq_mk","line":407,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_mk_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_mk_eq_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L407-L409","name":"FreeGroup.quot_mk_eq_mk","line":407,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_mk_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_mk_eq_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeGroup.Red.Step</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L403-L403","name":"FreeAddGroup.mk","line":403,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk","doc":"The canonical map from `list (α × bool)` to the free additive group on `α`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L402-L405","name":"FreeGroup.mk","line":402,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk","doc":"The canonical map from `List (α × Bool)` to the free group on `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L393-L394","name":"FreeAddGroup","line":393,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup","doc":"The free additive group over a type, i.e. the words formed by the elements of the\ntype and their formal inverses, quotient by one step reduction."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\"><span class=\"name\">FreeAddGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L391-L396","name":"FreeGroup","line":391,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup","doc":"The free group over a type, i.e. the words formed by the elements of the type and their formal\ninverses, quotient by one step reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\"><span class=\"name\">FreeGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L380-L380","name":"FreeAddGroup.eqvGen_step_iff_join_red","line":380,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.eqvGen_step_iff_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.eqvGen_step_iff_join_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">eqvGen_step_iff_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.EqvGen\">Relation.EqvGen</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L380-L387","name":"FreeGroup.eqvGen_step_iff_join_red","line":380,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.eqvGen_step_iff_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.eqvGen_step_iff_join_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">eqvGen_step_iff_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.EqvGen\">Relation.EqvGen</a> <span class=\"fn\">FreeGroup.Red.Step</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L376-L376","name":"FreeAddGroup.join_red_of_step","line":376,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.join_red_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.join_red_of_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">join_red_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L376-L378","name":"FreeGroup.join_red_of_step","line":376,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.join_red_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.join_red_of_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">join_red_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L369-L369","name":"FreeAddGroup.equivalence_join_red","line":369,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.equivalence_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.equivalence_join_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">equivalence_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L369-L374","name":"FreeGroup.equivalence_join_red","line":369,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.equivalence_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.equivalence_join_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">equivalence_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L363-L363","name":"FreeAddGroup.Red.antisymm","line":363,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.antisymm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L363-L365","name":"FreeGroup.Red.antisymm","line":363,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.antisymm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L355-L355","name":"FreeAddGroup.Red.length","line":355,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L355-L361","name":"FreeGroup.Red.length","line":355,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L333-L333","name":"FreeAddGroup.Red.sizeof_of_step","line":333,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sizeof_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sizeof_of_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sizeof_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L333-L353","name":"FreeGroup.Red.sizeof_of_step","line":333,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sizeof_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sizeof_of_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sizeof_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L328-L328","name":"FreeAddGroup.Red.length_le","line":328,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.length</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L328-L330","name":"FreeGroup.Red.length_le","line":328,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.length</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L319-L320","name":"FreeAddGroup.Red.sublist","line":319,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sublist","doc":"If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of\n`w₁`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sublist\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.Sublist</span> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L318-L326","name":"FreeGroup.Red.sublist","line":318,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sublist","doc":"If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of `w₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sublist\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.Sublist</span> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L314-L314","name":"FreeAddGroup.Red.Step.sublist","line":314,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.sublist\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.Sublist</span> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L314-L316","name":"FreeGroup.Red.Step.sublist","line":314,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.sublist\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.Sublist</span> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L296-L297","name":"FreeAddGroup.Red.neg_of_red_of_ne","line":296,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.neg_of_red_of_ne","doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `x + w₁` reduces\nto `y + w₂`, then `w₁` reduces to `-x + y + w₂`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.neg_of_red_of_ne\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">neg_of_red_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L294-L310","name":"FreeGroup.Red.inv_of_red_of_ne","line":294,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.inv_of_red_of_ne","doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `xw₁` reduces to `yw₂`, then\n`w₁` reduces to `x⁻¹yw₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.inv_of_red_of_ne\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">inv_of_red_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L282-L282","name":"FreeAddGroup.Red.red_iff_irreducible","line":282,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.red_iff_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.red_iff_irreducible\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">red_iff_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L282-L292","name":"FreeGroup.Red.red_iff_irreducible","line":282,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.red_iff_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.red_iff_irreducible\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">red_iff_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L268-L270","name":"FreeAddGroup.Red.cons_nil_iff_singleton","line":268,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton","doc":"If `x` is a letter and `w` is a word such that `x + w` reduces to the empty word, then `w`\nreduces to `-x`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L266-L280","name":"FreeGroup.Red.cons_nil_iff_singleton","line":266,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_nil_iff_singleton","doc":"If `x` is a letter and `w` is a word such that `xw` reduces to the empty word, then `w` reduces\nto `x⁻¹` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_nil_iff_singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L262-L262","name":"FreeAddGroup.Red.singleton_iff","line":262,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.singleton_iff","doc":"A letter only reduces to itself."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.singleton_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L261-L264","name":"FreeGroup.Red.singleton_iff","line":261,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.singleton_iff","doc":"A letter only reduces to itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.singleton_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L257-L257","name":"FreeAddGroup.Red.nil_iff","line":257,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.nil_iff","doc":"The empty word `[]` only reduces to itself."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.nil_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L256-L259","name":"FreeGroup.Red.nil_iff","line":256,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.nil_iff","doc":"The empty word `[]` only reduces to itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.nil_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L236-L236","name":"FreeAddGroup.Red.to_append_iff","line":236,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>) (<span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L236-L254","name":"FreeGroup.Red.to_append_iff","line":236,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.to_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.to_append_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>) (<span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L232-L232","name":"FreeAddGroup.Red.append_append","line":232,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L232-L234","name":"FreeGroup.Red.append_append","line":232,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L227-L227","name":"FreeAddGroup.Red.append_append_left_iff","line":227,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L227-L230","name":"FreeGroup.Red.append_append_left_iff","line":227,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L206-L206","name":"FreeAddGroup.Red.cons_cons_iff","line":206,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L206-L225","name":"FreeGroup.Red.cons_cons_iff","line":206,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L202-L202","name":"FreeAddGroup.Red.cons_cons","line":202,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L202-L204","name":"FreeGroup.Red.cons_cons","line":202,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L192-L195","name":"FreeAddGroup.Red.church_rosser","line":192,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser","doc":"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L189-L200","name":"FreeGroup.Red.church_rosser","line":189,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.church_rosser","doc":"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.church_rosser\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L185-L185","name":"FreeAddGroup.Red.Step.to_red","line":185,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.to_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.to_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">to_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L185-L187","name":"FreeGroup.Red.Step.to_red","line":185,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.to_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.to_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">to_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L179-L179","name":"FreeAddGroup.Red.Step.diamond","line":179,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₄</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₅</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L179-L183","name":"FreeGroup.Red.Step.diamond","line":179,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₄</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₅</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L161-L161","name":"FreeAddGroup.Red.Step.diamond_aux","line":161,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b2</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₄</span></span></span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>     <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>)</span> <span class=\"fn\">L₅</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L161-L177","name":"FreeGroup.Red.Step.diamond_aux","line":161,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond_aux\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b2</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₄</span></span></span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>)</span> <span class=\"fn\">L₅</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L156-L156","name":"FreeAddGroup.Red.Step.append_left_iff","line":156,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L156-L159","name":"FreeGroup.Red.Step.append_left_iff","line":156,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L152-L152","name":"FreeAddGroup.Red.Step.cons_cons_iff","line":152,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_cons_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L152-L154","name":"FreeGroup.Red.Step.cons_cons_iff","line":152,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_cons_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L148-L148","name":"FreeAddGroup.Red.not_step_singleton","line":148,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">[<span class=\"fn\">p</span>]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L148-L150","name":"FreeGroup.Red.not_step_singleton","line":148,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">[<span class=\"fn\">p</span>]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L132-L132","name":"FreeAddGroup.Red.Step.cons_left_iff","line":132,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L132-L146","name":"FreeGroup.Red.Step.cons_left_iff","line":132,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L125-L125","name":"FreeAddGroup.Red.not_step_nil","line":125,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_nil\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L125-L130","name":"FreeGroup.Red.not_step_nil","line":125,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_nil\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L121-L121","name":"FreeAddGroup.Red.Step.append_right","line":121,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span> <span class=\"fn\">(<span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L121-L123","name":"FreeGroup.Red.Step.append_right","line":121,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_right\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span> <span class=\"fn\">(<span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L117-L117","name":"FreeAddGroup.Red.Step.cons","line":117,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L117-L119","name":"FreeGroup.Red.Step.cons","line":117,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L113-L113","name":"FreeAddGroup.Red.Step.append_left","line":113,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L113-L115","name":"FreeGroup.Red.Step.append_left","line":113,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L109-L109","name":"FreeAddGroup.Red.Step.cons_not_rev","line":109,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not_rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L109-L111","name":"FreeGroup.Red.Step.cons_not_rev","line":109,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not_rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L105-L105","name":"FreeAddGroup.Red.Step.cons_not","line":105,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L105-L107","name":"FreeGroup.Red.Step.cons_not","line":105,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L101-L101","name":"FreeAddGroup.Red.Step.not_rev","line":101,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not_rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L101-L103","name":"FreeGroup.Red.Step.not_rev","line":101,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not_rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L96-L97","name":"FreeAddGroup.Red.Step.length","line":96,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length","doc":"Predicate asserting that the word `w₁` can be reduced to `w₂` in one step, i.e. there\nare words `w₃ w₄` and letter `x` such that `w₁ = w₃ + x + (-x) + w₄` and `w₂ = w₃w₄`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L94-L99","name":"FreeGroup.Red.Step.length","line":94,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.length","doc":"Predicate asserting that the word `w₁` can be reduced to `w₂` in one step, i.e. there are words\n`w₃ w₄` and letter `x` such that `w₁ = w₃xx⁻¹w₄` and `w₂ = w₃w₄`  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L88-L88","name":"FreeAddGroup.Red.trans","line":88,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.trans\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L88-L90","name":"FreeGroup.Red.trans","line":88,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.trans\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L84-L84","name":"FreeAddGroup.Red.refl","line":84,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.refl\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L84-L86","name":"FreeGroup.Red.refl","line":84,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.refl\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L80-L80","name":"FreeAddGroup.Red","line":80,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red","doc":"Reflexive-transitive closure of `Red.Step`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L79-L82","name":"FreeGroup.Red","line":79,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red","doc":"Reflexive-transitive closure of `Red.Step` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L71-L71","name":"FreeGroup.Red.Step.not","line":71,"kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L68-L71","name":"FreeGroup.Red.Step","line":68,"kind":"inductive","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step","doc":"Reduction step for the multiplicative free group relation: `w * x * x⁻¹ * v ~> w * v` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L64-L64","name":"FreeAddGroup.Red.Step.not","line":64,"kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/FreeGroup/Basic.lean#L62-L64","name":"FreeAddGroup.Red.Step","line":62,"kind":"inductive","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step","doc":"Reduction step for the additive free group relation: `w + x + (-x) + v ~> w + v` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}