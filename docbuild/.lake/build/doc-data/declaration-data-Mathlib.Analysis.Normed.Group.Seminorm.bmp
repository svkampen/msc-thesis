{"name":"Mathlib.Analysis.Normed.Group.Seminorm","instances":[{"typeNames":["Real"],"name":"NonarchAddGroupSeminormClass.toAddGroupSeminormClass","className":"AddGroupSeminormClass"},{"typeNames":["Real"],"name":"NonarchAddGroupNormClass.toAddGroupNormClass","className":"AddGroupNormClass"},{"typeNames":["GroupSeminorm","Real"],"name":"GroupSeminorm.funLike","className":"DFunLike"},{"typeNames":["AddGroupSeminorm","Real"],"name":"AddGroupSeminorm.funLike","className":"DFunLike"},{"typeNames":["GroupSeminorm","Real"],"name":"GroupSeminorm.groupSeminormClass","className":"GroupSeminormClass"},{"typeNames":["AddGroupSeminorm","Real"],"name":"AddGroupSeminorm.addGroupSeminormClass","className":"AddGroupSeminormClass"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instPartialOrder","className":"PartialOrder"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instPartialOrder","className":"PartialOrder"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instZeroGroupSeminorm","className":"Zero"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instZeroAddGroupSeminorm","className":"Zero"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instInhabited","className":"Inhabited"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instInhabited","className":"Inhabited"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instAdd","className":"Add"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instAdd","className":"Add"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instMax","className":"Max"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instMax","className":"Max"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.semilatticeSup","className":"SemilatticeSup"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.semilatticeSup","className":"SemilatticeSup"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instMin","className":"Min"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instMin","className":"Min"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instLattice","className":"Lattice"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.instLattice","className":"Lattice"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.toOne","className":"One"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.toSMul","className":"SMul"},{"typeNames":["AddGroupSeminorm"],"name":"AddGroupSeminorm.isScalarTower","className":"IsScalarTower"},{"typeNames":["NonarchAddGroupSeminorm","Real"],"name":"NonarchAddGroupSeminorm.funLike","className":"DFunLike"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.nonarchAddGroupSeminormClass","className":"NonarchAddGroupSeminormClass"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instPartialOrder","className":"PartialOrder"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instZero","className":"Zero"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instInhabited","className":"Inhabited"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instMax","className":"Max"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instSemilatticeSup","className":"SemilatticeSup"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.toOne","className":"One"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instSMul","className":"SMul"},{"typeNames":["GroupSeminorm"],"name":"GroupSeminorm.instIsScalarTowerOfReal","className":"IsScalarTower"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instOneOfDecidableEq","className":"One"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instSMul","className":"SMul"},{"typeNames":["NonarchAddGroupSeminorm"],"name":"NonarchAddGroupSeminorm.instIsScalarTowerOfReal","className":"IsScalarTower"},{"typeNames":["GroupNorm","Real"],"name":"GroupNorm.funLike","className":"DFunLike"},{"typeNames":["AddGroupNorm","Real"],"name":"AddGroupNorm.funLike","className":"DFunLike"},{"typeNames":["GroupNorm","Real"],"name":"GroupNorm.groupNormClass","className":"GroupNormClass"},{"typeNames":["AddGroupNorm","Real"],"name":"AddGroupNorm.addGroupNormClass","className":"AddGroupNormClass"},{"typeNames":["GroupNorm"],"name":"GroupNorm.instPartialOrder","className":"PartialOrder"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.instPartialOrder","className":"PartialOrder"},{"typeNames":["GroupNorm"],"name":"GroupNorm.instAdd","className":"Add"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.instAdd","className":"Add"},{"typeNames":["GroupNorm"],"name":"GroupNorm.instMax","className":"Max"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.instMax","className":"Max"},{"typeNames":["GroupNorm"],"name":"GroupNorm.instSemilatticeSup","className":"SemilatticeSup"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.instSemilatticeSup","className":"SemilatticeSup"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.instOne","className":"One"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.instInhabited","className":"Inhabited"},{"typeNames":["AddGroupNorm"],"name":"AddGroupNorm.toOne","className":"One"},{"typeNames":["GroupNorm"],"name":"GroupNorm.toOne","className":"One"},{"typeNames":["GroupNorm"],"name":"GroupNorm.instInhabited","className":"Inhabited"},{"typeNames":["NonarchAddGroupNorm","Real"],"name":"NonarchAddGroupNorm.funLike","className":"DFunLike"},{"typeNames":["NonarchAddGroupNorm"],"name":"NonarchAddGroupNorm.nonarchAddGroupNormClass","className":"NonarchAddGroupNormClass"},{"typeNames":["NonarchAddGroupNorm"],"name":"NonarchAddGroupNorm.instPartialOrder","className":"PartialOrder"},{"typeNames":["NonarchAddGroupNorm"],"name":"NonarchAddGroupNorm.instMax","className":"Max"},{"typeNames":["NonarchAddGroupNorm"],"name":"NonarchAddGroupNorm.instSemilatticeSup","className":"SemilatticeSup"},{"typeNames":["NonarchAddGroupNorm"],"name":"NonarchAddGroupNorm.instOneOfDecidableEq","className":"One"},{"typeNames":["NonarchAddGroupNorm"],"name":"NonarchAddGroupNorm.instInhabitedOfDecidableEq","className":"Inhabited"}],"imports":["Init","Mathlib.Data.NNReal.Defs","Mathlib.Order.ConditionallyCompleteLattice.Group","Mathlib.Tactic.GCongr.CoreAttrs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L841-L842","name":"NonarchAddGroupNorm.instInhabitedOfDecidableEq","line":841,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instInhabitedOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instInhabitedOfDecidableEq\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">instInhabitedOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L836-L839","name":"NonarchAddGroupNorm.apply_one","line":836,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.apply_one\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L832-L834","name":"NonarchAddGroupNorm.instOneOfDecidableEq","line":832,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instOneOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instOneOfDecidableEq\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">instOneOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L829-L830","name":"NonarchAddGroupNorm.instSemilatticeSup","line":829,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instSemilatticeSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instSemilatticeSup\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">instSemilatticeSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L825-L827","name":"NonarchAddGroupNorm.sup_apply","line":825,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.sup_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.sup_apply\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">sup_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L821-L823","name":"NonarchAddGroupNorm.coe_sup","line":821,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.coe_sup\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L815-L819","name":"NonarchAddGroupNorm.instMax","line":815,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instMax\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L809-L811","name":"NonarchAddGroupNorm.coe_lt_coe","line":809,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.coe_lt_coe\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L805-L807","name":"NonarchAddGroupNorm.coe_le_coe","line":805,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.coe_le_coe\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L802-L803","name":"NonarchAddGroupNorm.lt_def","line":802,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.lt_def\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L799-L800","name":"NonarchAddGroupNorm.le_def","line":799,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.le_def\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L796-L797","name":"NonarchAddGroupNorm.instPartialOrder","line":796,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.instPartialOrder\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L792-L792","name":"NonarchAddGroupNorm.ext","line":792,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.ext\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L788-L790","name":"NonarchAddGroupNorm.toNonarchAddGroupSeminorm_eq_coe","line":788,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.toNonarchAddGroupSeminorm_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.toNonarchAddGroupSeminorm_eq_coe\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">toNonarchAddGroupSeminorm_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">p</span>.toNonarchAddGroupSeminorm</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L781-L785","name":"NonarchAddGroupNorm.nonarchAddGroupNormClass","line":781,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.nonarchAddGroupNormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.nonarchAddGroupNormClass\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">nonarchAddGroupNormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass\">NonarchAddGroupNormClass</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L777-L779","name":"NonarchAddGroupNorm.funLike","line":777,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.funLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.funLike\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">funLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L765-L767","name":"GroupNorm.instInhabited","line":765,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instInhabited\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L761-L763","name":"GroupNorm.apply_one","line":761,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.apply_one\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L757-L759","name":"GroupNorm.toOne","line":757,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.toOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.toOne\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">toOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L751-L753","name":"AddGroupNorm.toOne","line":751,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.toOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.toOne\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">toOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L744-L745","name":"AddGroupNorm.instInhabited","line":744,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instInhabited\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L740-L742","name":"AddGroupNorm.apply_one","line":740,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.apply_one\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L736-L738","name":"AddGroupNorm.instOne","line":736,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instOne\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">instOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L724-L724","name":"AddGroupNorm.instSemilatticeSup","line":724,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instSemilatticeSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instSemilatticeSup\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">instSemilatticeSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L724-L726","name":"GroupNorm.instSemilatticeSup","line":724,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instSemilatticeSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instSemilatticeSup\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">instSemilatticeSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L720-L720","name":"AddGroupNorm.sup_apply","line":720,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.sup_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.sup_apply\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">sup_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L720-L722","name":"GroupNorm.sup_apply","line":720,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.sup_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.sup_apply\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">sup_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L716-L716","name":"AddGroupNorm.coe_sup","line":716,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_sup\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L716-L718","name":"GroupNorm.coe_sup","line":716,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_sup\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L709-L709","name":"AddGroupNorm.instMax","line":709,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instMax\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L709-L714","name":"GroupNorm.instMax","line":709,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instMax\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L704-L704","name":"AddGroupNorm.add_apply","line":704,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.add_apply\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L704-L706","name":"GroupNorm.add_apply","line":704,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.add_apply\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L700-L700","name":"AddGroupNorm.coe_add","line":700,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_add\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">coe_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L700-L702","name":"GroupNorm.coe_add","line":700,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_add\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">coe_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L693-L693","name":"AddGroupNorm.instAdd","line":693,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instAdd\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L693-L698","name":"GroupNorm.instAdd","line":693,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instAdd\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L687-L687","name":"AddGroupNorm.coe_lt_coe","line":687,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_lt_coe\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L687-L689","name":"GroupNorm.coe_lt_coe","line":687,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_lt_coe\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L683-L683","name":"AddGroupNorm.coe_le_coe","line":683,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.coe_le_coe\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L683-L685","name":"GroupNorm.coe_le_coe","line":683,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.coe_le_coe\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L679-L679","name":"AddGroupNorm.lt_def","line":679,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.lt_def\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L679-L681","name":"GroupNorm.lt_def","line":679,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.lt_def\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L675-L675","name":"AddGroupNorm.le_def","line":675,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.le_def\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L675-L677","name":"GroupNorm.le_def","line":675,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.le_def\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L671-L671","name":"AddGroupNorm.instPartialOrder","line":671,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.instPartialOrder\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L671-L673","name":"GroupNorm.instPartialOrder","line":671,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.instPartialOrder\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L667-L667","name":"GroupNorm.ext","line":667,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.ext\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L667-L667","name":"AddGroupNorm.ext","line":667,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.ext\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L663-L663","name":"AddGroupNorm.toAddGroupSeminorm_eq_coe","line":663,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.toAddGroupSeminorm_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.toAddGroupSeminorm_eq_coe\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">toAddGroupSeminorm_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">p</span>.toAddGroupSeminorm</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L663-L665","name":"GroupNorm.toGroupSeminorm_eq_coe","line":663,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.toGroupSeminorm_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.toGroupSeminorm_eq_coe\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">toGroupSeminorm_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">p</span>.toGroupSeminorm</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L655-L655","name":"AddGroupNorm.addGroupNormClass","line":655,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.addGroupNormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.addGroupNormClass\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">addGroupNormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#AddGroupNormClass\">AddGroupNormClass</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L655-L660","name":"GroupNorm.groupNormClass","line":655,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.groupNormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.groupNormClass\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">groupNormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#GroupNormClass\">GroupNormClass</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L650-L650","name":"AddGroupNorm.funLike","line":650,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.funLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.funLike\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">funLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L650-L653","name":"GroupNorm.funLike","line":650,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.funLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.funLike\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">funLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L633-L637","name":"NonarchAddGroupSeminorm.smul_sup","line":633,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.smul_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.smul_sup\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">smul_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L629-L631","name":"NonarchAddGroupSeminorm.smul_apply","line":629,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.smul_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.smul_apply\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">smul_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L625-L627","name":"NonarchAddGroupSeminorm.coe_smul","line":625,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_smul\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">coe_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L621-L623","name":"NonarchAddGroupSeminorm.instIsScalarTowerOfReal","line":621,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instIsScalarTowerOfReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instIsScalarTowerOfReal\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instIsScalarTowerOfReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L607-L619","name":"NonarchAddGroupSeminorm.instSMul","line":607,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instSMul","doc":"Any action on `ℝ` which factors through `ℝ≥0` applies to a `NonarchAddGroupSeminorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instSMul\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L602-L605","name":"NonarchAddGroupSeminorm.apply_one","line":602,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.apply_one\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L591-L600","name":"NonarchAddGroupSeminorm.instOneOfDecidableEq","line":591,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instOneOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instOneOfDecidableEq\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instOneOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L578-L583","name":"GroupSeminorm.smul_sup","line":578,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.smul_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.smul_sup\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">smul_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L574-L576","name":"GroupSeminorm.smul_apply","line":574,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.smul_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.smul_apply\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">smul_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L570-L572","name":"GroupSeminorm.coe_smul","line":570,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_smul\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L565-L568","name":"GroupSeminorm.instIsScalarTowerOfReal","line":565,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instIsScalarTowerOfReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instIsScalarTowerOfReal\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instIsScalarTowerOfReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L551-L563","name":"GroupSeminorm.instSMul","line":551,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instSMul","doc":"Any action on `ℝ` which factors through `ℝ≥0` applies to an `AddGroupSeminorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instSMul\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L547-L549","name":"GroupSeminorm.apply_one","line":547,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.apply_one\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L534-L545","name":"GroupSeminorm.toOne","line":534,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.toOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.toOne\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">toOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L519-L524","name":"NonarchAddGroupSeminorm.add_bddBelow_range_add","line":519,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.add_bddBelow_range_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.add_bddBelow_range_add\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">add_bddBelow_range_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddBelow\">BddBelow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L510-L511","name":"NonarchAddGroupSeminorm.instSemilatticeSup","line":510,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instSemilatticeSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instSemilatticeSup\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instSemilatticeSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L506-L508","name":"NonarchAddGroupSeminorm.sup_apply","line":506,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.sup_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.sup_apply\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">sup_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L502-L504","name":"NonarchAddGroupSeminorm.coe_sup","line":502,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_sup\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L493-L500","name":"NonarchAddGroupSeminorm.instMax","line":493,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instMax\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L488-L489","name":"NonarchAddGroupSeminorm.instInhabited","line":488,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instInhabited\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L484-L486","name":"NonarchAddGroupSeminorm.zero_apply","line":484,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.zero_apply\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L480-L482","name":"NonarchAddGroupSeminorm.coe_zero","line":480,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_zero\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">coe_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L474-L478","name":"NonarchAddGroupSeminorm.instZero","line":474,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instZero\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instZero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L468-L470","name":"NonarchAddGroupSeminorm.coe_lt_coe","line":468,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_lt_coe\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L464-L466","name":"NonarchAddGroupSeminorm.coe_le_coe","line":464,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.coe_le_coe\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L461-L462","name":"NonarchAddGroupSeminorm.lt_def","line":461,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.lt_def\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L458-L459","name":"NonarchAddGroupSeminorm.le_def","line":458,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.le_def\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L455-L456","name":"NonarchAddGroupSeminorm.instPartialOrder","line":455,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.instPartialOrder\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L451-L451","name":"NonarchAddGroupSeminorm.ext","line":451,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.ext\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L447-L449","name":"NonarchAddGroupSeminorm.toZeroHom_eq_coe","line":447,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.toZeroHom_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.toZeroHom_eq_coe\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">toZeroHom_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">p</span>.toZeroHom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L440-L444","name":"NonarchAddGroupSeminorm.nonarchAddGroupSeminormClass","line":440,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.nonarchAddGroupSeminormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.nonarchAddGroupSeminormClass\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">nonarchAddGroupSeminormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L436-L438","name":"NonarchAddGroupSeminorm.funLike","line":436,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.funLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.funLike\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">funLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L422-L426","name":"AddGroupSeminorm.smul_sup","line":422,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.smul_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.smul_sup\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">smul_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L418-L420","name":"AddGroupSeminorm.isScalarTower","line":418,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.isScalarTower","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.isScalarTower\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">isScalarTower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">R'</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L414-L416","name":"AddGroupSeminorm.smul_apply","line":414,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.smul_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.smul_apply\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">smul_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L410-L412","name":"AddGroupSeminorm.coe_smul","line":410,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_smul\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L398-L408","name":"AddGroupSeminorm.toSMul","line":398,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toSMul","doc":"Any action on `ℝ` which factors through `ℝ≥0` applies to an `AddGroupSeminorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toSMul\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">toSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L394-L396","name":"AddGroupSeminorm.apply_one","line":394,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.apply_one\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L382-L392","name":"AddGroupSeminorm.toOne","line":382,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toOne\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">toOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L360-L360","name":"AddGroupSeminorm.instLattice","line":360,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instLattice\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L360-L370","name":"GroupSeminorm.instLattice","line":360,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instLattice\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L356-L356","name":"AddGroupSeminorm.inf_apply","line":356,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.inf_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.inf_apply\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">inf_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L356-L358","name":"GroupSeminorm.inf_apply","line":356,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.inf_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.inf_apply\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">inf_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L338-L338","name":"AddGroupSeminorm.instMin","line":338,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instMin\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L338-L354","name":"GroupSeminorm.instMin","line":338,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instMin\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L330-L330","name":"AddGroupSeminorm.add_bddBelow_range_add","line":330,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_bddBelow_range_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_bddBelow_range_add\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">add_bddBelow_range_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddBelow\">BddBelow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L330-L336","name":"GroupSeminorm.mul_bddBelow_range_add","line":330,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.mul_bddBelow_range_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.mul_bddBelow_range_add\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">mul_bddBelow_range_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddBelow\">BddBelow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L326-L326","name":"AddGroupSeminorm.comp_add_le","line":326,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_add_le\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp_add_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L326-L328","name":"GroupSeminorm.comp_mul_le","line":326,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_mul_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_mul_le\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp_mul_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L317-L317","name":"AddGroupSeminorm.comp_mono","line":317,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_mono\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.comp</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L317-L318","name":"GroupSeminorm.comp_mono","line":317,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_mono\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.comp</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L311-L311","name":"AddGroupSeminorm.add_comp","line":311,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_comp\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">add_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.comp</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L311-L313","name":"GroupSeminorm.add_comp","line":311,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.add_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.add_comp\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">add_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.comp</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L307-L307","name":"AddGroupSeminorm.comp_assoc","line":307,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_assoc\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.comp</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">g</span>)</span>.comp</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L307-L309","name":"GroupSeminorm.comp_assoc","line":307,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_assoc\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.comp</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">g</span>)</span>.comp</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L303-L303","name":"AddGroupSeminorm.zero_comp","line":303,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.zero_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.zero_comp\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">zero_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp\">AddGroupSeminorm.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L303-L305","name":"GroupSeminorm.zero_comp","line":303,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.zero_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.zero_comp\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">zero_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp\">GroupSeminorm.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L299-L299","name":"AddGroupSeminorm.comp_zero","line":299,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_zero\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L299-L301","name":"GroupSeminorm.comp_zero","line":299,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_zero\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L295-L295","name":"AddGroupSeminorm.comp_id","line":295,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_id\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.id\">AddMonoidHom.id</a> <span class=\"fn\">E</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L295-L297","name":"GroupSeminorm.comp_id","line":295,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_id\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">E</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L291-L291","name":"AddGroupSeminorm.comp_apply","line":291,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp_apply\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L291-L293","name":"GroupSeminorm.comp_apply","line":291,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp_apply\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L287-L287","name":"AddGroupSeminorm.coe_comp","line":287,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_comp\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L287-L289","name":"GroupSeminorm.coe_comp","line":287,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_comp\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.comp</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L279-L280","name":"AddGroupSeminorm.comp","line":279,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp","doc":"Composition of an additive group seminorm with an additive monoid homomorphism as an\nadditive group seminorm."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.comp\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L278-L285","name":"GroupSeminorm.comp","line":278,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp","doc":"Composition of a group seminorm with a monoid homomorphism as a group seminorm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.comp\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L274-L274","name":"AddGroupSeminorm.semilatticeSup","line":274,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.semilatticeSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.semilatticeSup\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">semilatticeSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L274-L276","name":"GroupSeminorm.semilatticeSup","line":274,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.semilatticeSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.semilatticeSup\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">semilatticeSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L270-L270","name":"AddGroupSeminorm.sup_apply","line":270,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.sup_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.sup_apply\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">sup_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L270-L272","name":"GroupSeminorm.sup_apply","line":270,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.sup_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.sup_apply\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">sup_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L266-L266","name":"AddGroupSeminorm.coe_sup","line":266,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_sup\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L266-L268","name":"GroupSeminorm.coe_sup","line":266,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_sup\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L255-L255","name":"AddGroupSeminorm.instMax","line":255,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instMax\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L255-L264","name":"GroupSeminorm.instMax","line":255,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instMax\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L249-L249","name":"AddGroupSeminorm.add_apply","line":249,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_apply\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L249-L251","name":"GroupSeminorm.add_apply","line":249,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.add_apply\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L245-L245","name":"AddGroupSeminorm.coe_add","line":245,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_add\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L245-L247","name":"GroupSeminorm.coe_add","line":245,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_add\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L235-L235","name":"AddGroupSeminorm.instAdd","line":235,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instAdd\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L235-L243","name":"GroupSeminorm.instAdd","line":235,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instAdd\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L231-L231","name":"AddGroupSeminorm.instInhabited","line":231,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instInhabited\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L231-L233","name":"GroupSeminorm.instInhabited","line":231,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instInhabited\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L227-L227","name":"AddGroupSeminorm.zero_apply","line":227,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.zero_apply\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L227-L229","name":"GroupSeminorm.zero_apply","line":227,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.zero_apply\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L223-L223","name":"AddGroupSeminorm.coe_zero","line":223,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_zero\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L223-L225","name":"GroupSeminorm.coe_zero","line":223,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_zero\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L216-L216","name":"AddGroupSeminorm.instZeroAddGroupSeminorm","line":216,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instZeroAddGroupSeminorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instZeroAddGroupSeminorm\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instZeroAddGroupSeminorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L216-L221","name":"GroupSeminorm.instZeroGroupSeminorm","line":216,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instZeroGroupSeminorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instZeroGroupSeminorm\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instZeroGroupSeminorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L210-L210","name":"AddGroupSeminorm.coe_lt_coe","line":210,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_lt_coe\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L210-L212","name":"GroupSeminorm.coe_lt_coe","line":210,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_lt_coe\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L206-L206","name":"AddGroupSeminorm.coe_le_coe","line":206,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.coe_le_coe\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L206-L208","name":"GroupSeminorm.coe_le_coe","line":206,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.coe_le_coe\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L202-L202","name":"AddGroupSeminorm.lt_def","line":202,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.lt_def\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L202-L204","name":"GroupSeminorm.lt_def","line":202,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.lt_def\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L198-L198","name":"AddGroupSeminorm.le_def","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.le_def\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L198-L200","name":"GroupSeminorm.le_def","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.le_def\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⇑<span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L194-L194","name":"AddGroupSeminorm.instPartialOrder","line":194,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.instPartialOrder\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L194-L196","name":"GroupSeminorm.instPartialOrder","line":194,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.instPartialOrder\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L190-L190","name":"GroupSeminorm.ext","line":190,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.ext\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L190-L190","name":"AddGroupSeminorm.ext","line":190,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.ext\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L186-L186","name":"AddGroupSeminorm.toFun_eq_coe","line":186,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toFun_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toFun_eq_coe\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">toFun_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L186-L188","name":"GroupSeminorm.toFun_eq_coe","line":186,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.toFun_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.toFun_eq_coe\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">toFun_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L180-L180","name":"AddGroupSeminorm.addGroupSeminormClass","line":180,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.addGroupSeminormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.addGroupSeminormClass\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">addGroupSeminormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#AddGroupSeminormClass\">AddGroupSeminormClass</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L180-L184","name":"GroupSeminorm.groupSeminormClass","line":180,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.groupSeminormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.groupSeminormClass\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">groupSeminormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#GroupSeminormClass\">GroupSeminormClass</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L175-L175","name":"AddGroupSeminorm.funLike","line":175,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.funLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.funLike\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">funLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L175-L178","name":"GroupSeminorm.funLike","line":175,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.funLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.funLike\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">funLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L160-L164","name":"NonarchAddGroupNormClass.toAddGroupNormClass","line":160,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass.toAddGroupNormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass.toAddGroupNormClass\"><span class=\"name\">NonarchAddGroupNormClass</span>.<span class=\"name\">toAddGroupNormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass\">NonarchAddGroupNormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#AddGroupNormClass\">AddGroupNormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L147-L157","name":"NonarchAddGroupSeminormClass.toAddGroupSeminormClass","line":147,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.toAddGroupSeminormClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.toAddGroupSeminormClass\"><span class=\"name\">NonarchAddGroupSeminormClass</span>.<span class=\"name\">toAddGroupSeminormClass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#AddGroupSeminormClass\">AddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L140-L142","name":"map_sub_le_max","line":140,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#map_sub_le_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#map_sub_le_max\"><span class=\"name\">map_sub_le_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L134-L134","name":"NonarchAddGroupNormClass.eq_zero_of_map_eq_zero","line":134,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass.eq_zero_of_map_eq_zero","doc":"If the image under the norm is zero, then the argument is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass.eq_zero_of_map_eq_zero\"><span class=\"name\">NonarchAddGroupNormClass</span>.<span class=\"name\">eq_zero_of_map_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝¹ : <span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass\">NonarchAddGroupNormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L131-L131","name":"NonarchAddGroupNormClass.mk","line":131,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass.mk\"><span class=\"name\">NonarchAddGroupNormClass</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toNonarchAddGroupSeminormClass : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq_zero_of_map_eq_zero : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\">F</span>) {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass\">NonarchAddGroupNormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L127-L134","name":"NonarchAddGroupNormClass","line":127,"kind":"class","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass","doc":"`NonarchAddGroupNormClass F α` states that `F` is a type of nonarchimedean norms on the\nadditive group `α`.\n\nYou should extend this class when you extend `NonarchAddGroupNorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNormClass\"><span class=\"name\">NonarchAddGroupNormClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L125-L125","name":"NonarchAddGroupSeminormClass.map_neg_eq_map'","line":125,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.map_neg_eq_map'","doc":"The seminorm is invariant under negation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.map_neg_eq_map'\"><span class=\"name\">NonarchAddGroupSeminormClass</span>.<span class=\"name\">map_neg_eq_map'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝¹ : <span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L123-L123","name":"NonarchAddGroupSeminormClass.map_zero","line":123,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.map_zero","doc":"The image of zero is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.map_zero\"><span class=\"name\">NonarchAddGroupSeminormClass</span>.<span class=\"name\">map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝¹ : <span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L120-L120","name":"NonarchAddGroupSeminormClass.mk","line":120,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass.mk\"><span class=\"name\">NonarchAddGroupSeminormClass</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toNonarchimedeanHomClass : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#NonarchimedeanHomClass\">NonarchimedeanHomClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(map_zero : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map_neg_eq_map' : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\">F</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\">NonarchAddGroupSeminormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L116-L125","name":"NonarchAddGroupSeminormClass","line":116,"kind":"class","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass","doc":"`NonarchAddGroupSeminormClass F α` states that `F` is a type of nonarchimedean seminorms on\nthe additive group `α`.\n\nYou should extend this class when you extend `NonarchAddGroupSeminorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminormClass\"><span class=\"name\">NonarchAddGroupSeminormClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_7)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Hom/Basic.html#NonarchimedeanHomClass\">NonarchimedeanHomClass</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L114-L114","name":"NonarchAddGroupNorm.eq_zero_of_map_eq_zero'","line":114,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.eq_zero_of_map_eq_zero'","doc":"If the image under the norm is zero, then the argument is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.eq_zero_of_map_eq_zero'\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">eq_zero_of_map_eq_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L112-L112","name":"NonarchAddGroupNorm.mk","line":112,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm.mk\"><span class=\"name\">NonarchAddGroupNorm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toNonarchAddGroupSeminorm : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_zero_of_map_eq_zero' : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toNonarchAddGroupSeminorm</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\">NonarchAddGroupNorm</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L110-L114","name":"NonarchAddGroupNorm","line":110,"kind":"structure","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm","doc":"A nonarchimedean norm on an additive group `G` is a function `f : G → ℝ` that preserves zero, is\nnonarchimedean and such that `f (-x) = f x` and `f x = 0 → x = 0` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupNorm\"><span class=\"name\">NonarchAddGroupNorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">G</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_6</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L108-L108","name":"GroupNorm.eq_one_of_map_eq_zero'","line":108,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.eq_one_of_map_eq_zero'","doc":"If the image under the norm is zero, then the argument is one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.eq_one_of_map_eq_zero'\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">eq_one_of_map_eq_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L106-L106","name":"GroupNorm.mk","line":106,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm.mk\"><span class=\"name\">GroupNorm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toGroupSeminorm : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_one_of_map_eq_zero' : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toGroupSeminorm</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\">GroupNorm</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L103-L108","name":"GroupNorm","line":103,"kind":"structure","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm","doc":"A seminorm on a group `G` is a function `f : G → ℝ` that sends one to zero, is submultiplicative\nand such that `f x⁻¹ = f x` and `f x = 0 → x = 1` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupNorm\"><span class=\"name\">GroupNorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_6</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L101-L101","name":"AddGroupNorm.eq_zero_of_map_eq_zero'","line":101,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.eq_zero_of_map_eq_zero'","doc":"If the image under the seminorm is zero, then the argument is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.eq_zero_of_map_eq_zero'\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">eq_zero_of_map_eq_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L99-L99","name":"AddGroupNorm.mk","line":99,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm.mk\"><span class=\"name\">AddGroupNorm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toAddGroupSeminorm : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_zero_of_map_eq_zero' : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toAddGroupSeminorm</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\">AddGroupNorm</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L97-L101","name":"AddGroupNorm","line":97,"kind":"structure","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm","doc":"A norm on an additive group `G` is a function `f : G → ℝ` that preserves zero, is subadditive\nand such that `f (-x) = f x` and `f x = 0 → x = 0` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupNorm\"><span class=\"name\">AddGroupNorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_6</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L90-L90","name":"NonarchAddGroupSeminorm.neg'","line":90,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.neg'","doc":"The seminorm is invariant under negation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.neg'\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L88-L88","name":"NonarchAddGroupSeminorm.add_le_max'","line":88,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.add_le_max'","doc":"The seminorm applied to a sum is dominated by the maximum of the function applied to the\naddends. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.add_le_max'\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">add_le_max'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r s : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L85-L85","name":"NonarchAddGroupSeminorm.mk","line":85,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm.mk\"><span class=\"name\">NonarchAddGroupSeminorm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toZeroHom : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#ZeroHom\">ZeroHom</a> <span class=\"fn\">G</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(add_le_max' : <span class=\"fn\">∀ (<span class=\"fn\">r </span><span class=\"fn\">s</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toZeroHom</span>.toFun</span> <span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toZeroHom</span>.toFun</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toZeroHom</span>.toFun</span> <span class=\"fn\">s</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(neg' : <span class=\"fn\">∀ (<span class=\"fn\">r</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toZeroHom</span>.toFun</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toZeroHom</span>.toFun</span> <span class=\"fn\">r</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\">NonarchAddGroupSeminorm</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L83-L90","name":"NonarchAddGroupSeminorm","line":83,"kind":"structure","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm","doc":"A nonarchimedean seminorm on an additive group `G` is a function `f : G → ℝ` that preserves\nzero, is nonarchimedean and such that `f (-x) = f x` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#NonarchAddGroupSeminorm\"><span class=\"name\">NonarchAddGroupSeminorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#ZeroHom\">ZeroHom</a> <span class=\"fn\">G</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_6</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L81-L81","name":"GroupSeminorm.inv'","line":81,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.inv'","doc":"The seminorm is invariant under inversion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.inv'\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">inv'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L79-L79","name":"GroupSeminorm.mul_le'","line":79,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.mul_le'","doc":"The seminorm applied to a product is dominated by the sum of the seminorm applied to the\nfactors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.mul_le'\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">mul_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L76-L76","name":"GroupSeminorm.map_one'","line":76,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.map_one'","doc":"The image of one is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.map_one'\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">map_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L74-L74","name":"GroupSeminorm.toFun","line":74,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.toFun","doc":"The bare function of a `GroupSeminorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.toFun\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L72-L72","name":"GroupSeminorm.mk","line":72,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm.mk\"><span class=\"name\">GroupSeminorm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFun : <span class=\"fn\"><span class=\"fn\">G</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map_one' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mul_le' : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">y</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inv' : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\">GroupSeminorm</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L69-L81","name":"GroupSeminorm","line":69,"kind":"structure","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm","doc":"A seminorm on a group `G` is a function `f : G → ℝ` that sends one to zero, is submultiplicative\nand such that `f x⁻¹ = f x` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#GroupSeminorm\"><span class=\"name\">GroupSeminorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_6</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L67-L67","name":"AddGroupSeminorm.neg'","line":67,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.neg'","doc":"The seminorm is invariant under negation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.neg'\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L65-L65","name":"AddGroupSeminorm.add_le'","line":65,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_le'","doc":"The seminorm is subadditive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.add_le'\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">add_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r s : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L63-L63","name":"AddGroupSeminorm.map_zero'","line":63,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.map_zero'","doc":"The image of zero is zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.map_zero'\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">map_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L61-L61","name":"AddGroupSeminorm.toFun","line":61,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toFun","doc":"The bare function of an `AddGroupSeminorm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.toFun\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L57-L57","name":"AddGroupSeminorm.mk","line":57,"kind":"ctor","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm.mk\"><span class=\"name\">AddGroupSeminorm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFun : <span class=\"fn\"><span class=\"fn\">G</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map_zero' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(add_le' : <span class=\"fn\">∀ (<span class=\"fn\">r </span><span class=\"fn\">s</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">s</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(neg' : <span class=\"fn\">∀ (<span class=\"fn\">r</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">r</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\">AddGroupSeminorm</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Analysis/Normed/Group/Seminorm.lean#L55-L67","name":"AddGroupSeminorm","line":55,"kind":"structure","docLink":"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm","doc":"A seminorm on an additive group `G` is a function `f : G → ℝ` that preserves zero, is\nsubadditive and such that `f (-x) = f x` for all `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Seminorm.html#AddGroupSeminorm\"><span class=\"name\">AddGroupSeminorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_6</div></div>"}]}