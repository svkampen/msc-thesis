{"name":"Mathlib.Algebra.AddTorsor","instances":[{"typeNames":[],"name":"addGroupIsAddTorsor","className":"AddTorsor"},{"typeNames":["Prod","Prod"],"name":"Prod.instAddTorsor","className":"AddTorsor"},{"typeNames":[],"name":"Pi.instAddTorsor","className":"AddTorsor"}],"imports":["Init","Mathlib.Algebra.Group.Action.Basic","Mathlib.Algebra.Group.Pointwise.Set.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L429-L432","name":"AddTorsor.subsingleton_iff","line":429,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#AddTorsor.subsingleton_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor.subsingleton_iff\"><span class=\"name\">AddTorsor</span>.<span class=\"name\">subsingleton_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L424-L425","name":"Equiv.injective_pointReflection_left_of_injective_bit0","line":424,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.injective_pointReflection_left_of_injective_bit0","doc":"**Alias** of `Equiv.injective_pointReflection_left_of_injective_two_nsmul`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.injective_pointReflection_left_of_injective_bit0\"><span class=\"name\">Equiv</span>.<span class=\"name\">injective_pointReflection_left_of_injective_bit0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L416-L422","name":"Equiv.injective_pointReflection_left_of_injective_two_nsmul","line":416,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.injective_pointReflection_left_of_injective_two_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.injective_pointReflection_left_of_injective_two_nsmul\"><span class=\"name\">Equiv</span>.<span class=\"name\">injective_pointReflection_left_of_injective_two_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L412-L413","name":"Equiv.pointReflection_fixed_iff_of_injective_bit0","line":412,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_fixed_iff_of_injective_bit0","doc":"**Alias** of `Equiv.pointReflection_fixed_iff_of_injective_two_nsmul`.\n\n---\n\n`x` is the only fixed point of `pointReflection x`. This lemma requires\n`x + x = y + y ↔ x = y`. There is no typeclass to use here, so we add it as an explicit argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_fixed_iff_of_injective_bit0\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_fixed_iff_of_injective_bit0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L405-L410","name":"Equiv.pointReflection_fixed_iff_of_injective_two_nsmul","line":405,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_fixed_iff_of_injective_two_nsmul","doc":"`x` is the only fixed point of `pointReflection x`. This lemma requires\n`x + x = y + y ↔ x = y`. There is no typeclass to use here, so we add it as an explicit argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_fixed_iff_of_injective_two_nsmul\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_fixed_iff_of_injective_two_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L402-L403","name":"Equiv.pointReflection_involutive","line":402,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_involutive\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L398-L400","name":"Equiv.pointReflection_self","line":398,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_self\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L394-L396","name":"Equiv.pointReflection_symm","line":394,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_symm\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">Equiv.symm</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L390-L392","name":"Equiv.right_vsub_pointReflection","line":390,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.right_vsub_pointReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.right_vsub_pointReflection\"><span class=\"name\">Equiv</span>.<span class=\"name\">right_vsub_pointReflection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L386-L388","name":"Equiv.pointReflection_vsub_right","line":386,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_vsub_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_vsub_right\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_vsub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">y</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L382-L384","name":"Equiv.left_vsub_pointReflection","line":382,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.left_vsub_pointReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.left_vsub_pointReflection\"><span class=\"name\">Equiv</span>.<span class=\"name\">left_vsub_pointReflection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L378-L380","name":"Equiv.pointReflection_vsub_left","line":378,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_vsub_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_vsub_left\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_vsub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L375-L376","name":"Equiv.pointReflection_apply","line":375,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection_apply\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\">Equiv.pointReflection</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">y</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L371-L373","name":"Equiv.pointReflection","line":371,"kind":"def","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection","doc":"Point reflection in `x` as a permutation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.pointReflection\"><span class=\"name\">Equiv</span>.<span class=\"name\">pointReflection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L359-L363","name":"Equiv.constVAddHom","line":359,"kind":"def","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAddHom","doc":"`Equiv.constVAdd` as a homomorphism from `Multiplicative G` to `Equiv.perm P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAddHom\"><span class=\"name\">Equiv</span>.<span class=\"name\">constVAddHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L355-L357","name":"Equiv.constVAdd_add","line":355,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd_add\"><span class=\"name\">Equiv</span>.<span class=\"name\">constVAdd_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ v₂ : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd\">Equiv.constVAdd</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\">v₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">v₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd\">Equiv.constVAdd</a> <span class=\"fn\">P</span> <span class=\"fn\">v₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd\">Equiv.constVAdd</a> <span class=\"fn\">P</span> <span class=\"fn\">v₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L349-L351","name":"Equiv.constVAdd_zero","line":349,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd_zero\"><span class=\"name\">Equiv</span>.<span class=\"name\">constVAdd_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd\">Equiv.constVAdd</a> <span class=\"fn\">P</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L345-L345","name":"Equiv.coe_constVAdd","line":345,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_constVAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_constVAdd\"><span class=\"name\">Equiv</span>.<span class=\"name\">coe_constVAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd\">Equiv.constVAdd</a> <span class=\"fn\">P</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L338-L343","name":"Equiv.constVAdd","line":338,"kind":"def","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd","doc":"The permutation given by `p ↦ v +ᵥ p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVAdd\"><span class=\"name\">Equiv</span>.<span class=\"name\">constVAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L332-L334","name":"Equiv.coe_constVSub_symm","line":332,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_constVSub_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_constVSub_symm\"><span class=\"name\">Equiv</span>.<span class=\"name\">coe_constVSub_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVSub\">Equiv.constVSub</a> <span class=\"fn\">p</span>)</span>.symm</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">v</span></span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L330-L330","name":"Equiv.coe_constVSub","line":330,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_constVSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_constVSub\"><span class=\"name\">Equiv</span>.<span class=\"name\">coe_constVSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVSub\">Equiv.constVSub</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L323-L328","name":"Equiv.constVSub","line":323,"kind":"def","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.constVSub","doc":"`p' ↦ p -ᵥ p'` as an equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.constVSub\"><span class=\"name\">Equiv</span>.<span class=\"name\">constVSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L319-L321","name":"Equiv.coe_vaddConst_symm","line":319,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_vaddConst_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_vaddConst_symm\"><span class=\"name\">Equiv</span>.<span class=\"name\">coe_vaddConst_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.vaddConst\">Equiv.vaddConst</a> <span class=\"fn\">p</span>)</span>.symm</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">p'</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">p'</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L315-L317","name":"Equiv.coe_vaddConst","line":315,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_vaddConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.coe_vaddConst\"><span class=\"name\">Equiv</span>.<span class=\"name\">coe_vaddConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.vaddConst\">Equiv.vaddConst</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L308-L313","name":"Equiv.vaddConst","line":308,"kind":"def","docLink":"./Mathlib/Algebra/AddTorsor.html#Equiv.vaddConst","doc":"`v ↦ v +ᵥ p` as an equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Equiv.vaddConst\"><span class=\"name\">Equiv</span>.<span class=\"name\">vaddConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L293-L300","name":"Pi.instAddTorsor","line":293,"kind":"instance","docLink":"./Mathlib/Algebra/AddTorsor.html#Pi.instAddTorsor","doc":"A product of `AddTorsor`s is an `AddTorsor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Pi.instAddTorsor\"><span class=\"name\">Pi</span>.<span class=\"name\">instAddTorsor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fg : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">fg</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fp : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">(<span class=\"fn\">fg</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">fp</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><span class=\"fn\">fg</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><span class=\"fn\">fp</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L278-L281","name":"Prod.mk_vsub_mk","line":278,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.mk_vsub_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.mk_vsub_mk\"><span class=\"name\">Prod</span>.<span class=\"name\">mk_vsub_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₁' p₂' : <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span>, <span class=\"fn\">p₁'</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">(<span class=\"fn\">p₂</span>, <span class=\"fn\">p₂'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span>, <span class=\"fn\"><span class=\"fn\">p₁'</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L274-L276","name":"Prod.snd_vsub","line":274,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.snd_vsub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.snd_vsub\"><span class=\"name\">Prod</span>.<span class=\"name\">snd_vsub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">P'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L270-L272","name":"Prod.fst_vsub","line":270,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.fst_vsub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.fst_vsub\"><span class=\"name\">Prod</span>.<span class=\"name\">fst_vsub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">P'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.1</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L266-L268","name":"Prod.mk_vadd_mk","line":266,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.mk_vadd_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.mk_vadd_mk\"><span class=\"name\">Prod</span>.<span class=\"name\">mk_vadd_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v' : <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p' : <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span>, <span class=\"fn\">v'</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">(<span class=\"fn\">p</span>, <span class=\"fn\">p'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span>, <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L262-L264","name":"Prod.snd_vadd","line":262,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.snd_vadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.snd_vadd\"><span class=\"name\">Prod</span>.<span class=\"name\">snd_vadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">P'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.2</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\"><span class=\"fn\">p</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L258-L260","name":"Prod.fst_vadd","line":258,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.fst_vadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.fst_vadd\"><span class=\"name\">Prod</span>.<span class=\"name\">fst_vadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">P'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.1</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\"><span class=\"fn\">p</span>.1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L241-L247","name":"Prod.instAddTorsor","line":241,"kind":"instance","docLink":"./Mathlib/Algebra/AddTorsor.html#Prod.instAddTorsor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Prod.instAddTorsor\"><span class=\"name\">Prod</span>.<span class=\"name\">instAddTorsor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G'</span> <span class=\"fn\">P'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">(<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G'</span>)</span> <span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">P'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L232-L233","name":"vsub_sub_vsub_comm","line":232,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_sub_vsub_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_sub_vsub_comm\"><span class=\"name\">vsub_sub_vsub_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ p₃ p₄ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">p₃</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₄</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">p₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₄</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L228-L230","name":"vadd_eq_vadd_iff_sub_eq_vsub","line":228,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_eq_vadd_iff_sub_eq_vsub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_eq_vadd_iff_sub_eq_vsub\"><span class=\"name\">vadd_eq_vadd_iff_sub_eq_vsub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v₁ v₂ : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v₂</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L224-L226","name":"vsub_vadd_comm","line":224,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_vadd_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_vadd_comm\"><span class=\"name\">vsub_vadd_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ p₃ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₃</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L220-L222","name":"vadd_vsub_vadd_cancel_left","line":220,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_vadd_cancel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_vadd_cancel_left\"><span class=\"name\">vadd_vsub_vadd_cancel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₁</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">(<span class=\"fn\">v</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L215-L218","name":"vsub_sub_vsub_cancel_left","line":215,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_sub_vsub_cancel_left","doc":"Cancellation subtracting the results of two subtractions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_sub_vsub_cancel_left\"><span class=\"name\">vsub_sub_vsub_cancel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ p₃ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₃</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">p₃</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₁</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L204-L207","name":"vsub_right_injective","line":204,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_right_injective","doc":"Subtracting a point from the point `p` is an injective\nfunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_right_injective\"><span class=\"name\">vsub_right_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L198-L202","name":"vsub_right_cancel_iff","line":198,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_right_cancel_iff","doc":"Subtracting two points from the same point produces equal results\nif and only if those points are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_right_cancel_iff\"><span class=\"name\">vsub_right_cancel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ p : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L192-L196","name":"vsub_right_cancel","line":192,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_right_cancel","doc":"If subtracting two points from the same point produces equal\nresults, those points are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_right_cancel\"><span class=\"name\">vsub_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ p : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L188-L190","name":"vsub_left_injective","line":188,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_left_injective","doc":"Subtracting the point `p` is an injective function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_left_injective\"><span class=\"name\">vsub_left_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L182-L186","name":"vsub_left_cancel_iff","line":182,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_left_cancel_iff","doc":"The same point subtracted from two points produces equal results\nif and only if those points are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_left_cancel_iff\"><span class=\"name\">vsub_left_cancel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ p : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L177-L180","name":"vsub_left_cancel","line":177,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_left_cancel","doc":"If the same point subtracted from two points produces equal\nresults, those points are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_left_cancel\"><span class=\"name\">vsub_left_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ p : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L173-L175","name":"vadd_vsub_vadd_cancel_right","line":173,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_vadd_cancel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_vadd_cancel_right\"><span class=\"name\">vadd_vsub_vadd_cancel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ v₂ : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">(<span class=\"fn\">v₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L168-L169","name":"Set.singleton_vsub_self","line":168,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#Set.singleton_vsub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#Set.singleton_vsub_self\"><span class=\"name\">Set</span>.<span class=\"name\">singleton_vsub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">p</span>}</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">{<span class=\"fn\">p</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L160-L162","name":"vadd_eq_vadd_iff_neg_add_eq_vsub","line":160,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_eq_vadd_iff_neg_add_eq_vsub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_eq_vadd_iff_neg_add_eq_vsub\"><span class=\"name\">vadd_eq_vadd_iff_neg_add_eq_vsub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v₁ v₂ : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">v₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">v₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L154-L158","name":"eq_vadd_iff_vsub_eq","line":154,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#eq_vadd_iff_vsub_eq","doc":"Convert between an equality with adding a group element to a point\nand an equality of a subtraction of two points with a group\nelement. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#eq_vadd_iff_vsub_eq\"><span class=\"name\">eq_vadd_iff_vsub_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L149-L152","name":"vsub_sub_vsub_cancel_right","line":149,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_sub_vsub_cancel_right","doc":"Cancellation subtracting the results of two subtractions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_sub_vsub_cancel_right\"><span class=\"name\">vsub_sub_vsub_cancel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ p₃ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">p₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₃</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L143-L147","name":"vsub_vadd_eq_vsub_sub","line":143,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_vadd_eq_vsub_sub","doc":"Subtracting the result of adding a group element produces the same result\nas subtracting the points and subtracting that group element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_vadd_eq_vsub_sub\"><span class=\"name\">vsub_vadd_eq_vsub_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L140-L141","name":"vadd_vsub_eq_sub_vsub","line":140,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_eq_sub_vsub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_eq_sub_vsub\"><span class=\"name\">vadd_vsub_eq_sub_vsub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p q : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">q</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L133-L138","name":"neg_vsub_eq_vsub_rev","line":133,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#neg_vsub_eq_vsub_rev","doc":"Subtracting two points in the reverse order produces the negation\nof subtracting them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#neg_vsub_eq_vsub_rev\"><span class=\"name\">neg_vsub_eq_vsub_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L127-L131","name":"vsub_add_vsub_cancel","line":127,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_add_vsub_cancel","doc":"Cancellation adding the results of two subtractions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_add_vsub_cancel\"><span class=\"name\">vsub_add_vsub_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ p₃ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\">p₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₃</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L124-L125","name":"vsub_ne_zero","line":124,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_ne_zero\"><span class=\"name\">vsub_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L118-L122","name":"vsub_eq_zero_iff_eq","line":118,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_eq_zero_iff_eq","doc":"Subtracting two points produces 0 if and only if they are\nequal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_eq_zero_iff_eq\"><span class=\"name\">vsub_eq_zero_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L114-L116","name":"eq_of_vsub_eq_zero","line":114,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#eq_of_vsub_eq_zero","doc":"If subtracting two points produces 0, they are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#eq_of_vsub_eq_zero\"><span class=\"name\">eq_of_vsub_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ p₂ : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L109-L112","name":"vsub_self","line":109,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_self","doc":"Subtracting a point from itself produces 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_self\"><span class=\"name\">vsub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L102-L107","name":"vadd_vsub_assoc","line":102,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_assoc","doc":"Adding a group element to a point, then subtracting another point,\nproduces the same result as subtracting the points then adding the\ngroup element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_vsub_assoc\"><span class=\"name\">vadd_vsub_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₁</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L97-L100","name":"vadd_right_injective","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_right_injective","doc":"Adding a group element to the point `p` is an injective\nfunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_right_injective\"><span class=\"name\">vadd_right_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L93-L95","name":"vadd_right_cancel_iff","line":93,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_right_cancel_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_right_cancel_iff\"><span class=\"name\">vadd_right_cancel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g₁ g₂ : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L87-L91","name":"vadd_right_cancel","line":87,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_right_cancel","doc":"If the same point added to two group elements produces equal\nresults, those group elements are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_right_cancel\"><span class=\"name\">vadd_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g₁ g₂ : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L81-L85","name":"vadd_vsub","line":81,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vadd_vsub","doc":"Adding a group element then subtracting the original point\nproduces that group element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vadd_vsub\"><span class=\"name\">vadd_vsub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L75-L79","name":"vsub_vadd","line":75,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_vadd","doc":"Adding the result of subtracting from another point produces that\npoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_vadd\"><span class=\"name\">vsub_vadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L65-L69","name":"vsub_eq_sub","line":65,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#vsub_eq_sub","doc":"Simplify subtraction for a torsor for an `AddGroup G` over\nitself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#vsub_eq_sub\"><span class=\"name\">vsub_eq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g₁ g₂ : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">g₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L57-L63","name":"addGroupIsAddTorsor","line":57,"kind":"instance","docLink":"./Mathlib/Algebra/AddTorsor.html#addGroupIsAddTorsor","doc":"An `AddGroup G` is a torsor for itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#addGroupIsAddTorsor\"><span class=\"name\">addGroupIsAddTorsor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L52-L52","name":"AddTorsor.vadd_vsub'","line":52,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#AddTorsor.vadd_vsub'","doc":"Torsor addition and subtraction with the same element cancels out. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor.vadd_vsub'\"><span class=\"name\">AddTorsor</span>.<span class=\"name\">vadd_vsub'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L50-L50","name":"AddTorsor.vsub_vadd'","line":50,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#AddTorsor.vsub_vadd'","doc":"Torsor subtraction and addition with the same element cancels out. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor.vsub_vadd'\"><span class=\"name\">AddTorsor</span>.<span class=\"name\">vsub_vadd'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ p₂ : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L48-L48","name":"AddTorsor.nonempty","line":48,"kind":"theorem","docLink":"./Mathlib/Algebra/AddTorsor.html#AddTorsor.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor.nonempty\"><span class=\"name\">AddTorsor</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{inst✝ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L46-L46","name":"AddTorsor.mk","line":46,"kind":"ctor","docLink":"./Mathlib/Algebra/AddTorsor.html#AddTorsor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor.mk\"><span class=\"name\">AddTorsor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toAddAction : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#AddAction\">AddAction</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toVSub : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#VSub\">VSub</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[nonempty : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(vsub_vadd' : <span class=\"fn\">∀ (<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p₁</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p₂</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vadd_vsub' : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>) (<span class=\"fn\">p</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">p</span>)</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#VSub.vsub\">-ᵥ</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\">AddTorsor</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Algebra/AddTorsor.lean#L41-L52","name":"AddTorsor","line":41,"kind":"class","docLink":"./Mathlib/Algebra/AddTorsor.html#AddTorsor","doc":"An `AddTorsor G P` gives a structure to the nonempty type `P`,\nacted on by an `AddGroup G` with a transitive and free action given\nby the `+ᵥ` operation and a corresponding subtraction given by the\n`-ᵥ` operation. In the case of a vector space, it is an affine\nspace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/AddTorsor.html#AddTorsor\"><span class=\"name\">AddTorsor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#AddAction\">AddAction</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#VSub\">VSub</a> <span class=\"fn\">G</span> <span class=\"fn\">P</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}