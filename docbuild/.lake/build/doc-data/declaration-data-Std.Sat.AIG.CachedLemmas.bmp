{"name":"Std.Sat.AIG.CachedLemmas","instances":[{"typeNames":["Std.Sat.AIG.mkAtomCached"],"name":"Std.Sat.AIG.instLawfulOperatorMkAtomCached","className":"Std.Sat.AIG.LawfulOperator"},{"typeNames":["Std.Sat.AIG.mkConstCached"],"name":"Std.Sat.AIG.instLawfulOperatorBoolMkConstCached","className":"Std.Sat.AIG.LawfulOperator"},{"typeNames":["Std.Sat.AIG.GateInput","Std.Sat.AIG.mkGateCached"],"name":"Std.Sat.AIG.instLawfulOperatorGateInputMkGateCached","className":"Std.Sat.AIG.LawfulOperator"}],"imports":["Std.Sat.AIG.Cached"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L325-L336","name":"Std.Sat.AIG.mkGateCached_eval_eq_mkGate_eval","line":325,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_eval_eq_mkGate_eval","doc":"The central equality theorem between `mkGateCached` and `mkGate`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_eval_eq_mkGate_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached_eval_eq_mkGate_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkGateCached</span> <span class=\"fn\">input</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkGate</span> <span class=\"fn\">input</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L284-L323","name":"Std.Sat.AIG.mkGateCached.go_eval_eq_mkGate_eval","line":284,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_eval_eq_mkGate_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_eval_eq_mkGate_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached</span>.<span class=\"name\">go_eval_eq_mkGate_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">Std.Sat.AIG.mkGateCached.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkGate</span> <span class=\"fn\">input</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L278-L282","name":"Std.Sat.AIG.instLawfulOperatorGateInputMkGateCached","line":278,"kind":"instance","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorGateInputMkGateCached","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorGateInputMkGateCached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">instLawfulOperatorGateInputMkGateCached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">Std.Sat.AIG.GateInput</span> <span class=\"fn\">Std.Sat.AIG.mkGateCached</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L263-L276","name":"Std.Sat.AIG.mkGateCached_decl_eq","line":263,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_decl_eq","doc":"The AIG produced by `AIG.mkGateCached` agrees with the input AIG on all indices that are valid for\nboth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkGateCached</span> <span class=\"fn\">input</span>)</span>.aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkGateCached</span> <span class=\"fn\">input</span>)</span>.aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L215-L261","name":"Std.Sat.AIG.mkGateCached.go_decl_eq","line":215,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_decl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached</span>.<span class=\"name\">go_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">Std.Sat.AIG.mkGateCached.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">Std.Sat.AIG.mkGateCached.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L205-L213","name":"Std.Sat.AIG.mkGateCached_le_size","line":205,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_le_size","doc":"`AIG.mkGateCached` never shrinks the underlying AIG.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkGateCached</span> <span class=\"fn\">input</span>)</span>.aig</span>.decls</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L187-L203","name":"Std.Sat.AIG.mkGateCached.go_le_size","line":187,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached</span>.<span class=\"name\">go_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">Std.Sat.AIG.mkGateCached.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.aig</span>.decls</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L170-L185","name":"Std.Sat.AIG.denote_mkGate_cached","line":170,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkGate_cached","doc":"If we find a cached gate declaration in the AIG, denoting it is equivalent to denoting `AIG.mkGate`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkGate_cached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">denote_mkGate_cached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{input : <span class=\"fn\"><span class=\"fn\">aig</span>.GateInput</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hit :\n  <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">Std.Sat.AIG.CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>\n    <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Std.Sat.AIG.Decl.gate</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.lhs</span>.ref</span>.gate</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.rhs</span>.ref</span>.gate</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.lhs</span>.inv</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.rhs</span>.inv</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Std.Sat.AIG.Decl.gate</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.lhs</span>.ref</span>.gate</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.rhs</span>.ref</span>.gate</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.lhs</span>.inv</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.rhs</span>.inv</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\"><span class=\"fn\">hit</span>.idx</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkGate</span> <span class=\"fn\">input</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L158-L168","name":"Std.Sat.AIG.mkConstCached_eval_eq_mkConst_eval","line":158,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_eval_eq_mkConst_eval","doc":"The central equality theorem between `mkConstCached` and `mkConst`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_eval_eq_mkConst_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkConstCached_eval_eq_mkConst_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{val : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkConstCached</span> <span class=\"fn\">val</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkConst</span> <span class=\"fn\">val</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L152-L156","name":"Std.Sat.AIG.instLawfulOperatorBoolMkConstCached","line":152,"kind":"instance","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorBoolMkConstCached","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorBoolMkConstCached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">instLawfulOperatorBoolMkConstCached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>) =&gt; <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> <span class=\"fn\">Std.Sat.AIG.mkConstCached</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L142-L150","name":"Std.Sat.AIG.mkConstCached_le_size","line":142,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_le_size","doc":"`AIG.mkConstCached` never shrinks the underlying AIG.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkConstCached_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkConstCached</span> <span class=\"fn\">val</span>)</span>.aig</span>.decls</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L124-L140","name":"Std.Sat.AIG.mkConstCached_decl_eq","line":124,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_decl_eq","doc":"The AIG produced by `AIG.mkConstCached` agrees with the input AIG on all indices that are valid for\nboth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkConstCached_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hbound : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkConstCached</span> <span class=\"fn\">val</span>)</span>.aig</span>.decls</span>.size</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkConstCached</span> <span class=\"fn\">val</span>)</span>.aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L116-L122","name":"Std.Sat.AIG.mkConstCached_miss_aig","line":116,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_miss_aig","doc":"`mkConstCached` pushes to the input AIG upon a cache miss.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_miss_aig\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkConstCached_miss_aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{val : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcache : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.const\">Std.Sat.AIG.Decl.const</a> <span class=\"fn\">val</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkConstCached</span> <span class=\"fn\">val</span>)</span>.aig</span>.decls</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.push</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.const\">Std.Sat.AIG.Decl.const</a> <span class=\"fn\">val</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L107-L114","name":"Std.Sat.AIG.mkConstCached_hit_aig","line":107,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_hit_aig","doc":"`mkConstCached` does not modify the input AIG upon a cache hit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkConstCached_hit_aig\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkConstCached_hit_aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{val : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hit : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">Std.Sat.AIG.CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.decls</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.const\">Std.Sat.AIG.Decl.const</a> <span class=\"fn\">val</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hcache : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.const\">Std.Sat.AIG.Decl.const</a> <span class=\"fn\">val</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkConstCached</span> <span class=\"fn\">val</span>)</span>.aig</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aig</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L94-L105","name":"Std.Sat.AIG.denote_mkConst_cached","line":94,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkConst_cached","doc":"If we find a cached const declaration in the AIG, denoting it is equivalent to denoting\n`AIG.mkConst`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkConst_cached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">denote_mkConst_cached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hit : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">Std.Sat.AIG.CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.decls</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.const\">Std.Sat.AIG.Decl.const</a> <span class=\"fn\">b</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.const\">Std.Sat.AIG.Decl.const</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\"><span class=\"fn\">hit</span>.idx</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkConst</span> <span class=\"fn\">b</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L82-L92","name":"Std.Sat.AIG.mkAtomCached_eval_eq_mkAtom_eval","line":82,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_eval_eq_mkAtom_eval","doc":"The central equality theorem between `mkAtomCached` and `mkAtom`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_eval_eq_mkAtom_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_eval_eq_mkAtom_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkAtomCached</span> <span class=\"fn\">var</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkAtom</span> <span class=\"fn\">var</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L78-L80","name":"Std.Sat.AIG.instLawfulOperatorMkAtomCached","line":78,"kind":"instance","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorMkAtomCached","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorMkAtomCached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">instLawfulOperatorMkAtomCached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Std.Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">α</span>)</span> <span class=\"fn\">Std.Sat.AIG.mkAtomCached</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L68-L76","name":"Std.Sat.AIG.mkAtomCached_le_size","line":68,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_le_size","doc":"`AIG.mkAtomCached` never shrinks the underlying AIG.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(var : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkAtomCached</span> <span class=\"fn\">var</span>)</span>.aig</span>.decls</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L50-L66","name":"Std.Sat.AIG.mkAtomCached_decl_eq","line":50,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_decl_eq","doc":"The AIG produced by `AIG.mkAtomCached` agrees with the input AIG on all indices that are valid for\nboth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(var : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hbound : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkAtomCached</span> <span class=\"fn\">var</span>)</span>.aig</span>.decls</span>.size</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkAtomCached</span> <span class=\"fn\">var</span>)</span>.aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>[<span class=\"fn\">idx</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L42-L48","name":"Std.Sat.AIG.mkAtomCached_miss_aig","line":42,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_miss_aig","doc":"`mkAtomCached` pushes to the input AIG upon a cache miss.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_miss_aig\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_miss_aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcache : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Std.Sat.AIG.Decl.atom</a> <span class=\"fn\">var</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkAtomCached</span> <span class=\"fn\">var</span>)</span>.aig</span>.decls</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.push</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Std.Sat.AIG.Decl.atom</a> <span class=\"fn\">var</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L34-L40","name":"Std.Sat.AIG.mkAtomCached_hit_aig","line":34,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_hit_aig","doc":"`mkAtomCached` does not modify the input AIG upon a cache hit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_hit_aig\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_hit_aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hit : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">Std.Sat.AIG.CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.decls</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Std.Sat.AIG.Decl.atom</a> <span class=\"fn\">var</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hcache : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Std.Sat.AIG.Decl.atom</a> <span class=\"fn\">var</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.mkAtomCached</span> <span class=\"fn\">var</span>)</span>.aig</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aig</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Sat/AIG/CachedLemmas.lean#L22-L32","name":"Std.Sat.AIG.denote_mkAtom_cached","line":22,"kind":"theorem","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkAtom_cached","doc":"If we find a cached atom declaration in the AIG, denoting it is equivalent to denoting `AIG.mkAtom`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkAtom_cached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">denote_mkAtom_cached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hit : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">Std.Sat.AIG.CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.decls</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Std.Sat.AIG.Decl.atom</a> <span class=\"fn\">v</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.cache</span>.get?</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Std.Sat.AIG.Decl.atom</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\"><span class=\"fn\">hit</span>.idx</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.mkAtom</span> <span class=\"fn\">v</span></span>⟧</span></span></span></div></div>"}]}