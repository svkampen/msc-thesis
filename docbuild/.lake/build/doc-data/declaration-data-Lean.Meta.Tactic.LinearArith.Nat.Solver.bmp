{"name":"Lean.Meta.Tactic.LinearArith.Nat.Solver","instances":[],"imports":["Lean.Meta.Tactic.LinearArith.Solver","Lean.Meta.Tactic.LinearArith.Nat.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L23-L23","name":"Lean.Meta.Linear.Nat.Collect.M","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Î± : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L21-L21","name":"Lean.Meta.Linear.Nat.Collect.State.cnstrs","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State.cnstrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State.cnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State\">Lean.Meta.Linear.Nat.Collect.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr\">Lean.Meta.Linear.Nat.Collect.Cnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L20-L20","name":"Lean.Meta.Linear.Nat.Collect.State.mk","line":20,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cnstrs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr\">Lean.Meta.Linear.Nat.Collect.Cnstr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State\">Lean.Meta.Linear.Nat.Collect.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L20-L21","name":"Lean.Meta.Linear.Nat.Collect.State","line":20,"kind":"structure","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L18-L18","name":"Lean.Meta.Linear.Nat.Collect.Cnstr.proof","line":18,"kind":"def","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr\">Lean.Meta.Linear.Nat.Collect.Cnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L17-L17","name":"Lean.Meta.Linear.Nat.Collect.Cnstr.cnstr","line":17,"kind":"def","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr.cnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr.cnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">cnstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr\">Lean.Meta.Linear.Nat.Collect.Cnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.LinearArith\">Lean.Meta.Linear.Nat.Collect.LinearArith</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L16-L16","name":"Lean.Meta.Linear.Nat.Collect.Cnstr.mk","line":16,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cnstr : <a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.LinearArith\">Lean.Meta.Linear.Nat.Collect.LinearArith</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr\">Lean.Meta.Linear.Nat.Collect.Cnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L16-L18","name":"Lean.Meta.Linear.Nat.Collect.Cnstr","line":16,"kind":"structure","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.Cnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">Cnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/LinearArith/Nat/Solver.lean#L14-L14","name":"Lean.Meta.Linear.Nat.Collect.LinearArith","line":14,"kind":"inductive","docLink":"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.LinearArith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LinearArith/Nat/Solver.html#Lean.Meta.Linear.Nat.Collect.LinearArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Nat</span>.<span class=\"name\">Collect</span>.<span class=\"name\">LinearArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}