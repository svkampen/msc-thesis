{"name":"Init.Data.List.Sort.Impl","instances":[],"imports":["Init.Data.List.Sort.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L233-L235","name":"List.MergeSort.Internal.mergeSort_eq_mergeSortTR₂","line":233,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSort_eq_mergeSortTR₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSort_eq_mergeSortTR₂\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSort_eq_mergeSortTR₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Basic.html#List.mergeSort\">@<a href=\"./Init/Data/List/Sort/Basic.html#List.mergeSort\">List.mergeSort</a></a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂\">@<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂\">List.MergeSort.Internal.mergeSortTR₂</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L198-L229","name":"List.MergeSort.Internal.mergeSortTR₂_run'_eq_mergeSort","line":198,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂_run'_eq_mergeSort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂_run'_eq_mergeSort\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR₂_run'_eq_mergeSort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.val</span>.reverse</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂.run'\">List.MergeSort.Internal.mergeSortTR₂.run'</a> <span class=\"fn\">le</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l'</span>.mergeSort</span> <span class=\"fn\">le</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L186-L196","name":"List.MergeSort.Internal.mergeSortTR₂_run_eq_mergeSort","line":186,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂_run_eq_mergeSort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂_run_eq_mergeSort\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR₂_run_eq_mergeSort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂.run\">List.MergeSort.Internal.mergeSortTR₂.run</a> <span class=\"fn\">le</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.val</span>.mergeSort</span> <span class=\"fn\">le</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L179-L181","name":"List.MergeSort.Internal.mergeSort_eq_mergeSortTR","line":179,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSort_eq_mergeSortTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSort_eq_mergeSortTR\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSort_eq_mergeSortTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Basic.html#List.mergeSort\">@<a href=\"./Init/Data/List/Sort/Basic.html#List.mergeSort\">List.mergeSort</a></a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR\">@<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR\">List.MergeSort.Internal.mergeSortTR</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L169-L176","name":"List.MergeSort.Internal.mergeSortTR_run_eq_mergeSort","line":169,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR_run_eq_mergeSort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR_run_eq_mergeSort\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR_run_eq_mergeSort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR.run\">List.MergeSort.Internal.mergeSortTR.run</a> <span class=\"fn\">le</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.val</span>.mergeSort</span> <span class=\"fn\">le</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L165-L167","name":"List.MergeSort.Internal.splitRevInTwo_snd","line":165,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo_snd\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevInTwo_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo\">List.MergeSort.Internal.splitRevInTwo</a> <span class=\"fn\">l</span>)</span>.snd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Basic.html#List.splitInTwo\">List.splitInTwo</a> <span class=\"fn\">l</span>)</span>.snd</span>.val</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L162-L164","name":"List.MergeSort.Internal.splitRevInTwo_fst","line":162,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo_fst\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevInTwo_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo\">List.MergeSort.Internal.splitRevInTwo</a> <span class=\"fn\">l</span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Basic.html#List.splitInTwo\">List.splitInTwo</a> <span class=\"fn\">l</span>)</span>.fst</span>.val</span>.reverse</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L155-L161","name":"List.MergeSort.Internal.splitRevInTwo'_snd","line":155,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'_snd\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevInTwo'_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'\">List.MergeSort.Internal.splitRevInTwo'</a> <span class=\"fn\">l</span>)</span>.snd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Basic.html#List.splitInTwo\">List.splitInTwo</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.val</span>.reverse</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.fst</span>.val</span>.reverse</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L149-L154","name":"List.MergeSort.Internal.splitRevInTwo'_fst","line":149,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'_fst\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevInTwo'_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'\">List.MergeSort.Internal.splitRevInTwo'</a> <span class=\"fn\">l</span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Sort/Basic.html#List.splitInTwo\">List.splitInTwo</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.val</span>.reverse</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.snd</span>.val</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L142-L147","name":"List.MergeSort.Internal.mergeSortTR₂.run'","line":142,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂.run'\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR₂</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact fun a b =&gt; a ≤ b)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L136-L141","name":"List.MergeSort.Internal.mergeSortTR₂.run","line":136,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂.run\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR₂</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact fun a b =&gt; a ≤ b)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L127-L147","name":"List.MergeSort.Internal.mergeSortTR₂","line":127,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂","doc":"Faster version of `mergeSortTR`, which avoids unnecessary list reversals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR₂\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact fun a b =&gt; a ≤ b)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L118-L125","name":"List.MergeSort.Internal.splitRevInTwo'","line":118,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'","doc":"Split a list in two equal parts, reversing the first part.\nIf the length is odd, the second part will be one element longer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo'\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevInTwo'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span> }</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L109-L116","name":"List.MergeSort.Internal.splitRevInTwo","line":109,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo","doc":"Split a list in two equal parts, reversing the first part.\nIf the length is odd, the first part will be one element longer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevInTwo\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevInTwo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span> }</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L102-L107","name":"List.MergeSort.Internal.mergeSortTR.run","line":102,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR.run\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact fun a b =&gt; a ≤ b)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> }</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L93-L107","name":"List.MergeSort.Internal.mergeSortTR","line":93,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR","doc":"An intermediate speed-up for `mergeSort`.\nThis version uses the tail-recurive `mergeTR` function as a subroutine.\n\nThis is not the final version we use at runtime, as `mergeSortTR₂` is faster.\nThis definition is useful as an intermediate step in proving the `@[csimp]` lemma for `mergeSortTR₂`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeSortTR\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeSortTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact fun a b =&gt; a ≤ b)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L90-L91","name":"List.MergeSort.Internal.splitRevAt_eq","line":90,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt_eq\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevAt_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt\">List.MergeSort.Internal.splitRevAt</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span>.reverse</span>, <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L79-L88","name":"List.MergeSort.Internal.splitRevAt_go","line":79,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt_go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt_go\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevAt_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt.go\">List.MergeSort.Internal.splitRevAt.go</a> <span class=\"fn\">xs</span> <span class=\"fn\">n</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">xs</span>)</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">acc</span></span>, <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">xs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L75-L77","name":"List.MergeSort.Internal.splitRevAt.go","line":75,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt.go","doc":"Auxiliary for `splitAtRev`: `splitAtRev.go xs n acc = ((take n xs).reverse ++ acc, drop n xs)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt.go\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevAt</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L66-L77","name":"List.MergeSort.Internal.splitRevAt","line":66,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt","doc":"Variant of `splitAt`, that does not reverse the first list, i.e\n`splitRevAt n l = ((l.take n).reverse, l.drop n)`.\n\nThis exists solely as an optimization for `mergeSortTR` and `mergeSortTR₂`,\nand should not be used elsewhere.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.splitRevAt\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">splitRevAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L62-L64","name":"List.MergeSort.Internal.merge_eq_mergeTR","line":62,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.merge_eq_mergeTR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.merge_eq_mergeTR\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">merge_eq_mergeTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Basic.html#List.merge\">@<a href=\"./Init/Data/List/Sort/Basic.html#List.merge\">List.merge</a></a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR\">@<a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR\">List.MergeSort.Internal.mergeTR</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L52-L60","name":"List.MergeSort.Internal.mergeTR_go_eq","line":52,"kind":"theorem","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR_go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR_go_eq\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeTR_go_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α✝ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ l₂ acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR.go\">List.MergeSort.Internal.mergeTR.go</a> <span class=\"fn\">le</span> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.merge</span> <span class=\"fn\">l₂</span> <span class=\"fn\">le</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L43-L50","name":"List.MergeSort.Internal.mergeTR.go","line":43,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR.go\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/List/Sort/Impl.lean#L38-L50","name":"List.MergeSort.Internal.mergeTR","line":38,"kind":"def","docLink":"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR","doc":"`O(min |l| |r|)`. Merge two lists using `le` as a switch.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Sort/Impl.html#List.MergeSort.Internal.mergeTR\"><span class=\"name\">List</span>.<span class=\"name\">MergeSort</span>.<span class=\"name\">Internal</span>.<span class=\"name\">mergeTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"}]}