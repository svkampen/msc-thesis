{"name":"Mathlib.Tactic.Have","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.Binders","Lean.Elab.SyntheticMVars","Lean.Meta.Tactic.Assert"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L57-L83","name":"Mathlib.Tactic.haveLetCore","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.haveLetCore","doc":"Adds hypotheses to the context, turning them into goals to be proved later if their proof terms\naren't provided (`t: Option Term := none`).\n\nIf the bound term is intended to be kept in the context, pass `keepTerm : Bool := true`. This is\nuseful when extending the `let` tactic, which is expected to show the proof term in the infoview.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.haveLetCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">haveLetCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(name : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Mathlib.Tactic.optBinderIdent</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bis : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.letIdBinder</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keepTerm : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L54-L54","name":"Mathlib.Tactic.tacticSuffices_","line":54,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.tacticSuffices_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.tacticSuffices_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticSuffices_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L53-L53","name":"Mathlib.Tactic.tacticLet_","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.tacticLet_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.tacticLet_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticLet_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L52-L52","name":"Mathlib.Tactic.tacticHave_","line":52,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.tacticHave_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.tacticHave_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticHave_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L34-L50","name":"Mathlib.Tactic.haveIdLhs'","line":34,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.haveIdLhs'","doc":"Uses `checkColGt` to prevent\n\n```lean\nhave h\nexact Nat\n```\n\nFrom being interpreted as\n```lean\nhave h\n  exact Nat\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.haveIdLhs'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">haveIdLhs'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L30-L32","name":"Mathlib.Tactic.optBinderIdent.name","line":30,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.optBinderIdent.name","doc":"Retrieves the name of the optional identifier, if provided. Returns `this` otherwise "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.optBinderIdent.name\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">optBinderIdent</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Mathlib.Tactic.optBinderIdent</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Have.lean#L24-L28","name":"Mathlib.Tactic.optBinderIdent","line":24,"kind":"def","docLink":"./Mathlib/Tactic/Have.html#Mathlib.Tactic.optBinderIdent","doc":"A parser for optional binder identifiers "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Have.html#Mathlib.Tactic.optBinderIdent\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">optBinderIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"}]}