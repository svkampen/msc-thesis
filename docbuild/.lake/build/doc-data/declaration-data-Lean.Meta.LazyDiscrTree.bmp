{"name":"Lean.Meta.LazyDiscrTree","instances":[{"typeNames":["Lean.Meta.LazyDiscrTree.Key"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedKey","className":"Inhabited"},{"typeNames":["Lean.Meta.LazyDiscrTree.Key"],"name":"Lean.Meta.LazyDiscrTree.instBEqKey","className":"BEq"},{"typeNames":["Lean.Meta.LazyDiscrTree.Key"],"name":"Lean.Meta.LazyDiscrTree.instReprKey","className":"Repr"},{"typeNames":["Lean.Meta.LazyDiscrTree.Key"],"name":"Lean.Meta.LazyDiscrTree.Key.instHashable","className":"Hashable"},{"typeNames":["_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie"],"name":"Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","className":"EmptyCollection"},{"typeNames":["Lean.Meta.LazyDiscrTree"],"name":"Lean.Meta.LazyDiscrTree.instInhabited","className":"Inhabited"},{"typeNames":["Lean.Meta.LazyDiscrTree.PartialMatch"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree"],"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree","className":"Append"},{"typeNames":["_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedInitResults","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults"],"name":"Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults","className":"Append"}],"imports":["Lean.Meta.CompletionName","Lean.Meta.DiscrTree"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1074-L1091","name":"Lean.Meta.LazyDiscrTree.findMatches","line":1074,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatches","doc":"`findMatches` searches for entries in a lazily initialized discriminator tree.\n\n* `ext` should be an environment extension with an IO.Ref for caching the import lazy\n   discriminator tree.\n* `addEntry` is the function for creating discriminator tree entries from constants.\n* `droppedKeys` contains keys we do not want to consider when searching for matches.\n  It is used for dropping very general keys.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ext : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(addEntry : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(droppedKeys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span> := <span class=\"fn\">[]</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1042-L1072","name":"Lean.Meta.LazyDiscrTree.findMatchesExt","line":1042,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatchesExt","doc":"`findMatchesExt` searches for entries in a lazily initialized discriminator tree.\n\nIt provides some additional capabilities beyond `findMatches` to adjust results\nbased on priority and cache module declarations\n\n* `modulesTreeRef` points to the discriminator tree for local environment.\n  Used for caching and created by `createLocalTree`.\n* `ext` should be an environment extension with an IO.Ref for caching the import lazy\n   discriminator tree.\n* `addEntry` is the function for creating discriminator tree entries from constants.\n* `droppedKeys` contains keys we do not want to consider when searching for matches.\n  It is used for dropping very general keys.\n* `constantsPerTask` stores number of constants in imported modules used to\n  decide when to create new task.\n* `adjustResult` takes the priority and value to produce a final result.\n* `ty` is the expression type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatchesExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findMatchesExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(moduleTreeRef : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ext : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(addEntry : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(droppedKeys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span> := <span class=\"fn\">[]</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(adjustResult : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1029-L1040","name":"Lean.Meta.LazyDiscrTree.findModuleMatches","line":1029,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findModuleMatches","doc":"Returns candidates from this module in this module that match the expression.\n\n* `moduleRef` is a references to a lazy discriminator tree only containing\nthis module's definitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findModuleMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findModuleMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(moduleRef : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1019-L1027","name":"Lean.Meta.LazyDiscrTree.createModuleTreeRef","line":1019,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleTreeRef","doc":"Creates reference for lazy discriminator tree that only contains this module's definitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createModuleTreeRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(entriesForConst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(droppedKeys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1007-L1017","name":"Lean.Meta.LazyDiscrTree.createModuleDiscrTree","line":1007,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleDiscrTree","doc":"Create a discriminator tree for current module declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createModuleDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(entriesForConst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1005-L1005","name":"Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.ref","line":1005,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L1004-L1004","name":"Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.mk","line":1004,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L997-L1005","name":"Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef","line":997,"kind":"structure","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef","doc":"A discriminator tree for the current module's declarations only.\n\nNote. We use different discriminator trees for imported and current module\ndeclarations since imported declarations are typically much more numerous but\nnot changed after the environment is created.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L976-L995","name":"Lean.Meta.LazyDiscrTree.findImportMatches","line":976,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findImportMatches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findImportMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findImportMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ext : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(addEntry : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(droppedKeys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span> := <span class=\"fn\">[]</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L942-L958","name":"Lean.Meta.LazyDiscrTree.createImportedDiscrTree.go","line":942,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedDiscrTree.go","doc":"Allocate constants to tasks according to `constantsPerTask`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedDiscrTree.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createImportedDiscrTree</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cctx : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ngen : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start cnt idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L933-L963","name":"Lean.Meta.LazyDiscrTree.createImportedDiscrTree","line":933,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedDiscrTree","doc":"Create a discriminator tree for imported environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createImportedDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cctx : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ngen : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L930-L931","name":"Lean.Meta.LazyDiscrTree.logImportFailure","line":930,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.logImportFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.logImportFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">logImportFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.ImportFailure\">Lean.Meta.LazyDiscrTree.ImportFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L927-L928","name":"Lean.Meta.LazyDiscrTree.dropKeys","line":927,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">dropKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L913-L925","name":"Lean.Meta.LazyDiscrTree.createLocalPreDiscrTree","line":913,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createLocalPreDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createLocalPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createLocalPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cctx : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Lean.Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ngen : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.ImportData\">Lean.Meta.LazyDiscrTree.ImportData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L907-L911","name":"Lean.Meta.LazyDiscrTree.getChildNgen","line":907,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getChildNgen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getChildNgen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getChildNgen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L860-L861","name":"Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults","line":860,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">instAppendInitResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L854-L858","name":"Lean.Meta.LazyDiscrTree.InitResults.append","line":854,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.append","doc":"Combine two initial results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L849-L850","name":"Lean.Meta.LazyDiscrTree.instInhabitedInitResults","line":849,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedInitResults","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedInitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedInitResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L804-L809","name":"Lean.Meta.LazyDiscrTree.blacklistInsertion","line":804,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.blacklistInsertion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.blacklistInsertion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">blacklistInsertion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L802-L802","name":"Lean.Meta.LazyDiscrTree.Cache.empty","line":802,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ngen : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Lean.Meta.LazyDiscrTree.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L800-L800","name":"Lean.Meta.LazyDiscrTree.Cache.meta","line":800,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.meta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.meta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">meta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Lean.Meta.LazyDiscrTree.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.Cache\">Lean.Meta.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L799-L799","name":"Lean.Meta.LazyDiscrTree.Cache.core","line":799,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Lean.Meta.LazyDiscrTree.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L798-L798","name":"Lean.Meta.LazyDiscrTree.Cache.ngen","line":798,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.ngen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Lean.Meta.LazyDiscrTree.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L797-L797","name":"Lean.Meta.LazyDiscrTree.Cache.mk","line":797,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ngen : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(core : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Lean.Core.Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(meta : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.Cache\">Lean.Meta.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Lean.Meta.LazyDiscrTree.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L797-L800","name":"Lean.Meta.LazyDiscrTree.Cache","line":797,"kind":"structure","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L766-L776","name":"Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry","line":766,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry","doc":"Creates an entry for a subterm of an initial entry.\n\nThis is slightly more efficient than using `fromExpr` on subterms since it avoids a redundant call\nto `whnf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">mkSubEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L756-L764","name":"Lean.Meta.LazyDiscrTree.InitEntry.fromExpr","line":756,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.fromExpr","doc":"Constructs an initial entry from an expression and value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.fromExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">fromExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L752-L752","name":"Lean.Meta.LazyDiscrTree.InitEntry.entry","line":752,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.entry","doc":"Returns rest of entry for later insertion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.entry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">entry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.LazyEntry\">Lean.Meta.LazyDiscrTree.LazyEntry</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L750-L750","name":"Lean.Meta.LazyDiscrTree.InitEntry.key","line":750,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.key","doc":"Return root key for an entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">key</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L748-L748","name":"Lean.Meta.LazyDiscrTree.InitEntry.mk","line":748,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.LazyEntry\">Lean.Meta.LazyDiscrTree.LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L747-L752","name":"Lean.Meta.LazyDiscrTree.InitEntry","line":747,"kind":"structure","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry","doc":"Initial entry in lazy discrimination tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L742-L743","name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree","line":742,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">instAppendPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L732-L740","name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.append","line":732,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.append","doc":"Merge two discrimination trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L707-L707","name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","line":707,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a✝ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L689-L696","name":"Lean.Meta.LazyDiscrTree.getMatch","line":689,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatch","doc":"Find values that match `e` in `d`.\n\nThe results are ordered so that the longest matches in terms of number of\nnon-star keys are first with ties going to earlier operators first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L597-L597","name":"Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch","line":597,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPartialMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">Lean.Meta.LazyDiscrTree.PartialMatch</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L596-L596","name":"Lean.Meta.LazyDiscrTree.PartialMatch.c","line":596,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.c","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.c\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">c</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">Lean.Meta.LazyDiscrTree.PartialMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L594-L594","name":"Lean.Meta.LazyDiscrTree.PartialMatch.score","line":594,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.score","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.score\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">score</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">Lean.Meta.LazyDiscrTree.PartialMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L592-L592","name":"Lean.Meta.LazyDiscrTree.PartialMatch.todo","line":592,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.todo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.todo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">todo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">Lean.Meta.LazyDiscrTree.PartialMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L590-L590","name":"Lean.Meta.LazyDiscrTree.PartialMatch.mk","line":590,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(todo : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(score : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">Lean.Meta.LazyDiscrTree.PartialMatch</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L590-L597","name":"Lean.Meta.LazyDiscrTree.PartialMatch","line":590,"kind":"structure","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L577-L578","name":"Lean.Meta.LazyDiscrTree.MatchResult.appendResults","line":577,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResults","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">appendResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mr : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L565-L575","name":"Lean.Meta.LazyDiscrTree.MatchResult.appendResultsAux","line":565,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResultsAux","doc":"Append results to array\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResultsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">appendResultsAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mr : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L559-L563","name":"Lean.Meta.LazyDiscrTree.MatchResult.size","line":559,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.size","doc":"Number of elements in result\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mr : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L541-L541","name":"Lean.Meta.LazyDiscrTree.MatchResult.elts","line":541,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.elts","doc":"The elements in the match result.\n\nThe top-level array represents an array from `score` values to the\nresults with that score. A `score` is the number of non-star matches\nin a pattern against the term, and thus bounded by the size of the\nterm being matched against.  The elements of this array are themselves\narrays of non-empty arrays so that we can defer concatenating results until\nneeded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.elts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">elts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L530-L530","name":"Lean.Meta.LazyDiscrTree.MatchResult.mk","line":530,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(elts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">Lean.Meta.LazyDiscrTree.MatchResult</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L525-L541","name":"Lean.Meta.LazyDiscrTree.MatchResult","line":525,"kind":"structure","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult","doc":"A match result contains the terms formed from matching a term against\npatterns in the discrimination tree.\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L514-L523","name":"Lean.Meta.LazyDiscrTree.dropKey","line":514,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKey","doc":"This drops a specific key from the lazy discrimination tree so that\nall the entries matching that key exactly are removed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">dropKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L501-L512","name":"Lean.Meta.LazyDiscrTree.dropKeyAux","line":501,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeyAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeyAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">dropKeyAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(next : <a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rest : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchM\">Lean.Meta.LazyDiscrTree.MatchM</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L415-L425","name":"Lean.Meta.LazyDiscrTree.targetPath","line":415,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.targetPath","doc":"Create a key path from an expression we are matching against.\n\nThis should have mvars instantiated where feasible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.targetPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">targetPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L404-L413","name":"Lean.Meta.LazyDiscrTree.patternPath","line":404,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.patternPath","doc":"Create a key path from an expression using the function used for patterns.\n\nThis differs from Lean.Meta.DiscrTree.mkPath and targetPath in that the expression\nshould uses free variables rather than meta-variables for holes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.patternPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">patternPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L327-L328","name":"Lean.Meta.LazyDiscrTree.instInhabited","line":327,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L321-L321","name":"Lean.Meta.LazyDiscrTree.roots","line":321,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.roots","doc":"Map from discriminator trie roots to the index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.roots\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">roots</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L319-L319","name":"Lean.Meta.LazyDiscrTree.tries","line":319,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.tries","doc":"Backing array of trie entries.  Should be owned by this trie. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.tries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">tries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L317-L317","name":"Lean.Meta.LazyDiscrTree.config","line":317,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.config","doc":"Configuration for normalization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">config</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L315-L315","name":"Lean.Meta.LazyDiscrTree.mk","line":315,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tries : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(roots : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L302-L321","name":"Lean.Meta.LazyDiscrTree","line":302,"kind":"structure","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree","doc":"`LazyDiscrTree` is a variant of the discriminator tree datatype\n`DiscrTree` in Lean core that is designed to be efficiently\ninitializable with a large number of patterns.  This is useful\nin contexts such as searching an entire Lean environment for\nexpressions that match a pattern.\n\nLazy discriminator trees achieve good performance by minimizing\nthe amount of work that is done up front to build the discriminator\ntree.  When first adding patterns to the tree, only the root\ndiscriminator key is computed and processing the remaining\nterms is deferred until demanded by a match.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L294-L294","name":"Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","line":294,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instEmptyCollectionTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L292-L292","name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie","line":292,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a✝ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#_private.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L53-L53","name":"Lean.Meta.LazyDiscrTree.Key.instHashable","line":53,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.instHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.instHashable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L43-L51","name":"Lean.Meta.LazyDiscrTree.Key.hash","line":43,"kind":"def","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.hash","doc":"Hash function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L39-L39","name":"Lean.Meta.LazyDiscrTree.instReprKey","line":39,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instReprKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instReprKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instReprKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L39-L39","name":"Lean.Meta.LazyDiscrTree.instBEqKey","line":39,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instBEqKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instBEqKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instBEqKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L39-L39","name":"Lean.Meta.LazyDiscrTree.instInhabitedKey","line":39,"kind":"instance","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L38-L38","name":"Lean.Meta.LazyDiscrTree.Key.proj","line":38,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L37-L37","name":"Lean.Meta.LazyDiscrTree.Key.arrow","line":37,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.arrow\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">arrow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L36-L36","name":"Lean.Meta.LazyDiscrTree.Key.other","line":36,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.other","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L35-L35","name":"Lean.Meta.LazyDiscrTree.Key.star","line":35,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L34-L34","name":"Lean.Meta.LazyDiscrTree.Key.lit","line":34,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.lit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L33-L33","name":"Lean.Meta.LazyDiscrTree.Key.fvar","line":33,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L32-L32","name":"Lean.Meta.LazyDiscrTree.Key.const","line":32,"kind":"ctor","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Lean.Meta.LazyDiscrTree.Key</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/LazyDiscrTree.lean#L28-L39","name":"Lean.Meta.LazyDiscrTree.Key","line":28,"kind":"inductive","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key","doc":"Discrimination tree key.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}