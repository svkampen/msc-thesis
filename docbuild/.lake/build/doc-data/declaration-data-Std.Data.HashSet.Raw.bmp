{"name":"Std.Data.HashSet.Raw","instances":[{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instInhabited","className":"Inhabited"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instSingletonOfBEqOfHashable","className":"Singleton"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instInsertOfBEqOfHashable","className":"Insert"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instLawfulSingleton","className":"LawfulSingleton"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instMembershipOfBEqOfHashable","className":"Membership"},{"typeNames":["Membership.mem"],"name":"Std.HashSet.Raw.instDecidableMem","className":"Decidable"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instForM","className":"ForM"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instForIn","className":"ForIn"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instUnionOfBEqOfHashable","className":"Union"},{"typeNames":["Std.HashSet.Raw"],"name":"Std.HashSet.Raw.instRepr","className":"Repr"}],"imports":["Std.Data.HashMap.Raw"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L294-L296","name":"Std.HashSet.Raw.WF.ofList","line":294,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">Std.HashSet.Raw.ofList</a> <span class=\"fn\">l</span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L290-L292","name":"Std.HashSet.Raw.WF.insertMany","line":290,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.insertMany","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.insertMany</span> <span class=\"fn\">l</span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L287-L288","name":"Std.HashSet.Raw.WF.filter","line":287,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">Std.HashSet.Raw.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L284-L285","name":"Std.HashSet.Raw.WF.erase","line":284,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.erase</span> <span class=\"fn\">a</span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L280-L282","name":"Std.HashSet.Raw.WF.containsThenInsert","line":280,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.containsThenInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.containsThenInsert</span> <span class=\"fn\">a</span>)</span>.snd</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L277-L278","name":"Std.HashSet.Raw.WF.insert","line":277,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.insert</span> <span class=\"fn\">a</span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L274-L275","name":"Std.HashSet.Raw.WF.emptyc","line":274,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L271-L272","name":"Std.HashSet.Raw.WF.empty","line":271,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.empty\">Std.HashSet.Raw.empty</a> <span class=\"fn\">c</span>)</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L269-L269","name":"Std.HashSet.Raw.WF.out","line":269,"kind":"theorem","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.out","doc":"Internal implementation detail of the hash set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.out\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">m</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.inner</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L267-L267","name":"Std.HashSet.Raw.WF.mk","line":267,"kind":"ctor","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF.mk\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.inner</span>.WF</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.WF</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L261-L269","name":"Std.HashSet.Raw.WF","line":261,"kind":"structure","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF","doc":"Well-formedness predicate for hash sets. Users of `HashSet` will not need to interact with this.\nUsers of `HashSet.Raw` will need to provide proofs of `WF` to lemmas and should use lemmas like\n`WF.empty` and `WF.insert` (which are always named exactly like the operations they are about) to\nshow that set operations preserve well-formedness.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L256-L257","name":"Std.HashSet.Raw.instRepr","line":256,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L248-L254","name":"Std.HashSet.Raw.Internal.numBuckets","line":248,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Internal.numBuckets","doc":"Returns the number of buckets in the internal representation of the hash set. This function may\nbe useful for things like monitoring system health, but it should be considered an internal\nimplementation detail.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Internal.numBuckets\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Internal</span>.<span class=\"name\">numBuckets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L246-L246","name":"Std.HashSet.Raw.instUnionOfBEqOfHashable","line":246,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instUnionOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instUnionOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instUnionOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L242-L244","name":"Std.HashSet.Raw.union","line":242,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.union","doc":"Computes the union of the given hash sets, by traversing `m₂` and inserting its elements into `m₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.union\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m₁ m₂ : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L234-L240","name":"Std.HashSet.Raw.ofArray","line":234,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofArray","doc":"Creates a hash set from an array of elements. Note that unlike repeatedly calling `insert`, if the\ncollection contains multiple elements that are equal (with regard to `==`), then the last element\nin the collection will be present in the returned hash set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L226-L232","name":"Std.HashSet.Raw.ofList","line":226,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList","doc":"Creates a hash set from a list of elements. Note that unlike repeatedly calling `insert`, if the\ncollection contains multiple elements that are equal (with regard to `==`), then the last element\nin the collection will be present in the returned hash set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L217-L224","name":"Std.HashSet.Raw.insertMany","line":217,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany","doc":"Inserts multiple elements into the hash set. Note that unlike repeatedly calling `insert`, if the\ncollection contains multiple elements that are equal (with regard to `==`), then the last element\nin the collection will be present in the returned hash set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L213-L215","name":"Std.HashSet.Raw.toArray","line":213,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toArray","doc":"Transforms the hash set into an array of elements in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L209-L211","name":"Std.HashSet.Raw.toList","line":209,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList","doc":"Transforms the hash set into a list of elements in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L203-L207","name":"Std.HashSet.Raw.any","line":203,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.any","doc":"Check if any element satisfies the predicate, short-circuiting if a predicate succeeds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.any\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L197-L201","name":"Std.HashSet.Raw.all","line":197,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.all","doc":"Check if all elements satisfy the predicate, short-circuiting if a predicate fails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.all\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L194-L195","name":"Std.HashSet.Raw.instForIn","line":194,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instForIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instForIn\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instForIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L191-L192","name":"Std.HashSet.Raw.instForM","line":191,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instForM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instForM\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instForM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L186-L189","name":"Std.HashSet.Raw.forIn","line":186,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.forIn","doc":"Support for the `for` loop construct in `do` blocks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L182-L184","name":"Std.HashSet.Raw.forM","line":182,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.forM","doc":"Carries out a monadic action on each element in the hash set in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.forM\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L178-L180","name":"Std.HashSet.Raw.fold","line":178,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.fold","doc":"Folds the given function over the elements of the hash set in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.fold\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L170-L176","name":"Std.HashSet.Raw.foldM","line":170,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.foldM","doc":"Monadically computes a value by folding the given function over the elements in the hash set in some\norder.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.foldM\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L166-L168","name":"Std.HashSet.Raw.filter","line":166,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter","doc":"Removes all elements from the hash set for which the given function returns `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L150-L158","name":"Std.HashSet.Raw.isEmpty","line":150,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty","doc":"Returns `true` if the hash set contains no elements.\n\nNote that if your `BEq` instance is not reflexive or your `Hashable` instance is not\nlawful, then it is possible that this function returns `false` even though `m.contains a = false`\nfor all `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L143-L148","name":"Std.HashSet.Raw.get!","line":143,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!","doc":"Checks if given key is contained and returns the key if it is, otherwise panics.\nIf no panic occurs the result is guaranteed to be pointer equal to the key in the set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L136-L141","name":"Std.HashSet.Raw.getD","line":136,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD","doc":"Checks if given key is contained and returns the key if it is, otherwise `fallback`.\nIf they key is contained the result is guaranteed to be pointer equal to the key in the set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a fallback : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L129-L134","name":"Std.HashSet.Raw.get","line":129,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get","doc":"Retrieves the key from the set that matches `a`. Ensures that such a key exists by requiring a proof\nof `a ∈ m`. The result is guaranteed to be pointer equal to the key in the set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L122-L127","name":"Std.HashSet.Raw.get?","line":122,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?","doc":"Checks if given key is contained and returns the key if it is, otherwise `none`.\nThe result in the `some` case is guaranteed to be pointer equal to the key in the map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L118-L120","name":"Std.HashSet.Raw.size","line":118,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size","doc":"The number of elements present in the set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L114-L116","name":"Std.HashSet.Raw.erase","line":114,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase","doc":"Removes the element if it exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L111-L112","name":"Std.HashSet.Raw.instDecidableMem","line":111,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instDecidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instDecidableMem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L108-L109","name":"Std.HashSet.Raw.instMembershipOfBEqOfHashable","line":108,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instMembershipOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instMembershipOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instMembershipOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L98-L106","name":"Std.HashSet.Raw.contains","line":98,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains","doc":"Returns `true` if the given element is present in the set. There is also a `Prop`-valued version\nof this: `a ∈ m` is equivalent to `m.contains a = true`.\n\nObserve that this is different behavior than for lists: for lists, `∈` uses `=` and `contains` use\n`==` for comparisons, while for hash sets, both use `==`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L87-L96","name":"Std.HashSet.Raw.containsThenInsert","line":87,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.containsThenInsert","doc":"Checks whether an element is present in a set and inserts the element if it was not found.\nIf the hash set already contains an element that is equal (with regard to `==`) to the given\nelement, then the hash set is returned unchanged.\n\nEquivalent to (but potentially faster than) calling `contains` followed by `insert`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L85-L85","name":"Std.HashSet.Raw.instLawfulSingleton","line":85,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instLawfulSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instLawfulSingleton\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instLawfulSingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulSingleton\">LawfulSingleton</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L83-L83","name":"Std.HashSet.Raw.instInsertOfBEqOfHashable","line":83,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instInsertOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instInsertOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instInsertOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L81-L81","name":"Std.HashSet.Raw.instSingletonOfBEqOfHashable","line":81,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instSingletonOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instSingletonOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instSingletonOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L74-L79","name":"Std.HashSet.Raw.insert","line":74,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert","doc":"Inserts the given element into the set. If the hash set already contains an element that is\nequal (with regard to `==`) to the given element, then the hash set is returned unchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L71-L72","name":"Std.HashSet.Raw.instInhabited","line":71,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L68-L69","name":"Std.HashSet.Raw.instEmptyCollection","line":68,"kind":"instance","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.instEmptyCollection\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L60-L66","name":"Std.HashSet.Raw.empty","line":60,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.empty","doc":"Creates a new empty hash set. The optional parameter `capacity` can be supplied to presize the set\nso that it can hold the given number of elements without reallocating. It is also possible to use\nthe empty collection notations `∅` and `{}` to create an empty hash set with the default capacity.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(capacity : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L56-L56","name":"Std.HashSet.Raw.inner","line":56,"kind":"def","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.inner","doc":"Internal implementation detail of the hash set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.inner\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Std.HashMap.Raw</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L54-L54","name":"Std.HashSet.Raw.mk","line":54,"kind":"ctor","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.mk\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(inner : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Std.HashMap.Raw</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Std.HashSet.Raw</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Data/HashSet/Raw.lean#L34-L56","name":"Std.HashSet.Raw","line":34,"kind":"structure","docLink":"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw","doc":"Hash sets without a bundled well-formedness invariant, suitable for use in nested\ninductive types. The well-formedness invariant is called `Raw.WF`. When in doubt, prefer `HashSet`\nover `HashSet.Raw`. Lemmas about the operations on `Std.Data.HashSet.Raw` are available in the\nmodule `Std.Data.HashSet.RawLemmas`.\n\nThis is a simple separate-chaining hash table. The data of the hash set consists of a cached size\nand an array of buckets, where each bucket is a linked list of keys. The number of buckets\nis always a power of two. The hash set doubles its size upon inserting an element such that the\nnumber of elements is more than 75% of the number of buckets.\n\nThe hash table is backed by an `Array`. Users should make sure that the hash set is used linearly to\navoid expensive copies.\n\nThe hash set uses `==` (provided by the `BEq` typeclass) to compare elements and `hash` (provided by\nthe `Hashable` typeclass) to hash them. To ensure that the operations behave as expected, `==`\nshould be an equivalence relation and `a == b` should imply `hash a = hash b` (see also the\n`EquivBEq` and `LawfulHashable` typeclasses). Both of these conditions are automatic if the BEq\ninstance is lawful, i.e., if `a == b` implies `a = b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}