{"name":"Lean.Meta.Tactic.Simp.BuiltinSimprocs.BitVec","instances":[{"typeNames":["Eq"],"name":"BitVec.instDecidableEqLiteral","className":"Decidable"},{"typeNames":["BitVec.Literal"],"name":"BitVec.instReprLiteral","className":"Repr"}],"imports":["Lean.Meta.LitValues","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Nat","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Int","Init.Data.BitVec.Basic","Init.Data.BitVec.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L341-L342","name":"BitVec.reduceShiftRightShiftRight","line":341,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftRightShiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftRightShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftRightShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L339-L340","name":"BitVec.reduceShiftLeftShiftLeft","line":339,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftShiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeftShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L322-L337","name":"BitVec.reduceShiftShift","line":322,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftShift","doc":"Helper function for reducing `(x <<< i) <<< j` (and `(x >>> i) >>> j`) where `i` and `j` are\nnatural number literals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftShift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName thmName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L317-L320","name":"BitVec.reduceBitVecToFin","line":317,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecToFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecToFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBitVecToFin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L311-L315","name":"BitVec.reduceBitVecOfFin","line":311,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecOfFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecOfFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBitVecOfFin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L305-L309","name":"BitVec.reduceAllOnes","line":305,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAllOnes","doc":"Simplification procedure for `allOnes` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAllOnes\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAllOnes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L302-L303","name":"BitVec.reduceSignExtend","line":302,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSignExtend","doc":"Simplification procedure for `signExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSignExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSignExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L299-L300","name":"BitVec.reduceZeroExtend","line":299,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceZeroExtend","doc":"Simplification procedure for `zeroExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceZeroExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L296-L297","name":"BitVec.reduceSetWidth","line":296,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth","doc":"Simplification procedure for `setWidth` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSetWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L289-L294","name":"BitVec.reduceReplicate","line":289,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceReplicate","doc":"Simplification procedure for `replicate` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceReplicate\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceReplicate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L281-L287","name":"BitVec.reduceExtracLsb'","line":281,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtracLsb'","doc":"Simplification procedure for `extractLsb'` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtracLsb'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceExtracLsb'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L274-L279","name":"BitVec.reduceShiftLeftZeroExtend","line":274,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftZeroExtend","doc":"Simplification procedure for `shiftLeftZeroExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeftZeroExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L264-L272","name":"BitVec.reduceSetWidth'","line":264,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth'","doc":"Simplification procedure for `setWidth'` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSetWidth'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L260-L262","name":"BitVec.reduceSLE","line":260,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLE","doc":"Simplification procedure for signed less than or equal `sle` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L257-L259","name":"BitVec.reduceSLT","line":257,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLT","doc":"Simplification procedure for signed less than `slt` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L254-L256","name":"BitVec.reduceULE","line":254,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULE","doc":"Simplification procedure for unsigned less than or equal `ule` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceULE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L251-L253","name":"BitVec.reduceULT","line":251,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULT","doc":"Simplification procedure for unsigned less than `ult` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceULT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L248-L249","name":"BitVec.reduceGE","line":248,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGE","doc":"Simplification procedure for `≥` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L246-L247","name":"BitVec.reduceGT","line":246,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGT","doc":"Simplification procedure for `>` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L244-L245","name":"BitVec.reduceLE","line":244,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLE","doc":"Simplification procedure for `≤` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L242-L243","name":"BitVec.reduceLT","line":242,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLT","doc":"Simplification procedure for `<` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L238-L240","name":"BitVec.reduceBNe","line":238,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBNe","doc":"Simplification procedure for `!=` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBNe\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L235-L237","name":"BitVec.reduceBEq","line":235,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBEq","doc":"Simplification procedure for `==` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L233-L234","name":"BitVec.reduceNe","line":233,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNe","doc":"Simplification procedure for `≠` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNe\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L231-L232","name":"BitVec.reduceEq","line":231,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceEq","doc":"Simplification procedure for `=` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L222-L229","name":"BitVec.reduceOfNat","line":222,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfNat","doc":"Simplification procedure for ensuring `BitVec.ofNat` literals are normalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L215-L220","name":"BitVec.reduceOfInt","line":215,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfInt","doc":"Simplification procedure for `BitVec.ofInt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOfInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L209-L213","name":"BitVec.reduceToInt","line":209,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToInt","doc":"Simplification procedure for `BitVec.toInt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceToInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L203-L207","name":"BitVec.reduceToNat","line":203,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToNat","doc":"Simplification procedure for `BitVec.toNat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceToNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L196-L201","name":"BitVec.reduceCast","line":196,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceCast","doc":"Simplification procedure for casting `BitVec`s along an equality of the size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceCast\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L189-L194","name":"BitVec.reduceAppend","line":189,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAppend","doc":"Simplification procedure for append on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAppend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L185-L187","name":"BitVec.reduceRotateRight","line":185,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateRight","doc":"Simplification procedure for rotate right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceRotateRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L182-L184","name":"BitVec.reduceRotateLeft","line":182,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateLeft","doc":"Simplification procedure for rotate left on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceRotateLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L179-L181","name":"BitVec.reduceHShiftRight'","line":179,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight'","doc":"Simplification procedure for converting a shift with a bit-vector literal into a natural number literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftRight'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L176-L178","name":"BitVec.reduceHShiftRight","line":176,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight","doc":"Simplification procedure for shift right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L173-L175","name":"BitVec.reduceHShiftLeft'","line":173,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft'","doc":"Simplification procedure for converting a shift with a bit-vector literal into a natural number literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftLeft'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L170-L172","name":"BitVec.reduceHShiftLeft","line":170,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft","doc":"Simplification procedure for shift left on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L167-L169","name":"BitVec.reduceSShiftRight","line":167,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSShiftRight","doc":"Simplification procedure for signed shift right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L164-L166","name":"BitVec.reduceUShiftRight","line":164,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUShiftRight","doc":"Simplification procedure for unsigned shift right on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L161-L163","name":"BitVec.reduceShiftLeft","line":161,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeft","doc":"Simplification procedure for shift left on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L158-L159","name":"BitVec.reduceGetMsb","line":158,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetMsb","doc":"Simplification procedure for `getMsb` (most significant bit) on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetMsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetMsb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L156-L157","name":"BitVec.reduceGetLsb","line":156,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetLsb","doc":"Simplification procedure for `getLsb` (lowest significant bit) on `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetLsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetLsb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L154-L155","name":"BitVec.reduceSMTSDiv","line":154,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTSDiv","doc":"Simplification procedure for signed division of `BitVec`s using the SMT-Lib conventions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMTSDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L152-L153","name":"BitVec.reduceSDiv","line":152,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSDiv","doc":"Simplification procedure for signed t-division of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L150-L151","name":"BitVec.reduceSRem","line":150,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSRem","doc":"Simplification procedure for signed remainder of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSRem\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSRem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L148-L149","name":"BitVec.reduceSMod","line":148,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMod","doc":"Simplification procedure for the signed modulo operation on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L146-L147","name":"BitVec.reduceSMTUDiv","line":146,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTUDiv","doc":"Simplification procedure for division of `BitVec`s using the SMT-Lib conventions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMTUDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L144-L145","name":"BitVec.reduceUDiv","line":144,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUDiv","doc":"Simplification procedure for unsigned division of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L142-L143","name":"BitVec.reduceUMod","line":142,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUMod","doc":"Simplification procedure for the unsigned modulo operation on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L140-L141","name":"BitVec.reduceMod","line":140,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMod","doc":"Simplification procedure for the modulo operation on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L138-L139","name":"BitVec.reduceDiv","line":138,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceDiv","doc":"Simplification procedure for division of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L136-L137","name":"BitVec.reduceSub","line":136,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSub","doc":"Simplification procedure for subtraction of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSub\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L134-L135","name":"BitVec.reduceMul","line":134,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMul","doc":"Simplification procedure for multiplication of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMul\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L132-L133","name":"BitVec.reduceAdd","line":132,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAdd","doc":"Simplification procedure for addition of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAdd\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L130-L131","name":"BitVec.reduceXOr","line":130,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceXOr","doc":"Simplification procedure for bitwise xor of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceXOr\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceXOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L128-L129","name":"BitVec.reduceOr","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOr","doc":"Simplification procedure for bitwise or of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOr\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L126-L127","name":"BitVec.reduceAnd","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAnd","doc":"Simplification procedure for bitwise and of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAnd\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L124-L125","name":"BitVec.reduceAbs","line":124,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAbs","doc":"Simplification procedure for absolute value of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAbs\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L121-L123","name":"BitVec.reduceNot","line":121,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNot","doc":"Simplification procedure for bitwise not of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNot\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L119-L120","name":"BitVec.reduceNeg","line":119,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNeg","doc":"Simplification procedure for negation of `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNeg\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L107-L116","name":"BitVec.reduceBoolPred","line":107,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBoolPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBoolPred\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBoolPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L93-L105","name":"BitVec.reduceBinPred","line":93,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBinPred","doc":"Helper function for reducing bitvector predicates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBinPred\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L83-L91","name":"BitVec.reduceShiftWithBitVecLit","line":83,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftWithBitVecLit","doc":"Helper function for reducing `x <<< i` and `x >>> i` where `i` is a bitvector literal,\ninto one that is a natural number literal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftWithBitVecLit\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftWithBitVecLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L73-L81","name":"BitVec.reduceShift","line":73,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShift","doc":"Helper function for reducing bitvector functions such as `shiftLeft` and `rotateRight`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L62-L71","name":"BitVec.reduceGetBit","line":62,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetBit","doc":"Helper function for reducing bitvector functions such as `getLsb` and `getMsb`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetBit\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetBit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L54-L60","name":"BitVec.reduceExtend","line":54,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtend","doc":"Simplification procedure for `setWidth`, `zeroExtend` and `signExtend` on `BitVec`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceExtend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L41-L52","name":"BitVec.reduceBin","line":41,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBin","doc":"Helper function for reducing homogeneous binary bitvector operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L32-L39","name":"BitVec.reduceUnary","line":32,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUnary","doc":"Helper function for reducing homogeneous unary bitvector operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUnary\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUnary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L24-L30","name":"BitVec.fromExpr?","line":24,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.fromExpr?","doc":"Try to convert `OfNat.ofNat`/`BitVec.OfNat` application into a\nbitvector literal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.fromExpr?\"><span class=\"name\">BitVec</span>.<span class=\"name\">fromExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">BitVec.Literal</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L22-L22","name":"BitVec.instReprLiteral","line":22,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral\"><span class=\"name\">BitVec</span>.<span class=\"name\">instReprLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">BitVec.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L22-L22","name":"BitVec.instDecidableEqLiteral","line":22,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDecidableEqLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">BitVec.Literal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L21-L21","name":"BitVec.Literal.value","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.value","doc":"Actual value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.value\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">BitVec.Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">self</span>.n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L19-L19","name":"BitVec.Literal.n","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n","doc":"Size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">n</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">BitVec.Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L17-L17","name":"BitVec.Literal.mk","line":17,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">BitVec.Literal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L16-L22","name":"BitVec.Literal","line":16,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal","doc":"A bit-vector literal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}