{"name":"Lean.Elab.PreDefinition.Structural.BRecOn","instances":[],"imports":["Lean.Util.HasConstCache","Lean.Meta.PProdN","Lean.Meta.Match.MatcherApp.Transform","Lean.Elab.RecAppSyntax","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.Structural.RecArgInfo"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L282-L298","name":"Lean.Elab.Structural.mkBrecOnApp","line":282,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBrecOnApp","doc":"Completes the `.brecOn` for the given function.\nThe `value` is the function with (only) the fixed parameters moved into the context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBrecOnApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBrecOnApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(positions : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Lean.Elab.Structural.Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fnIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(brecOnConst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(FArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(recArgInfo : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L258-L280","name":"Lean.Elab.Structural.inferBRecOnFTypes","line":258,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.inferBRecOnFTypes","doc":"Given the `recArgInfos` and the `motives`, infer the types of the `F` arguments to the `.brecOn`\ncombinators. This assumes that all `.brecOn` functions of a mutual inductive have the same structure.\n\nIt also undoes the permutation and packing done by `packMotives`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.inferBRecOnFTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">inferBRecOnFTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recArgInfos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(positions : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Lean.Elab.Structural.Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(brecOnConst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L232-L256","name":"Lean.Elab.Structural.mkBRecOnConst","line":232,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnConst","doc":"Given the `motives`, figures out whether to use `.brecOn` or `.binductionOn`, pass\nthe right universe levels, the parameters, and the motives.\nIt was already checked earlier in `checkCodomainsLevel` that the functions live in the same universe.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOnConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recArgInfos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(positions : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Lean.Elab.Structural.Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(motives : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L213-L230","name":"Lean.Elab.Structural.mkBRecOnF","line":213,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnF","doc":"Calculates the `.brecOn` functional argument corresponding to one structural recursive function.\nThe `value` is the function with (only) the fixed parameters moved into the context,\nThe `FType` is the expected type of the argument.\nThe `recArgInfos` is used to transform the body of the function to replace recursive calls with\nuses of the `below` induction hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnF\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOnF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recArgInfos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(positions : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Lean.Elab.Structural.Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(recArgInfo : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value FType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L202-L211","name":"Lean.Elab.Structural.mkBRecOnMotive","line":202,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnMotive","doc":"Calculates the `.brecOn` motive corresponding to one structural recursive function.\nThe `value` is the function with (only) the fixed parameters moved into the context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOnMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recArgInfo : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L21-L31","name":"Lean.Elab.Structural.searchPProd","line":21,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.searchPProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.searchPProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">searchPProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e F : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"}]}