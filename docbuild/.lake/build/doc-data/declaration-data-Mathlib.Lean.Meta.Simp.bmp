{"name":"Mathlib.Lean.Meta.Simp","instances":[{"typeNames":["Lean.Meta.SimpTheorems"],"name":"Lean.Meta.Simp.instToFormatSimpTheorems_mathlib","className":"Std.ToFormat"}],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.Simp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L137-L143","name":"Lean.Meta.getAllSimpAttrs","line":137,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpAttrs","doc":"Gets all simp-attributes given to declaration `decl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getAllSimpAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L128-L135","name":"Lean.Meta.getAllSimpDecls","line":128,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpDecls","doc":"Returns all declarations with the `simp`-attribute `simpAttr`.\nNote: this also returns many auxiliary declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getAllSimpDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(simpAttr : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L122-L126","name":"Lean.Meta.isInSimpSet","line":122,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.isInSimpSet","doc":"Tests whether `decl` has `simp`-attribute `simpAttr`. Returns `false` is `simpAttr` is not a\nvalid simp-attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.isInSimpSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isInSimpSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(simpAttr decl : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L118-L120","name":"Lean.Meta.SimpTheorems.contains","line":118,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.SimpTheorems.contains","doc":"Checks whether `declName` is in `SimpTheorems` as either a lemma or definition to unfold. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.SimpTheorems.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L102-L116","name":"Lean.Meta.simpEq","line":102,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpEq","doc":"Independently simplify both the left-hand side and the right-hand side\nof an equality. The equality is allowed to be under binders.\nReturns the simplified equality and a proof of it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type pf : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L85-L100","name":"Lean.Meta.simpType","line":85,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpType","doc":"Given a simplifier `S : Expr → MetaM Simp.Result`,\nand an expression `e : Expr`, run `S` on the type of `e`, and then\nconvert `e` into that simplified type,\nusing a combination of type hints as well as casting if the proof is not definitional `Eq.mp`.\n\nThe optional argument `type?`, if present, must be definitionally equal to the type of `e`.\nWhen it is specified we simplify this type rather than the inferred type of `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L80-L83","name":"Lean.Meta.simpOnlyNames","line":80,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpOnlyNames","doc":"Simplify an expression using only a list of lemmas specified by name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpOnlyNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpOnlyNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">maxSteps</span> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps\">Lean.Meta.Simp.defaultMaxSteps</a>, <span class=\"fn\">maxDischargeDepth</span> := <span class=\"fn\">2</span>, <span class=\"fn\">contextual</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">memoize</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">singlePass</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">eta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">etaStruct</span> := <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all\">Lean.Meta.EtaStructMode.all</a>,\n    <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">decide</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">arith</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">autoUnfold</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">dsimp</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">failIfUnchanged</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">ground</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">unfoldPartialApp</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">index</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">implicitDefEqProofs</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L73-L78","name":"Lean.Meta.Simp.Context.ofNames","line":73,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Context.ofNames","doc":"Construct a `Simp.Context` from a list of names. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Context.ofNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">ofNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> := <span class=\"fn\">[]</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simpOnly : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">maxSteps</span> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps\">Lean.Meta.Simp.defaultMaxSteps</a>, <span class=\"fn\">maxDischargeDepth</span> := <span class=\"fn\">2</span>, <span class=\"fn\">contextual</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">memoize</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">singlePass</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">eta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">etaStruct</span> := <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all\">Lean.Meta.EtaStructMode.all</a>,\n    <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">decide</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">arith</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">autoUnfold</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">dsimp</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">failIfUnchanged</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">ground</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">unfoldPartialApp</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">index</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">implicitDefEqProofs</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L60-L67","name":"Lean.Meta.simpTheoremsOfNames","line":60,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpTheoremsOfNames","doc":"Construct a `SimpTheorems` from a list of names. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpTheoremsOfNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpTheoremsOfNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> := <span class=\"fn\">[]</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simpOnly : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L49-L56","name":"Lean.Meta.Simp.getPropHyps","line":49,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.getPropHyps","doc":"Return all propositions in the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.getPropHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getPropHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L37-L47","name":"Lean.Meta.Simp.Result.ofTrue","line":37,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Result.ofTrue","doc":"Constructs a proof that the original expression is true\ngiven a simp result which simplifies the target to `True`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Result.ofTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">ofTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L25-L35","name":"Lean.Meta.Simp.instToFormatSimpTheorems_mathlib","line":25,"kind":"instance","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.instToFormatSimpTheorems_mathlib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.instToFormatSimpTheorems_mathlib\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instToFormatSimpTheorems_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Lean/Meta/Simp.lean#L17-L18","name":"Lean.PHashSet.toList","line":17,"kind":"def","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.PHashSet.toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.PHashSet.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">PHashSet</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"}]}