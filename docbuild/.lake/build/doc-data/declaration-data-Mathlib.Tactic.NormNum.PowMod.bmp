{"name":"Mathlib.Tactic.NormNum.PowMod","instances":[],"imports":["Init","Mathlib.Tactic.NormNum.Pow"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L97-L120","name":"Mathlib.Meta.NormNum.evalNatPowMod.go","line":97,"kind":"opaque","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod.go","doc":"Invariants: `a ^ b₀ % m = c₀`, `depth > 0`, `b >>> depth = b₀` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatPowMod</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a m b₀ c₀ b : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">«$p»</span> =Q <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">«$a»</span>.pow</span> <span class=\"fn\">«$b₀»</span>)</span>.mod</span> <span class=\"fn\">«$m»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$c₀»</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">«$p»</span> <span class=\"fn\">«$a»</span> <span class=\"fn\">«$b»</span> <span class=\"fn\">«$m»</span> <span class=\"fn\">«$c»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L69-L120","name":"Mathlib.Meta.NormNum.evalNatPowMod","line":69,"kind":"def","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod","doc":"Evaluates and proves `a^b % m` for natural numbers using fast modular exponentiation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatPowMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b m : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">«$a»</span>.pow</span> <span class=\"fn\">«$b»</span>)</span>.mod</span> <span class=\"fn\">«$m»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$c»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L60-L67","name":"Mathlib.Meta.NormNum.IsNatPowModT.bit1","line":60,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit1\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">bit1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">b</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.mul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.mul</span> <span class=\"fn\">a</span>)</span>.mod</span> <span class=\"fn\">m</span>)</span>)</span>.mod</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L58-L58","name":"Mathlib.Meta.NormNum.natPow_one_natMod","line":58,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_one_natMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_one_natMod\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_one_natMod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">1</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.mod</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L53-L57","name":"Mathlib.Meta.NormNum.natPow_zero_natMod_succ_succ","line":53,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_succ_succ\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_zero_natMod_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">0</span>)</span>.mod</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.succ</span>.succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L51-L52","name":"Mathlib.Meta.NormNum.natPow_zero_natMod_one","line":51,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_one\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_zero_natMod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">0</span>)</span>.mod</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L49-L50","name":"Mathlib.Meta.NormNum.natPow_zero_natMod_zero","line":49,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_zero_natMod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">0</span>)</span>.mod</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L45-L47","name":"Mathlib.Meta.NormNum.IsNatPowModT.bit0","line":45,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit0\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">bit0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">b</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.mul</span> <span class=\"fn\">c</span>)</span>.mod</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L41-L43","name":"Mathlib.Meta.NormNum.IsNatPowModT.trans","line":41,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.trans\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b m c b' c' : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">b</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">b'</span> <span class=\"fn\">m</span> <span class=\"fn\">c'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b'</span> <span class=\"fn\">m</span> <span class=\"fn\">c'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L37-L39","name":"Mathlib.Meta.NormNum.IsNatPowModT.run","line":37,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b c : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">1</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.mod</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">b</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L35-L35","name":"Mathlib.Meta.NormNum.IsNatPowModT.run'","line":35,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b m c : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">b</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L34-L34","name":"Mathlib.Meta.NormNum.IsNatPowModT.mk","line":34,"kind":"ctor","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b m c : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(run' : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.pow</span> <span class=\"fn\">b</span>)</span>.mod</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">Mathlib.Meta.NormNum.IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/NormNum/PowMod.lean#L33-L35","name":"Mathlib.Meta.NormNum.IsNatPowModT","line":33,"kind":"structure","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT","doc":"Represents and proves equalities of the form `a^b % m = c` for natural numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a b m c : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}