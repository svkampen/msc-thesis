{"name":"Lake.Util.Name","instances":[{"typeNames":["Lean.NameMap","Prod"],"name":"Lake.instForInNameMapProdName_lake","className":"ForIn"},{"typeNames":["Lean.RBMap","Lean.NameMap"],"name":"Lake.instCoeRBMapNameQuickCmpNameMap_lake","className":"Coe"},{"typeNames":["Lean.NameMap"],"name":"Lake.instToJsonNameMap_lake","className":"Lean.ToJson"},{"typeNames":["Lean.NameMap"],"name":"Lake.instFromJsonNameMap_lake","className":"Lean.FromJson"},{"typeNames":["Lean.Name","Lean.Name.quickCmpAux"],"name":"Lake.Name.instLawfulCmpEqNameQuickCmpAux","className":"Lake.LawfulCmpEq"},{"typeNames":["Lean.Name","Lean.Name.quickCmp"],"name":"Lake.Name.instLawfulCmpEqNameQuickCmp","className":"Lake.LawfulCmpEq"}],"imports":["Init","Lean.Data.Json","Lean.Data.NameMap","Lake.Util.DRBMap","Lake.Util.RBArray"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L97-L98","name":"Lake.Name.quoteFrom","line":97,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.Name.quoteFrom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quoteFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quoteFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L92-L94","name":"Lake.Name.instLawfulCmpEqNameQuickCmp","line":92,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulCmpEqNameQuickCmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L88-L90","name":"Lake.Name.quickCmp_rfl","line":88,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.quickCmp_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quickCmp_rfl\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmp_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.quickCmp</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L82-L86","name":"Lake.Name.eq_of_quickCmp","line":82,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.eq_of_quickCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.eq_of_quickCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">eq_of_quickCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n n' : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.quickCmp</span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L78-L80","name":"Lake.Name.instLawfulCmpEqNameQuickCmpAux","line":78,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmpAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmpAux\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulCmpEqNameQuickCmpAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmpAux\">Lean.Name.quickCmpAux</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L66-L76","name":"Lake.Name.quickCmpAux_iff_eq","line":66,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.quickCmpAux_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quickCmpAux_iff_eq\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmpAux_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n n' : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.quickCmpAux</span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L60-L64","name":"Lake.Name.isPrefixOf_append","line":60,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.isPrefixOf_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isPrefixOf_append\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n m : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.hasMacroScopes</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.hasMacroScopes</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.isPrefixOf</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L57-L58","name":"Lake.Name.isPrefixOf_self","line":57,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.isPrefixOf_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isPrefixOf_self\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.isPrefixOf</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L54-L55","name":"Lake.Name.beq_false","line":54,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.beq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.beq_false\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">beq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L40-L47","name":"Lake.instFromJsonNameMap_lake","line":40,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.instFromJsonNameMap_lake","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.instFromJsonNameMap_lake\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonNameMap_lake</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L37-L38","name":"Lake.instToJsonNameMap_lake","line":37,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.instToJsonNameMap_lake","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.instToJsonNameMap_lake\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonNameMap_lake</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L35-L35","name":"Lake.DNameMap.empty","line":35,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.DNameMap.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.DNameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">DNameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.DNameMap\">Lake.DNameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L34-L34","name":"Lake.DNameMap","line":34,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.DNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.DNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">DNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L32-L32","name":"Lake.mkOrdNameMap","line":32,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.mkOrdNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.mkOrdNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">mkOrdNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.OrdNameMap\">Lake.OrdNameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L31-L31","name":"Lake.OrdNameMap.empty","line":31,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.OrdNameMap.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.OrdNameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">OrdNameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.OrdNameMap\">Lake.OrdNameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L30-L30","name":"Lake.OrdNameMap","line":30,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.OrdNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.OrdNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">OrdNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L28-L28","name":"Lake.instCoeRBMapNameQuickCmpNameMap_lake","line":28,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.instCoeRBMapNameQuickCmpNameMap_lake","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.instCoeRBMapNameQuickCmpNameMap_lake\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeRBMapNameQuickCmpNameMap_lake</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Lean/Data/RBMap.html#Lean.RBMap\">Lean.RBMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a>)</span> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L25-L26","name":"Lake.instForInNameMapProdName_lake","line":25,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.instForInNameMapProdName_lake","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.instForInNameMapProdName_lake\"><span class=\"name\">Lake</span>.<span class=\"name\">instForInNameMapProdName_lake</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L23-L23","name":"Lake.NameMap.empty","line":23,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.NameMap.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.NameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Name.lean#L16-L21","name":"Lake.stringToLegalOrSimpleName","line":16,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.stringToLegalOrSimpleName","doc":"First tries to convert a string into a legal name.\nIf that fails, defaults to making it a simple name (e.g., `Lean.Name.mkSimple`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.stringToLegalOrSimpleName\"><span class=\"name\">Lake</span>.<span class=\"name\">stringToLegalOrSimpleName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"}]}