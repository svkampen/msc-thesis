{"name":"Lean.Elab.Tactic.SolveByElim","instances":[],"imports":["Lean.Meta.Tactic.SolveByElim","Lean.Elab.Tactic.Config"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L97-L110","name":"Lean.Elab.Tactic.SolveByElim.evalSolveByElim","line":97,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.evalSolveByElim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.evalSolveByElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">evalSolveByElim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L81-L95","name":"Lean.Elab.Tactic.SolveByElim.evalApplyRules","line":81,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.evalApplyRules","doc":"Elaborator for apply_rules.\n\nSee `Lean.MVarId.applyRules` for a `MetaM` level analogue of this tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.evalApplyRules\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">evalApplyRules</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L68-L79","name":"Lean.Elab.Tactic.SolveByElim.evalApplyAssumption","line":68,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.evalApplyAssumption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.evalApplyAssumption\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">evalApplyAssumption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L59-L66","name":"Lean.Elab.Tactic.SolveByElim.processSyntax","line":59,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.processSyntax","doc":"Wrapper for `solveByElim` that processes a list of `Term`s\nthat specify the lemmas to use. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.processSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">processSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">Lean.Meta.SolveByElim.SolveByElimConfig</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">maxDepth</span> := <span class=\"fn\">6</span>, <span class=\"fn\">proc</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">none</span></span></span>, <span class=\"fn\">suspend</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>,\n    <span class=\"fn\">discharge</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) =&gt; <span class=\"fn\">failure</span></span>, <span class=\"fn\">commitIndependentGoals</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">newGoals</span> := <a href=\"./Init/Meta.html#Lean.Meta.ApplyNewGoals.nonDependentFirst\">Lean.Meta.ApplyNewGoals.nonDependentFirst</a>, <span class=\"fn\">synthAssignedInstances</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">allowSynthFailures</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">approx</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">transparency</span> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\">Lean.Meta.TransparencyMode.default</a>, <span class=\"fn\">symm</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">exfalso</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">backtracking</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">intro</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">constructor</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(only star : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(add remove : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(use : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L51-L57","name":"Lean.Elab.Tactic.SolveByElim.parseUsing","line":51,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.parseUsing","doc":"Parse the `using ...` argument for `solve_by_elim`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.parseUsing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">parseUsing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.SolveByElim.using_</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L28-L49","name":"Lean.Elab.Tactic.SolveByElim.parseArgs","line":28,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.parseArgs","doc":"Parse the lemma argument of a call to `solve_by_elim`.\nThe first component should be true if `*` appears at least once.\nThe second component should contain each term `t`in the arguments.\nThe third component should contain `t` for each `-t` in the arguments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.parseArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">parseArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.SolveByElim.args</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L23-L26","name":"Lean.Elab.Tactic.SolveByElim.elabApplyRulesConfig","line":23,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.elabApplyRulesConfig","doc":"Allow elaboration of `ApplyRulesConfig` arguments to tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.elabApplyRulesConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">elabApplyRulesConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">Lean.Meta.SolveByElim.ApplyRulesConfig</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SolveByElim.lean#L18-L21","name":"Lean.Elab.Tactic.SolveByElim.elabConfig","line":18,"kind":"def","docLink":"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.elabConfig","doc":"Allow elaboration of `Config` arguments to tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SolveByElim.html#Lean.Elab.Tactic.SolveByElim.elabConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">Lean.Meta.SolveByElim.SolveByElimConfig</a></span></span></div></div>"}]}