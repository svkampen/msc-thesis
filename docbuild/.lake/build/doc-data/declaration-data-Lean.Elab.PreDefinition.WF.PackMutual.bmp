{"name":"Lean.Elab.PreDefinition.WF.PackMutual","instances":[],"imports":["Lean.Meta.ArgsPacker","Lean.Elab.PreDefinition.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/WF/PackMutual.lean#L52-L79","name":"Lean.Elab.WF.packMutual","line":52,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/PackMutual.html#Lean.Elab.WF.packMutual","doc":"Creates a single unary function from the given `preDefs`, using the machinery in the `ArgPacker`\nmodule.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/PackMutual.html#Lean.Elab.WF.packMutual\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">packMutual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefix : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preDefs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/WF/PackMutual.lean#L13-L30","name":"Lean.Elab.WF.withAppN","line":13,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/PackMutual.html#Lean.Elab.WF.withAppN","doc":"Pass the first `n` arguments of `e` to the continuation, and apply the result to the\nremaining arguments. If `e` does not have enough arguments, it is eta-expanded as needed.\n\nUnlike `Meta.etaExpand` does not use `withDefault`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/PackMutual.html#Lean.Elab.WF.withAppN\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">withAppN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> â†’ <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}