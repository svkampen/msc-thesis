{"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Carry","instances":[],"imports":["Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Basic","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Add","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Carry"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Carry.lean#L61-L74","name":"Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit_eq_carry","line":61,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit_eq_carry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit_eq_carry\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">mkOverflowBit_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.OverflowInput\">Std.Tactic.BVDecide.BVExpr.bitblast.OverflowInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">input</span>.w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft :\n  <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">input</span>.w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.vec</span>.lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright :\n  <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">input</span>.w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.vec</span>.rhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit\">Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\"><span class=\"fn\">input</span>.w</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">input</span>.cin</span> }</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Carry.lean#L27-L57","name":"Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit.go_eq_carry","line":27,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit.go_eq_carry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit.go_eq_carry\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">mkOverflowBit</span>.<span class=\"name\">go_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cin origCin : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhsExpr rhsExpr : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhsExpr</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhsExpr</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcin :\n  <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">cin</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">curr</span> <span class=\"fn\">lhsExpr</span> <span class=\"fn\">rhsExpr</span> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">origCin</span> }</span>⟧</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Carry.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit.go\">Std.Tactic.BVDecide.BVExpr.bitblast.mkOverflowBit.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">cin</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">lhsExpr</span> <span class=\"fn\">rhsExpr</span> <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">origCin</span> }</span>⟧</span></span></span></div></div>"}]}