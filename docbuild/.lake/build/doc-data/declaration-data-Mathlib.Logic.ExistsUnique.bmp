{"name":"Mathlib.Logic.ExistsUnique","instances":[],"imports":["Init","Mathlib.Tactic.TypeStar"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L136-L140","name":"ExistsUnique.unique₂","line":136,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.unique₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.unique₂\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">unique₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\">p</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\">∃! <span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ y₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hpy₁ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hqy₁ : <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">y₁</span> <span class=\"fn\">hpy₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hpy₂ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hqy₂ : <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">y₂</span> <span class=\"fn\">hpy₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L132-L134","name":"ExistsUnique.exists₂","line":132,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.exists₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.exists₂\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">exists₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\">∃! <span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ (<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L126-L130","name":"ExistsUnique.intro₂","line":126,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.intro₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.intro₂\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">intro₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\">p</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">w</span> <span class=\"fn\">hp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">y</span> <span class=\"fn\">hy</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\">∃! <span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L119-L124","name":"ExistsUnique.elim₂","line":119,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.elim₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.elim₂\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">elim₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\">p</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\">∃! <span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">y</span> <span class=\"fn\">hy</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L116-L117","name":"exists_unique_prop_of_true","line":116,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_prop_of_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_prop_of_true\"><span class=\"name\">exists_unique_prop_of_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃! <span class=\"fn\">h'</span> : <span class=\"fn\">p</span>, <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h'</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L114-L114","name":"exists_unique_false","line":114,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_false\"><span class=\"name\">exists_unique_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L112-L112","name":"exists_unique_prop","line":112,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_prop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_prop\"><span class=\"name\">exists_unique_prop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃! <span class=\"fn\">x</span> : <span class=\"fn\">p</span>, <span class=\"fn\">q</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L109-L110","name":"exists_unique_eq'","line":109,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_eq'\"><span class=\"name\">exists_unique_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">a</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L106-L107","name":"exists_unique_eq","line":106,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_eq\"><span class=\"name\">exists_unique_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">a</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L103-L104","name":"exists_unique_const","line":103,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_const\"><span class=\"name\">exists_unique_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Sort</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L99-L101","name":"exists_unique_iff_exists","line":99,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_iff_exists\"><span class=\"name\">exists_unique_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L96-L97","name":"existsUnique_congr","line":96,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#existsUnique_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#existsUnique_congr\"><span class=\"name\">existsUnique_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p q : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃! <span class=\"fn\">a</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃! <span class=\"fn\">a</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L87-L89","name":"ExistsUnique.unique","line":87,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.unique\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ y₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(py₁ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(py₂ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L85-L85","name":"ExistsUnique.exists","line":85,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.exists\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> → <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L81-L83","name":"exists_unique_of_exists_of_unique","line":81,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#exists_unique_of_exists_of_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#exists_unique_of_exists_of_unique\"><span class=\"name\">exists_unique_of_exists_of_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hex : <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hunique : <span class=\"fn\">∀ (<span class=\"fn\">y₁ </span><span class=\"fn\">y₂</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y₁</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y₂</span></span> → <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L77-L79","name":"ExistsUnique.elim","line":77,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.elim\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L74-L75","name":"ExistsUnique.intro","line":74,"kind":"theorem","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique.intro\"><span class=\"name\">ExistsUnique</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">x</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L59-L65","name":"Mathlib.Notation.«term∃!__,_»","line":59,"kind":"def","docLink":"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.«term∃!__,_»","doc":"`∃! x ∈ s, p x` means `∃! x, x ∈ s ∧ p x`, which is to say that there exists a unique `x ∈ s`\nsuch that `p x`.\nSimilarly, notations such as `∃! x ≤ n, p n` are supported,\nusing any relation defined using the `binder_predicate` command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.«term∃!__,_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Notation</span>.<span class=\"name\">«term∃!__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L50-L57","name":"Mathlib.Notation.unexpandExistsUnique","line":50,"kind":"def","docLink":"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.unexpandExistsUnique","doc":"Pretty-printing for `ExistsUnique`, following the same pattern as pretty printing for `Exists`.\nHowever, it does *not* merge binders.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.unexpandExistsUnique\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Notation</span>.<span class=\"name\">unexpandExistsUnique</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L39-L48","name":"Mathlib.Notation.«term∃!_,_»","line":39,"kind":"def","docLink":"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.«term∃!_,_»","doc":"`∃! x : α, p x` means that there exists a unique `x` in `α` such that `p x`.\nThis is notation for `ExistsUnique (fun (x : α) ↦ p x)`.\n\nThis notation does not allow multiple binders like `∃! (x : α) (y : β), p x y`\nas a shorthand for `∃! (x : α), ∃! (y : β), p x y` since it is liable to be misunderstood.\nOften, the intended meaning is instead `∃! q : α × β, p q.1 q.2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.«term∃!_,_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Notation</span>.<span class=\"name\">«term∃!_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L23-L28","name":"Mathlib.Notation.isExplicitBinderSingular","line":23,"kind":"def","docLink":"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.isExplicitBinderSingular","doc":"Checks to see that `xs` has only one binder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#Mathlib.Notation.isExplicitBinderSingular\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Notation</span>.<span class=\"name\">isExplicitBinderSingular</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.explicitBinders</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Logic/ExistsUnique.lean#L17-L18","name":"ExistsUnique","line":17,"kind":"def","docLink":"./Mathlib/Logic/ExistsUnique.html#ExistsUnique","doc":"For `p : α → Prop`, `ExistsUnique p` means that there exists a unique `x : α` with `p x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\"><span class=\"name\">ExistsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}