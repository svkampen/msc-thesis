{"name":"Aesop.RuleTac.GoalDiff","instances":[{"typeNames":["Aesop.GoalDiff"],"name":"Aesop.instInhabitedGoalDiff","className":"Inhabited"},{"typeNames":["Aesop.GoalDiff"],"name":"Aesop.instEmptyCollectionGoalDiff","className":"EmptyCollection"}],"imports":["Init","Aesop.RuleTac.FVarIdSubst","Aesop.Util.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L187-L192","name":"Aesop.GoalDiff.check","line":187,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.check","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.check\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(diff : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(old new : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L178-L185","name":"Aesop.GoalDiff.checkCore.isDefeqLocalDecl","line":178,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.checkCore.isDefeqLocalDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.checkCore.isDefeqLocalDecl\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">checkCore</span>.<span class=\"name\">isDefeqLocalDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L114-L185","name":"Aesop.GoalDiff.checkCore","line":114,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.checkCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.checkCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">checkCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(diff : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(old new : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L94-L112","name":"Aesop.GoalDiff.comp","line":94,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.comp","doc":"If `diff₁` is the difference between goals `g₁` and `g₂` and `diff₂` is the\ndifference between `g₂` and `g₃`, then `diff₁.comp diff₂` is the difference\nbetween `g₁` and `g₃`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.comp\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(diff₁ diff₂ : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L79-L90","name":"Aesop.diffGoals","line":79,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.diffGoals","doc":"Diff two goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.diffGoals\"><span class=\"name\">Aesop</span>.<span class=\"name\">diffGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(old new : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarSubst : <a href=\"./Aesop/RuleTac/FVarIdSubst.html#Aesop.FVarIdSubst\">Aesop.FVarIdSubst</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L72-L77","name":"Aesop.getNewFVars","line":72,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.getNewFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.getNewFVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">getNewFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(oldLCtx newLCtx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L69-L70","name":"Aesop.instEmptyCollectionGoalDiff","line":69,"kind":"instance","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.instEmptyCollectionGoalDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.instEmptyCollectionGoalDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">instEmptyCollectionGoalDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L64-L67","name":"Aesop.GoalDiff.empty","line":64,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.empty\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L62-L62","name":"Aesop.instInhabitedGoalDiff","line":62,"kind":"instance","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.instInhabitedGoalDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.instInhabitedGoalDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedGoalDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L61-L61","name":"Aesop.GoalDiff.fvarSubst","line":61,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.fvarSubst","doc":"An `FVarId` substitution that tracks hypotheses which have been renamed (but\nhave not otherwise been modified).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.fvarSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">fvarSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/FVarIdSubst.html#Aesop.FVarIdSubst\">Aesop.FVarIdSubst</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L56-L56","name":"Aesop.GoalDiff.removedFVars","line":56,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.removedFVars","doc":"`FVarId`s that appear in the old goal, but not in the new goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.removedFVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">removedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L52-L52","name":"Aesop.GoalDiff.addedFVars","line":52,"kind":"def","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.addedFVars","doc":"`FVarId`s that appear in the new goal, but not in the old goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.addedFVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">addedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L48-L48","name":"Aesop.GoalDiff.mk","line":48,"kind":"ctor","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(addedFVars removedFVars : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarSubst : <a href=\"./Aesop/RuleTac/FVarIdSubst.html#Aesop.FVarIdSubst\">Aesop.FVarIdSubst</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">Aesop.GoalDiff</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/RuleTac/GoalDiff.lean#L14-L62","name":"Aesop.GoalDiff","line":14,"kind":"structure","docLink":"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff","doc":"A representation of the differences between two goals. Each Aesop rule produces\na `GoalDiff` between the goal on which the rule was run (the 'old goal') and\neach of the subgoals produced by the rule (the 'new goals').\n\nWe use the produced `GoalDiff`s to update stateful data structures which cache\ninformation about Aesop goals and for which it is more efficient to update the\ncached information than to recompute it for each goal.\n\nFor a goal diff between an old goal with local context `Γ` and a new goal with\nlocal context `Δ`, we expect that\n\n```text\nΔ = (Γ \\ removedFVars) ∪ addedFVars\n```\n\nwhen the local contexts are viewed as sets of `FVarId`s (excluding\nimplementation detail hypotheses).\n\nAs an optimisation, the goal diff additionally contains an `fvarSubst :\nFVarIdSubst` which tracks renamings of hypotheses. When the substitution\ncontains a mapping `h ↦ h'`, this means that `h` was renamed to `h'`. Note that\nwe do not guarantee that for all such mappings, `h` actually appears in the old\ngoal and `h'` in the new goal. But if they do, `fvarSubst(T)` and `T'` must be\ndefeq in the context of the new goal, where `h : T`, `h' : T'` and\n`fvarSubst(T)` is the application of the substitution to `T`. If `h` and `h'`\nare `let` decls with values `v` and `v'`, `fvarSubst(v)` must additionally be\ndefeq to `v'`.\n\nThe `fvarSubst` is semantically irrelevant: it does not influence the sets of\nadded and removed hypotheses. However, it is an important performance\noptimisation, so rules should strive to generate accurate substitutions whenever\npossible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">GoalDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}