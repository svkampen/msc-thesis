{"name":"Lean.Elab.Tactic.SimpTrace","instances":[],"imports":["Lean.Elab.ElabRules","Lean.Elab.Tactic.Simp","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SimpTrace.lean#L82-L95","name":"Lean.Elab.Tactic.evalDSimpTrace","line":82,"kind":"def","docLink":"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.evalDSimpTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.evalDSimpTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalDSimpTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SimpTrace.lean#L73-L80","name":"Lean.Elab.Tactic.dsimpLocation'.go","line":73,"kind":"def","docLink":"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.dsimpLocation'.go","doc":"Implementation of `dsimp?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.dsimpLocation'.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation'</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarIdsToSimp : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simplifyTarget : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SimpTrace.lean#L60-L80","name":"Lean.Elab.Tactic.dsimpLocation'","line":60,"kind":"def","docLink":"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.dsimpLocation'","doc":"Implementation of `dsimp?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.dsimpLocation'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(loc : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Lean.Elab.Tactic.Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SimpTrace.lean#L42-L58","name":"Lean.Elab.Tactic.evalSimpAllTrace","line":42,"kind":"def","docLink":"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.evalSimpAllTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.evalSimpAllTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimpAllTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SimpTrace.lean#L25-L40","name":"Lean.Elab.Tactic.evalSimpTrace","line":25,"kind":"def","docLink":"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.evalSimpTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.evalSimpTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimpTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/SimpTrace.lean#L20-L23","name":"Lean.Elab.Tactic.mkSimpCallStx","line":20,"kind":"def","docLink":"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.mkSimpCallStx","doc":"Constructs the syntax for a simp call, for use with `simp?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/SimpTrace.html#Lean.Elab.Tactic.mkSimpCallStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpCallStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usedSimps : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span></div></div>"}]}