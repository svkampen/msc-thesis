{"name":"Mathlib.Tactic.CategoryTheory.Coherence.PureCoherence","instances":[{"typeNames":["Mathlib.Tactic.BicategoryLike.Normalize.Result"],"name":"Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult","className":"Inhabited"}],"imports":["Init","Lean.Meta.Tactic.Apply","Mathlib.Tactic.CategoryTheory.Coherence.Datatypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L165-L196","name":"Mathlib.Tactic.BicategoryLike.pureCoherence","line":165,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.pureCoherence","doc":"Close the goal of the form `η = θ`, where `η` and `θ` are 2-isomorphisms made up only of\nassociators, unitors, and identities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.pureCoherence\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">pureCoherence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Context\">Mathlib.Tactic.BicategoryLike.Context</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₂\">Mathlib.Tactic.BicategoryLike.MkMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">Mathlib.Tactic.BicategoryLike.MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">Mathlib.Tactic.BicategoryLike.MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">Mathlib.Tactic.BicategoryLike.MkEqOfNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nm : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L161-L161","name":"Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mkEqOfNaturality","line":161,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mkEqOfNaturality","doc":"Auxiliary function for `pureCoherence`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mkEqOfNaturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEqOfNaturality</span>.<span class=\"name\">mkEqOfNaturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">Mathlib.Tactic.BicategoryLike.MkEqOfNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η θ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η' θ' : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.IsoLift\">Mathlib.Tactic.BicategoryLike.IsoLift</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η_f η_g : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hη Hθ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L159-L159","name":"Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mk","line":159,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEqOfNaturality</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mkEqOfNaturality :\n  <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> →\n    <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.IsoLift\">Mathlib.Tactic.BicategoryLike.IsoLift</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.IsoLift\">Mathlib.Tactic.BicategoryLike.IsoLift</a> →\n          <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">Mathlib.Tactic.BicategoryLike.MkEqOfNaturality</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L158-L161","name":"Mathlib.Tactic.BicategoryLike.MkEqOfNaturality","line":158,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality","doc":"Prove the equality between structural isomorphisms using the naturality of `normalize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEqOfNaturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L95-L156","name":"Mathlib.Tactic.BicategoryLike.naturality","line":95,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.naturality","doc":"Meta version of `CategoryTheory.FreeBicategory.normalize_naturality`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.naturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">Mathlib.Tactic.BicategoryLike.MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">Mathlib.Tactic.BicategoryLike.MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nm : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L89-L89","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityInv","line":89,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityInv","doc":"The naturality for the inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η η_f η_g : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih_η : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L86-L86","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityHorizontalComp","line":86,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityHorizontalComp","doc":"The naturality for the horizontal composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityHorizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf₁ pf₁f₂ : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₁ g₁ f₂ g₂ : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η θ η_f₁ η_g₁ η_f₂ η_g₂ : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih_η ih_θ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L83-L83","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerRight","line":83,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerRight","doc":"The naturality for the right whiskering. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityWhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf pfh : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g h : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η η_f η_g η_fh : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih_η : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L80-L80","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerLeft","line":80,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerLeft","doc":"The naturality for the left whiskering. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityWhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf pfg : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g h : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η η_f η_fg η_fh : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih_η : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L77-L77","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityComp","line":77,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityComp","doc":"The naturality for the composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g h : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η θ η_f η_g η_h : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ih_η ih_θ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L75-L75","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityId","line":75,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityId","doc":"The naturality for the identity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η_f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L73-L73","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityRightUnitor","line":73,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityRightUnitor","doc":"The naturality for the right unitor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityRightUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityRightUnitor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η_f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L71-L71","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityLeftUnitor","line":71,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityLeftUnitor","doc":"The naturality for the left unitor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityLeftUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityLeftUnitor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η_f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L68-L68","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityAssociator","line":68,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityAssociator","doc":"The naturality for the associator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityAssociator\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityAssociator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p pf pfg pfgh : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f g h : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η_f η_g η_h : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L66-L66","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mk","line":66,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mkNaturalityAssociator :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n          <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n              <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n                <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                  <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkNaturalityLeftUnitor mkNaturalityRightUnitor mkNaturalityId :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkNaturalityComp :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n            <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n              <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                  <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkNaturalityWhiskerLeft mkNaturalityWhiskerRight :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n              <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                  <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkNaturalityHorizontalComp :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n              <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n                <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                  <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n                          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkNaturalityInv :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a> →\n          <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L65-L89","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality","line":65,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality","doc":"Lemmas to prove the meta version of `CategoryTheory.FreeBicategory.normalize_naturality`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L46-L63","name":"Mathlib.Tactic.BicategoryLike.normalize","line":46,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.normalize","doc":"Meta version of `CategoryTheory.FreeBicategory.normalizeIso`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.normalize\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">normalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">Mathlib.Tactic.BicategoryLike.MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">Mathlib.Tactic.BicategoryLike.MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mathlib.Tactic.BicategoryLike.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">Mathlib.Tactic.BicategoryLike.CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Mathlib.Tactic.BicategoryLike.Normalize.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L40-L40","name":"Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult","line":40,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">instInhabitedResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Mathlib.Tactic.BicategoryLike.Normalize.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L39-L39","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result.toNormalize","line":39,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.toNormalize","doc":"The 2-morphism from the original 1-morphism to the normalized 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.toNormalize\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span>.<span class=\"name\">toNormalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Mathlib.Tactic.BicategoryLike.Normalize.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L37-L37","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result.normalizedHom","line":37,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.normalizedHom","doc":"The normalized 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.normalizedHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span>.<span class=\"name\">normalizedHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Mathlib.Tactic.BicategoryLike.Normalize.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L35-L35","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result.mk","line":35,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(normalizedHom : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">Mathlib.Tactic.BicategoryLike.NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toNormalize : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mathlib.Tactic.BicategoryLike.Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Mathlib.Tactic.BicategoryLike.Normalize.Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L34-L40","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result","line":34,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result","doc":"The result of normalizing a 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}