{"name":"Mathlib.Combinatorics.Enumerative.Partition","instances":[{"typeNames":["Eq"],"name":"Nat.Partition.decidableEqPartition","className":"Decidable"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.instInhabited","className":"Inhabited"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.UniquePartitionZero","className":"Unique"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.UniquePartitionOne","className":"Unique"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.instFintype","className":"Fintype"}],"imports":["Init","Mathlib.Combinatorics.Enumerative.Composition","Mathlib.Tactic.ApplyFun"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L176-L178","name":"Nat.Partition.oddDistincts","line":176,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.oddDistincts","doc":"The finset of those partitions in which every part is odd and used at most once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.oddDistincts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">oddDistincts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L172-L174","name":"Nat.Partition.distincts","line":172,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.distincts","doc":"The finset of those partitions in which each part is used at most once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.distincts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">distincts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L168-L170","name":"Nat.Partition.odds","line":168,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.odds","doc":"The finset of those partitions in which every part is odd. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.odds\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">odds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L162-L166","name":"Nat.Partition.instFintype","line":162,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instFintype","doc":"Show there are finitely many partitions by considering the surjection from compositions to\npartitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instFintype\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">instFintype</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L158-L160","name":"Nat.Partition.count_ofSums_zero","line":158,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">count_ofSums_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">Nat.Partition.ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.parts</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L149-L156","name":"Nat.Partition.count_ofSums_of_ne_zero","line":149,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_of_ne_zero","doc":"The number of times a positive integer `i` appears in the partition `ofSums n l hl` is the same\nas the number of times it appears in the multiset `l`.\n(For `i = 0`, `Partition.non_zero` combined with `Multiset.count_eq_zero_of_not_mem` gives that\nthis is `0` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_of_ne_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">count_ofSums_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">Nat.Partition.ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.parts</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L146-L147","name":"Nat.Partition.ofSym_one","line":146,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_one\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">Nat.Partition.ofSym</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\">Nat.Partition.indiscrete</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L143-L144","name":"Nat.Partition.UniquePartitionOne","line":143,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionOne\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">UniquePartitionOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Nat.Partition</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L137-L141","name":"Nat.Partition.partition_one_parts","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_one_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_one_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">partition_one_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Nat.Partition</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">1</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L134-L135","name":"Nat.Partition.UniquePartitionZero","line":134,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionZero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">UniquePartitionZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Nat.Partition</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L131-L132","name":"Nat.Partition.partition_zero_parts","line":131,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_zero_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_zero_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">partition_zero_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Nat.Partition</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L128-L129","name":"Nat.Partition.indiscrete_parts","line":128,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">indiscrete_parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\">Nat.Partition.indiscrete</a> <span class=\"fn\">n</span>)</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">n</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L126-L126","name":"Nat.Partition.instInhabited","line":126,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instInhabited\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L123-L124","name":"Nat.Partition.indiscrete","line":123,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete","doc":"The partition of exactly one part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">indiscrete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L114-L121","name":"Nat.Partition.ofSymShapeEquiv","line":114,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSymShapeEquiv","doc":"An equivalence between `σ` and `τ` induces an equivalence between the subtypes of `Sym σ n` and\n`Sym τ n` corresponding to a given partition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSymShapeEquiv\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSymShapeEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">Nat.Partition.ofSym</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span> }</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">Nat.Partition.ofSym</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L106-L112","name":"Nat.Partition.ofSym_map","line":106,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_map\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">Nat.Partition.ofSym</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Basic.html#Sym.map\">Sym.map</a> <span class=\"fn\">(⇑<span class=\"fn\">e</span>)</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">Nat.Partition.ofSym</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L95-L102","name":"Nat.Partition.ofSym","line":95,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym","doc":"An element `s` of `Sym σ n` induces a partition given by its multiplicities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L92-L92","name":"Nat.Partition.ofMultiset_parts","line":92,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofMultiset_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset\">Nat.Partition.ofMultiset</a> <span class=\"fn\">l</span>)</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.filter\">Multiset.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L91-L93","name":"Nat.Partition.ofMultiset","line":91,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset","doc":"A `Multiset ℕ` induces a partition on its sum. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.sum</span>.Partition</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L83-L83","name":"Nat.Partition.ofSums_parts","line":83,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSums_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">Nat.Partition.ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.filter\">Multiset.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L80-L89","name":"Nat.Partition.ofSums","line":80,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums","doc":"Given a multiset which sums to `n`, construct a partition of `n` with the same multiset, but\nwithout the zeros.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L73-L76","name":"Nat.Partition.ofComposition_surj","line":73,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_surj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_surj\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition_surj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\">Nat.Partition.ofComposition</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L67-L67","name":"Nat.Partition.ofComposition_parts","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition\">Composition</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\">Nat.Partition.ofComposition</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span>)</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.blocks</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L66-L71","name":"Nat.Partition.ofComposition","line":66,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition","doc":"A composition induces a partition (just convert the list to a multiset). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition\">Composition</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L63-L64","name":"Nat.Partition.decidableEqPartition","line":63,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.decidableEqPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.decidableEqPartition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">decidableEqPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L56-L56","name":"Nat.Partition.parts_sum","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_sum","doc":"proof that the `parts` sum to `n`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.parts</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L54-L54","name":"Nat.Partition.parts_pos","line":54,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_pos","doc":"proof that the `parts` are positive "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.parts</span></span> → <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L52-L52","name":"Nat.Partition.parts","line":52,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts","doc":"positive integers summing to `n`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L50-L50","name":"Nat.Partition.mk","line":50,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.mk\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(parts : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parts_pos : <span class=\"fn\">∀ {<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">parts</span></span> → <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parts_sum : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">parts</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.Partition</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L49-L49","name":"Nat.Partition.ext","line":49,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x y : <span class=\"fn\"><span class=\"fn\">n</span>.Partition</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(parts : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.parts</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.parts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Combinatorics/Enumerative/Partition.lean#L48-L56","name":"Nat.Partition","line":48,"kind":"structure","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition","doc":"A partition of `n` is a multiset of positive integers summing to `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}