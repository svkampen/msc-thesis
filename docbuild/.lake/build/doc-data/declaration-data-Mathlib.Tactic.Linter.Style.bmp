{"name":"Mathlib.Tactic.Linter.Style","instances":[],"imports":["Init","Lean.Elab.Command","Mathlib.Tactic.Linter.Header"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L387-L418","name":"Mathlib.Linter.Style.longLine.longLineLinter","line":387,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longLine.longLineLinter","doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longLine.longLineLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">longLine</span>.<span class=\"name\">longLineLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L378-L383","name":"Mathlib.Linter.linter.style.longLine","line":378,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longLine","doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longLine\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longLine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L316-L370","name":"Mathlib.Linter.Style.longFile.longFileLinter","line":316,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longFile.longFileLinter","doc":"The \"longFile\" linter emits a warning on files which are longer than a certain number of lines\n(`linter.style.longFileDefValue` by default on mathlib, no limit for downstream projects).\nIf this option is set to `N` lines, the linter warns once a file has more than `N` lines.\nA value of `0` silences the linter entirely.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longFile.longFileLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">longFile</span>.<span class=\"name\">longFileLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L308-L312","name":"Mathlib.Linter.linter.style.longFileDefValue","line":308,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFileDefValue","doc":"The number of lines that the `longFile` linter considers the default. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFileDefValue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longFileDefValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L297-L306","name":"Mathlib.Linter.linter.style.longFile","line":297,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFile","doc":"The \"longFile\" linter emits a warning on files which are longer than a certain number of lines\n(`linter.style.longFileDefValue` by default on mathlib, no limit for downstream projects).\nIf this option is set to `N` lines, the linter warns once a file has more than `N` lines.\nA value of `0` silences the linter entirely.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFile\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longFile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L274-L284","name":"Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter","line":274,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter","doc":"The `lambdaSyntax` linter flags uses of the symbol `λ` to define anonymous functions.\nThis is syntactically equivalent to the `fun` keyword; mathlib style prefers using the latter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">lambdaSyntax</span>.<span class=\"name\">lambdaSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L263-L272","name":"Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax","line":263,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax","doc":"`findLambdaSyntax stx` extracts from `stx` all syntax nodes of `kind` `Term.fun`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">lambdaSyntax</span>.<span class=\"name\">findLambdaSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L252-L259","name":"Mathlib.Linter.linter.style.lambdaSyntax","line":252,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.lambdaSyntax","doc":"The `lambdaSyntax` linter flags uses of the symbol `λ` to define anonymous functions.\nThis is syntactically equivalent to the `fun` keyword; mathlib style prefers using the latter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.lambdaSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">lambdaSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L230-L238","name":"Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter","line":230,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter","doc":"The `dollarSyntax` linter flags uses of `<|` that are achieved by typing `$`.\nThese are disallowed by the mathlib style guide, as using `<|` pairs better with `|>`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">dollarSyntax</span>.<span class=\"name\">dollarSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L220-L228","name":"Mathlib.Linter.Style.dollarSyntax.findDollarSyntax","line":220,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.findDollarSyntax","doc":"`findDollarSyntax stx` extracts from `stx` the syntax nodes of `kind` `$`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.findDollarSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">dollarSyntax</span>.<span class=\"name\">findDollarSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L211-L216","name":"Mathlib.Linter.linter.style.dollarSyntax","line":211,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.dollarSyntax","doc":"The `dollarSyntax` linter flags uses of `<|` that are achieved by typing `$`.\nThese are disallowed by the mathlib style guide, as using `<|` pairs better with `|>`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.dollarSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">dollarSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L182-L198","name":"Mathlib.Linter.Style.cdotLinter","line":182,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.cdotLinter","doc":"The `cdot` linter flags uses of the \"cdot\" `·` that are achieved by typing a character\ndifferent from `·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter.\nIt also flags \"isolated cdots\", i.e. when the `·` is on its own line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.cdotLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">cdotLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L173-L178","name":"Mathlib.Linter.unwanted_cdot","line":173,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.unwanted_cdot","doc":"`unwanted_cdot stx` returns an array of syntax atoms within `stx`\ncorresponding to `cdot`s that are not written with the character `·`.\nThis is precisely what the `cdot` linter flags.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.unwanted_cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">unwanted_cdot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L162-L171","name":"Mathlib.Linter.findCDot","line":162,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.findCDot","doc":"`findCDot stx` extracts from `stx` the syntax nodes of `kind` `Lean.Parser.Term.cdot` or `cdotTk`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.findCDot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">findCDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L155-L160","name":"Mathlib.Linter.isCDot?","line":155,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.isCDot?","doc":"`isCDot? stx` checks whether `stx` is a `Syntax` node corresponding to a `cdot` typed with\nthe character `·`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.isCDot?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">isCDot?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L145-L153","name":"Mathlib.Linter.linter.style.cdot","line":145,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.cdot","doc":"The `cdot` linter flags uses of the \"cdot\" `·` that are achieved by typing a character\ndifferent from `·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter.\nIt also flags \"isolated cdots\", i.e. when the `·` is on its own line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">cdot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L112-L130","name":"Mathlib.Linter.Style.missingEnd.missingEndLinter","line":112,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.missingEnd.missingEndLinter","doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.missingEnd.missingEndLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">missingEnd</span>.<span class=\"name\">missingEndLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L102-L108","name":"Mathlib.Linter.linter.style.missingEnd","line":102,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.missingEnd","doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.missingEnd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">missingEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L66-L87","name":"Mathlib.Linter.Style.setOption.setOptionLinter","line":66,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.setOptionLinter","doc":"The `setOption` linter: this lints any `set_option` command, term or tactic\nwhich sets a `pp`, `profiler` or `trace` option.\n\n**Why is this bad?** These options are good for debugging, but should not be\nused in production code.\n**How to fix this?** Remove these options: usually, they are not necessary for production code.\n(Some tests will intentionally use one of these options; in this case, simply allow the linter.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.setOptionLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">setOptionLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L62-L64","name":"Mathlib.Linter.Style.setOption.is_set_option","line":62,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.is_set_option","doc":"Whether a given piece of syntax is a `set_option` command, tactic or term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.is_set_option\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">is_set_option</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L53-L60","name":"Mathlib.Linter.Style.setOption.parse_set_option","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parse_set_option","doc":"Whether a syntax element is a `set_option` command, tactic or term:\nReturn the name of the option being set, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parse_set_option\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">parse_set_option</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/Linter/Style.lean#L44-L49","name":"Mathlib.Linter.linter.style.setOption","line":44,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.setOption","doc":"The `setOption` linter emits a warning on a `set_option` command, term or tactic\nwhich sets a `pp`, `profiler` or `trace` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.setOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">setOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}