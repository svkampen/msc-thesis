{"name":"Lean.Meta.Canonicalizer","instances":[{"typeNames":["Lean.Meta.Canonicalizer.ExprVisited"],"name":"Lean.Meta.Canonicalizer.instInhabitedExprVisited","className":"Inhabited"},{"typeNames":["Lean.Meta.Canonicalizer.ExprVisited"],"name":"Lean.Meta.Canonicalizer.instBEqExprVisited","className":"BEq"},{"typeNames":["Lean.Meta.Canonicalizer.ExprVisited"],"name":"Lean.Meta.Canonicalizer.instHashableExprVisited","className":"Hashable"},{"typeNames":["Lean.Meta.Canonicalizer.State"],"name":"Lean.Meta.Canonicalizer.instInhabitedState","className":"Inhabited"}],"imports":["Lean.Data.HashMap","Lean.Util.ShareCommon","Lean.Meta.Basic","Lean.Meta.FunInfo","Std.Data.HashMap.Raw"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L114-L132","name":"Lean.Meta.Canonicalizer.canon","line":114,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.canon","doc":"\"Canonicalize\" the given expression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\">Lean.Meta.CanonM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L70-L71","name":"Lean.Meta.Canonicalizer.CanonM.run","line":70,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">CanonM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\">Lean.Meta.CanonM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(transparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\">Lean.Meta.TransparencyMode.instances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a> := <span class=\"fn\">{ <span class=\"fn\">cache</span> := <span class=\"fn\">Std.HashMap.Raw.empty</span>, <span class=\"fn\">keyToExprs</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L63-L68","name":"Lean.Meta.Canonicalizer.CanonM.run'","line":63,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run'","doc":"The definitionally equality tests are performed using the given transparency mode.\nWe claim `TransparencyMode.instances` is a good setting for most applications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">CanonM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\">Lean.Meta.CanonM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(transparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\">Lean.Meta.TransparencyMode.instances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a> := <span class=\"fn\">{ <span class=\"fn\">cache</span> := <span class=\"fn\">Std.HashMap.Raw.empty</span>, <span class=\"fn\">keyToExprs</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L61-L61","name":"Lean.Meta.Canonicalizer.CanonM","line":61,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">CanonM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L58-L59","name":"Lean.Meta.Canonicalizer.instInhabitedState","line":58,"kind":"instance","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L56-L56","name":"Lean.Meta.Canonicalizer.State.keyToExprs","line":56,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.keyToExprs","doc":"Given a hashcode `k` and `keyToExprs.find? h = some es`, we have that all `es` have hashcode `k`, and\nare not definitionally equal modulo the transparency setting used. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.keyToExprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span>.<span class=\"name\">keyToExprs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L52-L52","name":"Lean.Meta.Canonicalizer.State.cache","line":52,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.cache","doc":"Mapping from `Expr` to hash. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Std.HashMap.Raw</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L49-L49","name":"Lean.Meta.Canonicalizer.State.mk","line":49,"kind":"ctor","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cache : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Std.HashMap.Raw</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keyToExprs : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">Lean.Meta.Canonicalizer.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L46-L56","name":"Lean.Meta.Canonicalizer.State","line":46,"kind":"structure","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State","doc":"State for the `CanonM` monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L43-L44","name":"Lean.Meta.Canonicalizer.instHashableExprVisited","line":43,"kind":"instance","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instHashableExprVisited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instHashableExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instHashableExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L40-L41","name":"Lean.Meta.Canonicalizer.instBEqExprVisited","line":40,"kind":"instance","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instBEqExprVisited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instBEqExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instBEqExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L38-L38","name":"Lean.Meta.Canonicalizer.instInhabitedExprVisited","line":38,"kind":"instance","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedExprVisited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instInhabitedExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L37-L37","name":"Lean.Meta.Canonicalizer.ExprVisited.e","line":37,"kind":"def","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.e","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.e\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">ExprVisited</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L36-L36","name":"Lean.Meta.Canonicalizer.ExprVisited.mk","line":36,"kind":"ctor","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">ExprVisited</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">Lean.Meta.Canonicalizer.ExprVisited</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Canonicalizer.lean#L33-L38","name":"Lean.Meta.Canonicalizer.ExprVisited","line":33,"kind":"structure","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited","doc":"Auxiliary structure for creating a pointer-equality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">ExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}