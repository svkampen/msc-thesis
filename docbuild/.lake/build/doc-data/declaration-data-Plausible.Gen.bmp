{"name":"Plausible.Gen","instances":[],"imports":["Init","Plausible.Random","Batteries.Data.List.Basic","Batteries.Data.List.Perm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L120-L123","name":"Plausible.Gen.run","line":120,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.run","doc":"Execute a `Gen` inside the `IO` monad using `size` as the example size "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.run\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L112-L116","name":"Plausible.Gen.prodOf","line":112,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.prodOf","doc":"Given two generators produces a tuple consisting out of the result of both "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.prodOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">prodOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L104-L110","name":"Plausible.Gen.permutationOf","line":104,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.permutationOf","doc":"Generate a random permutation of a given list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.permutationOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">permutationOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">{ <span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L97-L100","name":"Plausible.Gen.elements","line":97,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.elements","doc":"Given a list of examples, choose one to create an example. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.elements\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L92-L95","name":"Plausible.Gen.oneOf","line":92,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.oneOf","doc":"Given a list of example generators, choose one to create an example. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.oneOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">oneOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.size</span></span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L86-L90","name":"Plausible.Gen.listOf","line":86,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.listOf","doc":"Create a `List` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.listOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">listOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L77-L84","name":"Plausible.Gen.arrayOf","line":77,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.arrayOf","doc":"Create an `Array` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.arrayOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">arrayOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L70-L73","name":"Plausible.Gen.chooseNat","line":70,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.chooseNat","doc":"Choose a `Nat` between `0` and `getSize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.chooseNat\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L66-L68","name":"Plausible.Gen.resize","line":66,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.resize","doc":"Apply a function to the size parameter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.resize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">resize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L62-L64","name":"Plausible.Gen.getSize","line":62,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.getSize","doc":"Get access to the size parameter of the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.getSize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">getSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L57-L60","name":"Plausible.Gen.chooseNatLt","line":57,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.chooseNatLt","doc":"Generate a `Nat` example between `lo` and `hi` (exclusively). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.chooseNatLt\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNatLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lo hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L52-L55","name":"Plausible.Gen.choose","line":52,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.choose","doc":"Lift `BoundedRandom.randomR` to the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.choose\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">choose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">Plausible.BoundedRandom</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lo hi : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L48-L50","name":"Plausible.Gen.chooseAny","line":48,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.chooseAny","doc":"Lift `Random.random` to the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.chooseAny\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Plausible.Random</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L43-L46","name":"Plausible.Gen.down","line":43,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.down\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L38-L41","name":"Plausible.Gen.up","line":38,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen.up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.up\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Plausible.Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/42dc02bdbc5d0c2f395718462a76c3d87318f7fa/Plausible/Gen.lean#L31-L34","name":"Plausible.Gen","line":31,"kind":"def","docLink":"./Plausible/Gen.html#Plausible.Gen","doc":"Monad to generate random examples to test properties with.\nIt has a `Nat` parameter so that the caller can decide on the\nsize of the examples. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}