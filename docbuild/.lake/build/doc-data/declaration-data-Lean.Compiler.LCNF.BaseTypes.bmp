{"name":"Lean.Compiler.LCNF.BaseTypes","instances":[{"typeNames":["Lean.Compiler.LCNF.BaseTypeExtState"],"name":"Lean.Compiler.LCNF.instInhabitedBaseTypeExtState","className":"Inhabited"}],"imports":["Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/BaseTypes.lean#L25-L33","name":"Lean.Compiler.LCNF.getOtherDeclBaseType","line":25,"kind":"def","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.getOtherDeclBaseType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.getOtherDeclBaseType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getOtherDeclBaseType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/BaseTypes.lean#L22-L23","name":"Lean.Compiler.LCNF.baseTypeExt","line":22,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.baseTypeExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.baseTypeExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">baseTypeExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <a href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState\">Lean.Compiler.LCNF.BaseTypeExtState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/BaseTypes.lean#L20-L20","name":"Lean.Compiler.LCNF.instInhabitedBaseTypeExtState","line":20,"kind":"instance","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.instInhabitedBaseTypeExtState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.instInhabitedBaseTypeExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedBaseTypeExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState\">Lean.Compiler.LCNF.BaseTypeExtState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/BaseTypes.lean#L19-L19","name":"Lean.Compiler.LCNF.BaseTypeExtState.base","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState.base","doc":"The LCNF type for the `base` phase. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState.base\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">BaseTypeExtState</span>.<span class=\"name\">base</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState\">Lean.Compiler.LCNF.BaseTypeExtState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/BaseTypes.lean#L17-L17","name":"Lean.Compiler.LCNF.BaseTypeExtState.mk","line":17,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">BaseTypeExtState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(base : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState\">Lean.Compiler.LCNF.BaseTypeExtState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Compiler/LCNF/BaseTypes.lean#L12-L20","name":"Lean.Compiler.LCNF.BaseTypeExtState","line":12,"kind":"structure","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState","doc":"State for the environment extension used to save the LCNF base phase type for declarations\nthat do not have code associated with them.\nExample: constructors, inductive types, foreign functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.BaseTypeExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">BaseTypeExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}