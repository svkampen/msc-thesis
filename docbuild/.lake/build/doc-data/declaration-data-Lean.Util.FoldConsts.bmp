{"name":"Lean.Util.FoldConsts","instances":[],"imports":["Lean.Expr","Lean.Environment"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L74-L81","name":"Lean.getMaxHeight","line":74,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.getMaxHeight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.getMaxHeight\"><span class=\"name\">Lean</span>.<span class=\"name\">getMaxHeight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L61-L70","name":"Lean.ConstantInfo.getUsedConstantsAsSet","line":61,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.ConstantInfo.getUsedConstantsAsSet","doc":"Return all names appearing in the type or value of a `ConstantInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.ConstantInfo.getUsedConstantsAsSet\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">getUsedConstantsAsSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L53-L55","name":"Lean.Expr.getUsedConstantsAsSet","line":53,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstantsAsSet","doc":"Like `Expr.getUsedConstants`, but produce a `NameSet`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstantsAsSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getUsedConstantsAsSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L50-L51","name":"Lean.Expr.getUsedConstants","line":50,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstants","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getUsedConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L46-L48","name":"Lean.Expr.foldConsts","line":46,"kind":"opaque","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.foldConsts","doc":"Apply `f` to every constant occurring in `e` once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.foldConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">foldConsts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L41-L42","name":"Lean.Expr.FoldConstsImpl.foldUnsafe","line":41,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.foldUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.foldUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">foldUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L21-L38","name":"Lean.Expr.FoldConstsImpl.fold.visit","line":21,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">fold</span>.<span class=\"name\">visit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\">Lean.Expr.FoldConstsImpl.FoldM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L20-L39","name":"Lean.Expr.FoldConstsImpl.fold","line":20,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\">Lean.Expr.FoldConstsImpl.FoldM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L18-L18","name":"Lean.Expr.FoldConstsImpl.FoldM","line":18,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">FoldM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L16-L16","name":"Lean.Expr.FoldConstsImpl.State.visitedConsts","line":16,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedConsts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">visitedConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L15-L15","name":"Lean.Expr.FoldConstsImpl.State.visited","line":15,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L14-L14","name":"Lean.Expr.FoldConstsImpl.State.mk","line":14,"kind":"ctor","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(visited : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(visitedConsts : <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Util/FoldConsts.lean#L14-L16","name":"Lean.Expr.FoldConstsImpl.State","line":14,"kind":"structure","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}