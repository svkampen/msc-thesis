{"name":"Lean.Structure","instances":[{"typeNames":["Lean.StructureFieldInfo"],"name":"Lean.instInhabitedStructureFieldInfo","className":"Inhabited"},{"typeNames":["Lean.StructureFieldInfo"],"name":"Lean.instReprStructureFieldInfo","className":"Repr"},{"typeNames":["Lean.StructureParentInfo"],"name":"Lean.instInhabitedStructureParentInfo","className":"Inhabited"},{"typeNames":["Lean.StructureInfo"],"name":"Lean.instInhabitedStructureInfo","className":"Inhabited"},{"typeNames":["_private.Lean.Structure.0.Lean.StructureState"],"name":"Lean.instInhabitedStructureState","className":"Inhabited"},{"typeNames":["Lean.StructureDescr"],"name":"Lean.instInhabitedStructureDescr","className":"Inhabited"},{"typeNames":["Lean.StructureResolutionState"],"name":"Lean.instInhabitedStructureResolutionState","className":"Inhabited"},{"typeNames":["Lean.StructureResolutionOrderConflict"],"name":"Lean.instInhabitedStructureResolutionOrderConflict","className":"Inhabited"},{"typeNames":["Lean.StructureResolutionOrderResult"],"name":"Lean.instInhabitedStructureResolutionOrderResult","className":"Inhabited"}],"imports":["Lean.Environment","Lean.ProjFns","Lean.Exception"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L431-L436","name":"Lean.getAllParentStructures","line":431,"kind":"def","docLink":"./Lean/Structure.html#Lean.getAllParentStructures","doc":"Returns the transitive closure of all parent structures of the structure.\nThis is the same as `Lean.getStructureResolutionOrder` but without including `structName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getAllParentStructures\"><span class=\"name\">Lean</span>.<span class=\"name\">getAllParentStructures</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L424-L429","name":"Lean.getStructureResolutionOrder","line":424,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureResolutionOrder","doc":"Gets the resolution order for a structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureResolutionOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureResolutionOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L411-L422","name":"Lean.computeStructureResolutionOrder.selectParent","line":411,"kind":"def","docLink":"./Lean/Structure.html#Lean.computeStructureResolutionOrder.selectParent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.computeStructureResolutionOrder.selectParent\"><span class=\"name\">Lean</span>.<span class=\"name\">computeStructureResolutionOrder</span>.<span class=\"name\">selectParent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(resOrders : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L370-L422","name":"Lean.computeStructureResolutionOrder","line":370,"kind":"opaque","docLink":"./Lean/Structure.html#Lean.computeStructureResolutionOrder","doc":"Computes and caches the C3 linearization. Assumes parents have already been set with `setStructureParents`.\nIf `relaxed` is false, then if the linearization cannot be computed, conflicts are recorded in the return value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.computeStructureResolutionOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">computeStructureResolutionOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(relaxed : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">Lean.StructureResolutionOrderResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L368-L368","name":"Lean.instInhabitedStructureResolutionOrderResult","line":368,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionOrderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">Lean.StructureResolutionOrderResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L367-L367","name":"Lean.StructureResolutionOrderResult.conflicts","line":367,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult.conflicts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult.conflicts\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span>.<span class=\"name\">conflicts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">Lean.StructureResolutionOrderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L366-L366","name":"Lean.StructureResolutionOrderResult.resolutionOrder","line":366,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult.resolutionOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult.resolutionOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span>.<span class=\"name\">resolutionOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">Lean.StructureResolutionOrderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L365-L365","name":"Lean.StructureResolutionOrderResult.mk","line":365,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(resolutionOrder : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(conflicts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">Lean.StructureResolutionOrderResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L365-L368","name":"Lean.StructureResolutionOrderResult","line":365,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L363-L363","name":"Lean.instInhabitedStructureResolutionOrderConflict","line":363,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderConflict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderConflict\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionOrderConflict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L362-L362","name":"Lean.StructureResolutionOrderConflict.conflicts","line":362,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.conflicts","doc":"Conflicts that must come before `badParent`. The flag is whether it is a direct parent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.conflicts\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">conflicts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L360-L360","name":"Lean.StructureResolutionOrderConflict.badParent","line":360,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.badParent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.badParent\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">badParent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L359-L359","name":"Lean.StructureResolutionOrderConflict.isDirectParent","line":359,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.isDirectParent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.isDirectParent\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">isDirectParent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L358-L358","name":"Lean.StructureResolutionOrderConflict.mk","line":358,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(isDirectParent : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(badParent : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(conflicts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">Lean.StructureResolutionOrderConflict</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L357-L363","name":"Lean.StructureResolutionOrderConflict","line":357,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict","doc":"\"The `badParent` must come after the `conflicts`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L341-L346","name":"Lean.structureResolutionExt","line":341,"kind":"opaque","docLink":"./Lean/Structure.html#Lean.structureResolutionExt","doc":"We use an environment extension to cache resolution orders.\nThese are not expensive to compute, but worth caching, and we save olean storage space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.structureResolutionExt\"><span class=\"name\">Lean</span>.<span class=\"name\">structureResolutionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">Lean.StructureResolutionState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L339-L339","name":"Lean.instInhabitedStructureResolutionState","line":339,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">Lean.StructureResolutionState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L338-L338","name":"Lean.StructureResolutionState.resolutions","line":338,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureResolutionState.resolutions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionState.resolutions\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionState</span>.<span class=\"name\">resolutions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">Lean.StructureResolutionState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L337-L337","name":"Lean.StructureResolutionState.mk","line":337,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureResolutionState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(resolutions : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">Lean.StructureResolutionState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L337-L339","name":"Lean.StructureResolutionState","line":337,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureResolutionState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionState\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L301-L308","name":"Lean.getStructureLikeNumFields","line":301,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureLikeNumFields","doc":"Return number of fields for a structure-like type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureLikeNumFields\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureLikeNumFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L290-L299","name":"Lean.getStructureLikeCtor?","line":290,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureLikeCtor?","doc":"Returns the constructor of the structure named `constName` if it is a non-recursive single-constructor inductive type with no indices.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureLikeCtor?\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureLikeCtor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L280-L288","name":"Lean.isStructureLike","line":280,"kind":"def","docLink":"./Lean/Structure.html#Lean.isStructureLike","doc":"Returns true iff `constName` is a non-recursive inductive datatype that has only one constructor and no indices.\n\nSuch types have special kernel support. This must be in sync with `is_structure_like`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.isStructureLike\"><span class=\"name\">Lean</span>.<span class=\"name\">isStructureLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L273-L278","name":"Lean.getPathToBaseStructure?","line":273,"kind":"def","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructure?","doc":"If `baseStructName` is an ancestor structure for `structName`, then return a sequence of projection functions\nto go from `structName` to `baseStructName`. Returns `[]` if `baseStructName == structName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getPathToBaseStructure?\"><span class=\"name\">Lean</span>.<span class=\"name\">getPathToBaseStructure?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(baseStructName structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L255-L271","name":"Lean.getPathToBaseStructureAux","line":255,"kind":"opaque","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructureAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getPathToBaseStructureAux\"><span class=\"name\">Lean</span>.<span class=\"name\">getPathToBaseStructureAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(baseStructName structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L246-L253","name":"Lean.getDefaultFnForField?","line":246,"kind":"def","docLink":"./Lean/Structure.html#Lean.getDefaultFnForField?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getDefaultFnForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getDefaultFnForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L242-L244","name":"Lean.mkDefaultFnOfProjFn","line":242,"kind":"def","docLink":"./Lean/Structure.html#Lean.mkDefaultFnOfProjFn","doc":"Get the name of the auxiliary definition that would have the default value for the structure field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.mkDefaultFnOfProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkDefaultFnOfProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(projFn : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L236-L240","name":"Lean.getProjFnInfoForField?","line":236,"kind":"def","docLink":"./Lean/Structure.html#Lean.getProjFnInfoForField?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getProjFnInfoForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getProjFnInfoForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/ProjFns.html#Lean.ProjectionFunctionInfo\">Lean.ProjectionFunctionInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L230-L234","name":"Lean.getProjFnForField?","line":230,"kind":"def","docLink":"./Lean/Structure.html#Lean.getProjFnForField?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getProjFnForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getProjFnForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L220-L228","name":"Lean.isStructure","line":220,"kind":"def","docLink":"./Lean/Structure.html#Lean.isStructure","doc":"Returns true if `constName` is the name of an inductive datatype\ncreated using the `structure` or `class` commands.\n\nThese are inductive types for which structure information has been registered with `registerStructure`.\nSee also `Lean.getStructureInfo?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.isStructure\"><span class=\"name\">Lean</span>.<span class=\"name\">isStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L204-L218","name":"Lean.getStructureFieldsFlattened","line":204,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureFieldsFlattened","doc":"Returns the full set of field names for the given structure,\n\"flattening\" all the parent structures that are subobject fields.\nIf `includeSubobjectFields` is true, then subobject `toParent` projections are included,\nand otherwise they are omitted.\n\nFor example, given `Bar` such that\n```lean\nstructure Foo where a : Nat\nstructure Bar extends Foo where b : Nat\n```\nthis returns ``#[`toFoo, `a, `b]``, or ``#[`a, `b]`` when `includeSubobjectFields := false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureFieldsFlattened\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureFieldsFlattened</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(includeSubobjectFields : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L186-L194","name":"Lean.findField?","line":186,"kind":"opaque","docLink":"./Lean/Structure.html#Lean.findField?","doc":"Return the name of the structure that contains the field relative to structure `structName`.\nIf `structName` contains the field itself, returns that,\nand otherwise recursively looks into parents that are subobjects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.findField?\"><span class=\"name\">Lean</span>.<span class=\"name\">findField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L175-L184","name":"Lean.getStructureSubobjects","line":175,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureSubobjects","doc":"Return the parent structures that are embedded in the structure.\nThis is the array of all results from `Lean.isSubobjectField?` in order.\n\nNote: this is *not* a subset of the parents from `getStructureParentInfo`.\nIf a direct parent cannot itself be represented as a subobject,\nsometimes one of its parents (or one of their parents, etc.) can.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureSubobjects\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureSubobjects</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L171-L173","name":"Lean.getStructureParentInfo","line":171,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureParentInfo","doc":"Get information for all the parents that appear in the `extends` clause. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureParentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureParentInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L164-L169","name":"Lean.isSubobjectField?","line":164,"kind":"def","docLink":"./Lean/Structure.html#Lean.isSubobjectField?","doc":"If `fieldName` is a subobject (that it, if it is an embedded parent structure), then returns the name of that parent structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.isSubobjectField?\"><span class=\"name\">Lean</span>.<span class=\"name\">isSubobjectField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L157-L162","name":"Lean.getFieldInfo?","line":157,"kind":"def","docLink":"./Lean/Structure.html#Lean.getFieldInfo?","doc":"Get the `StructureFieldInfo` for the given direct field of the structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getFieldInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">getFieldInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L153-L155","name":"Lean.getStructureFields","line":153,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureFields","doc":"Gets the direct field names for the given structure, including subobject fields. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureFields\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L137-L151","name":"Lean.getStructureCtor","line":137,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureCtor","doc":"Gets the constructor of an inductive type that has exactly one constructor.\nThis is meant to be used with types that have had been registered as a structure by `registerStructure`,\nbut this is not checked.\n\nWarning: these do *not* need to be \"structure-likes\". A structure-like is non-recursive,\nand structure-likes have special kernel support.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L127-L135","name":"Lean.getStructureInfo","line":127,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureInfo","doc":"Gets the `StructureInfo` for `structName`, which is assumed to have been declared as a structure to the elaborator.\nPanics on failure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L121-L125","name":"Lean.getStructureInfo?","line":121,"kind":"def","docLink":"./Lean/Structure.html#Lean.getStructureInfo?","doc":"Gets the `StructureInfo` if `structName` has been declared as a structure to the elaborator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L112-L119","name":"Lean.setStructureParents","line":112,"kind":"def","docLink":"./Lean/Structure.html#Lean.setStructureParents","doc":"Set parent projection info for a structure defined in the current module.\nThrows an error if the structure has not already been registered with `Lean.registerStructure`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.setStructureParents\"><span class=\"name\">Lean</span>.<span class=\"name\">setStructureParents</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parentInfo : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L100-L110","name":"Lean.registerStructure","line":100,"kind":"def","docLink":"./Lean/Structure.html#Lean.registerStructure","doc":"Declare a new structure to the elaborator.\nEvery structure created by `structure` or `class` has such an entry.\nThis should be followed up with `setStructureParents` and `setStructureResolutionOrder`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.registerStructure\"><span class=\"name\">Lean</span>.<span class=\"name\">registerStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Structure.html#Lean.StructureDescr\">Lean.StructureDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L98-L98","name":"Lean.instInhabitedStructureDescr","line":98,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureDescr\">Lean.StructureDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L97-L97","name":"Lean.StructureDescr.fields","line":97,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureDescr.fields","doc":"The fields should be in the order that they appear in the structure's constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr.fields\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span>.<span class=\"name\">fields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureDescr\">Lean.StructureDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L95-L95","name":"Lean.StructureDescr.structName","line":95,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureDescr.structName","doc":"The name of the structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureDescr\">Lean.StructureDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L93-L93","name":"Lean.StructureDescr.mk","line":93,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureDescr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fields : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureDescr\">Lean.StructureDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L90-L98","name":"Lean.StructureDescr","line":90,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureDescr","doc":"A descriptor for a structure, for constructing a `StructureInfo` via `Lean.registerStructure`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L83-L88","name":"Lean.structureExt","line":83,"kind":"opaque","docLink":"./Lean/Structure.html#Lean.structureExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.structureExt\"><span class=\"name\">Lean</span>.<span class=\"name\">structureExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a> <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Structure.html#_private.Lean.Structure.0.Lean.StructureState\">Lean.StructureState</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L81-L81","name":"Lean.instInhabitedStructureState","line":81,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#_private.Lean.Structure.0.Lean.StructureState\">Lean.StructureState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L71-L76","name":"Lean.StructureInfo.getProjFn?","line":71,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureInfo.getProjFn?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.getProjFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">getProjFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L68-L69","name":"Lean.StructureInfo.lt","line":68,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureInfo.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i₁ i₂ : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L66-L66","name":"Lean.instInhabitedStructureInfo","line":66,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L65-L65","name":"Lean.StructureInfo.parentInfo","line":65,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureInfo.parentInfo","doc":"Information about structure parents. These are in the order they appear in the `extends` clause. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.parentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">parentInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L63-L63","name":"Lean.StructureInfo.fieldInfo","line":63,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureInfo.fieldInfo","doc":"Information about the structure fields, sorted by `fieldName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.fieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">fieldInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L61-L61","name":"Lean.StructureInfo.fieldNames","line":61,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureInfo.fieldNames","doc":"The direct fields of a structure, sorted by position in the structure.\nFor example, the `s.3` notation refers to `fieldNames[3 - 1]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.fieldNames\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">fieldNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L58-L58","name":"Lean.StructureInfo.structName","line":58,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureInfo.structName","doc":"The name of the structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L56-L56","name":"Lean.StructureInfo.mk","line":56,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldInfo : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parentInfo : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureInfo\">Lean.StructureInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L53-L66","name":"Lean.StructureInfo","line":53,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureInfo","doc":"Data about a type created with the `structure` command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L51-L51","name":"Lean.instInhabitedStructureParentInfo","line":51,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureParentInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureParentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureParentInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L50-L50","name":"Lean.StructureParentInfo.projFn","line":50,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.projFn","doc":"The projection function associated to the field. For subobjects, this is the same as the `projFn` in its `fieldInfo` entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.projFn\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">projFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L48-L48","name":"Lean.StructureParentInfo.subobject","line":48,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.subobject","doc":"Whether this parent structure is represented as a subobject. If so, then there is a `fieldInfo` entry with the same `projFn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.subobject\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">subobject</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L46-L46","name":"Lean.StructureParentInfo.structName","line":46,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.structName","doc":"The name of the parent structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L44-L44","name":"Lean.StructureParentInfo.mk","line":44,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subobject : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(projFn : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">Lean.StructureParentInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L37-L51","name":"Lean.StructureParentInfo","line":37,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureParentInfo","doc":"Data for a direct parent of a structure.\nSome structure parents are represented as subobjects (embedded structures),\nand for these the parent projection is a true projection.\nIf a structure parent shares a field with a previous parent, it will become an implicit parent,\nand all the fields of the structure parent that do not occur in earlier parents are fields of the new structure\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L34-L35","name":"Lean.StructureFieldInfo.lt","line":34,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i₁ i₂ : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L32-L32","name":"Lean.instReprStructureFieldInfo","line":32,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instReprStructureFieldInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instReprStructureFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprStructureFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L32-L32","name":"Lean.instInhabitedStructureFieldInfo","line":32,"kind":"instance","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L31-L31","name":"Lean.StructureFieldInfo.autoParam?","line":31,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.autoParam?","doc":"If set, the field is an autoparam (a field declared using `fld := by ...` syntax).\nThe expression evaluates to a tactic `Syntax` object. Generally this is an `Expr.const` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.autoParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">autoParam?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L28-L28","name":"Lean.StructureFieldInfo.binderInfo","line":28,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.binderInfo","doc":"The binder info for the field from the `structure` definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.binderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">binderInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L26-L26","name":"Lean.StructureFieldInfo.subobject?","line":26,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.subobject?","doc":"If this field is for a subobject (i.e., an embedded parent structure), contains the name of the parent structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.subobject?\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">subobject?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L24-L24","name":"Lean.StructureFieldInfo.projFn","line":24,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.projFn","doc":"The projection function associated to the field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.projFn\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">projFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L22-L22","name":"Lean.StructureFieldInfo.fieldName","line":22,"kind":"def","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.fieldName","doc":"The name of the field. This is a single-component name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.fieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">fieldName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L20-L20","name":"Lean.StructureFieldInfo.mk","line":20,"kind":"ctor","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fieldName projFn : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subobject? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderInfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(autoParam? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">Lean.StructureFieldInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Structure.lean#L15-L32","name":"Lean.StructureFieldInfo","line":15,"kind":"structure","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo","doc":"Data for a structure field.\nThese are direct fields of a structure, including \"subobject\" fields for the embedded parents.\nThe full collection of fields is the transitive closure of fields through the subobject fields.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}