{"name":"Lean.Meta.Tactic.Simp.Types","instances":[{"typeNames":["Lean.Meta.Simp.Result"],"name":"Lean.Meta.Simp.instInhabitedResult","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Context"],"name":"Lean.Meta.Simp.instInhabitedContext","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.UsedSimps"],"name":"Lean.Meta.Simp.instInhabitedUsedSimps","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Diagnostics"],"name":"Lean.Meta.Simp.instInhabitedDiagnostics","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Stats"],"name":"Lean.Meta.Simp.instInhabitedStats","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.Tactic.Simp.Types.0.Lean.Meta.Simp.MethodsRef"],"name":"Lean.Meta.Simp.instNonemptyMethodsRef","className":"Nonempty"},{"typeNames":["Lean.Meta.Simp.Step"],"name":"Lean.Meta.Simp.instInhabitedStep","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Simproc"],"name":"Lean.Meta.Simp.instAndThenSimproc","className":"AndThen"},{"typeNames":["Lean.Meta.Simp.DSimproc"],"name":"Lean.Meta.Simp.instAndThenDSimproc","className":"AndThen"},{"typeNames":["Lean.Meta.Simp.SimprocOLeanEntry"],"name":"Lean.Meta.Simp.instInhabitedSimprocOLeanEntry","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Simprocs"],"name":"Lean.Meta.Simp.instInhabitedSimprocs","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Methods"],"name":"Lean.Meta.Simp.instInhabitedMethods","className":"Inhabited"}],"imports":["Lean.Meta.AppBuilder","Lean.Meta.CongrTheorems","Lean.Meta.Eqns","Lean.Meta.Tactic.Replace","Lean.Meta.Tactic.Simp.SimpTheorems","Lean.Meta.Tactic.Simp.SimpCongrTheorems"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L674-L685","name":"Lean.Meta.applySimpResultToTarget","line":674,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.applySimpResultToTarget","doc":"Auxiliary method.\nGiven the current `target` of `mvarId`, apply `r` which is a new target and proof that it is equal to the current one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.applySimpResultToTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">applySimpResultToTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L663-L668","name":"Lean.Meta.Simp.DStep.addExtraArgs","line":663,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep.addExtraArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep.addExtraArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DStep</span>.<span class=\"name\">addExtraArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(extraArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L656-L661","name":"Lean.Meta.Simp.Step.addExtraArgs","line":656,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.addExtraArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.addExtraArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Step</span>.<span class=\"name\">addExtraArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(extraArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L647-L654","name":"Lean.Meta.Simp.Result.addExtraArgs","line":647,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.addExtraArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.addExtraArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">addExtraArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(extraArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L637-L645","name":"Lean.Meta.Simp.getDtConfig","line":637,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getDtConfig","doc":"Return a WHNF configuration for retrieving `[simp]` from the discrimination tree.\nIf user has disabled `zeta` and/or `beta` reduction in the simplifier, or enabled `zetaDelta`,\nwe must also disable/enable them when retrieving lemmas from discrimination tree. See issues: #2669 and #2281\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getDtConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getDtConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L522-L635","name":"Lean.Meta.Simp.tryAutoCongrTheorem?","line":522,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.tryAutoCongrTheorem?","doc":"Try to use automatically generated congruence theorems. See `mkCongrSimp?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.tryAutoCongrTheorem?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">tryAutoCongrTheorem?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L500-L520","name":"Lean.Meta.Simp.mkCongrSimp?","line":500,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkCongrSimp?","doc":"Retrieve auto-generated congruence lemma for `f`.\n\nRemark: If all argument kinds are `fixed` or `eq`, it returns `none` because\nusing simple congruence theorems `congr`, `congrArg`, and `congrFun` produces a more compact proof.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkCongrSimp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkCongrSimp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">Lean.Meta.CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L464-L498","name":"Lean.Meta.Simp.congrArgs","line":464,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.congrArgs","doc":"Given a simplified function result `r` and arguments `args`, simplify arguments using `simp` and `dsimp`.\nThe resulting proof is built using `congr` and `congrFun` theorems.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.congrArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">congrArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L458-L462","name":"Lean.Meta.Simp.removeUnnecessaryCasts.elimDummyEqRec","line":458,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.removeUnnecessaryCasts.elimDummyEqRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.removeUnnecessaryCasts.elimDummyEqRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">removeUnnecessaryCasts</span>.<span class=\"name\">elimDummyEqRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L455-L456","name":"Lean.Meta.Simp.removeUnnecessaryCasts.isDummyEqRec","line":455,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.removeUnnecessaryCasts.isDummyEqRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.removeUnnecessaryCasts.isDummyEqRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">removeUnnecessaryCasts</span>.<span class=\"name\">isDummyEqRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L441-L462","name":"Lean.Meta.Simp.removeUnnecessaryCasts","line":441,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.removeUnnecessaryCasts","doc":"Given the application `e`, remove unnecessary casts of the form `Eq.rec a rfl` and `Eq.ndrec a rfl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.removeUnnecessaryCasts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">removeUnnecessaryCasts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L435-L439","name":"Lean.Meta.Simp.mkImpCongr","line":435,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkImpCongr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkImpCongr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkImpCongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(src : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r₁ r₂ : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L427-L433","name":"Lean.Meta.Simp.mkCongr","line":427,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkCongr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkCongr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkCongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r₁ r₂ : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L422-L425","name":"Lean.Meta.Simp.mkCongrFun","line":422,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkCongrFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkCongrFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkCongrFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L418-L420","name":"Lean.Meta.Simp.Result.mkCast","line":418,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mkCast","doc":"Construct the `Expr` `cast h e`, from a `Simp.Result` with proof `h`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mkCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mkCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L403-L416","name":"Lean.Meta.Simp.Result.getProof'","line":403,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.getProof'","doc":"Similar to `Result.getProof`, but adds a `mkExpectedTypeHint` if `proof?` is `none`\n(i.e., result is definitionally equal to input), but we cannot establish that\n`source` and `r.expr` are definitionally when using `TransparencyMode.reducible`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.getProof'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">getProof'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(source : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L398-L401","name":"Lean.Meta.Simp.Result.getProof","line":398,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.getProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.getProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">getProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L390-L396","name":"Lean.Meta.Simp.recordTheoremWithBadKeys","line":390,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordTheoremWithBadKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordTheoremWithBadKeys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">recordTheoremWithBadKeys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thm : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L385-L388","name":"Lean.Meta.Simp.recordCongrTheorem","line":385,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordCongrTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordCongrTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">recordCongrTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L364-L383","name":"Lean.Meta.Simp.recordSimpTheorem","line":364,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">recordSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L359-L362","name":"Lean.Meta.Simp.recordTriedSimpTheorem","line":359,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordTriedSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.recordTriedSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">recordTriedSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L355-L357","name":"Lean.Meta.Simp.withDischarger","line":355,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withDischarger","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withDischarger\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withDischarger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wellBehavedDischarge : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L347-L353","name":"Lean.Meta.Simp.withFreshCache","line":347,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withFreshCache","doc":"Save current cache, reset it, execute `x`, and then restore original cache.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withFreshCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withFreshCache</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L340-L345","name":"Lean.Meta.Simp.withPreservedCache","line":340,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withPreservedCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withPreservedCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withPreservedCache</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L333-L338","name":"Lean.Meta.Simp.inDSimp","line":333,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.inDSimp","doc":"Returns `true` if `simp` is in `dsimp` mode.\nThat is, only transformations that preserve definitional equality should be applied.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.inDSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inDSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L330-L331","name":"Lean.Meta.Simp.getSimpCongrTheorems","line":330,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getSimpCongrTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getSimpCongrTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getSimpCongrTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpCongrTheorems.html#Lean.Meta.SimpCongrTheorems\">Lean.Meta.SimpCongrTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L327-L328","name":"Lean.Meta.Simp.getSimpTheorems","line":327,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getSimpTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getSimpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getSimpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L324-L325","name":"Lean.Meta.Simp.withParent","line":324,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withParent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.withParent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withParent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(parent : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L321-L322","name":"Lean.Meta.Simp.getConfig","line":321,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L318-L319","name":"Lean.Meta.Simp.getContext","line":318,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L315-L316","name":"Lean.Meta.Simp.post","line":315,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L312-L313","name":"Lean.Meta.Simp.pre","line":312,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.pre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.pre\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">pre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L309-L310","name":"Lean.Meta.Simp.getMethods","line":309,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.getMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L306-L307","name":"Lean.Meta.Simp.MethodsRef.toMethods","line":306,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.MethodsRef.toMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.MethodsRef.toMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">MethodsRef</span>.<span class=\"name\">toMethods</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#_private.Lean.Meta.Tactic.Simp.Types.0.Lean.Meta.Simp.MethodsRef\">Lean.Meta.Simp.MethodsRef</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L303-L304","name":"Lean.Meta.Simp.MethodsRef.toMethodsImpl","line":303,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.MethodsRef.toMethodsImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.MethodsRef.toMethodsImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">MethodsRef</span>.<span class=\"name\">toMethodsImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#_private.Lean.Meta.Tactic.Simp.Types.0.Lean.Meta.Simp.MethodsRef\">Lean.Meta.Simp.MethodsRef</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L300-L301","name":"Lean.Meta.Simp.Methods.toMethodsRef","line":300,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.toMethodsRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.toMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">toMethodsRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#_private.Lean.Meta.Tactic.Simp.Types.0.Lean.Meta.Simp.MethodsRef\">Lean.Meta.Simp.MethodsRef</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L297-L298","name":"Lean.Meta.Simp.Methods.toMethodsRefImpl","line":297,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.toMethodsRefImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.toMethodsRefImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">toMethodsRefImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#_private.Lean.Meta.Tactic.Simp.Types.0.Lean.Meta.Simp.MethodsRef\">Lean.Meta.Simp.MethodsRef</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L295-L295","name":"Lean.Meta.Simp.instInhabitedMethods","line":295,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L294-L294","name":"Lean.Meta.Simp.Methods.wellBehavedDischarge","line":294,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.wellBehavedDischarge","doc":"`wellBehavedDischarge` must **not** be set to `true` IF `discharge?`\naccess local declarations with index >= `Context.lctxInitIndices` when\n`contextual := false`.\nReason: it would prevent us from aggressively caching `simp` results.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.wellBehavedDischarge\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">wellBehavedDischarge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L287-L287","name":"Lean.Meta.Simp.Methods.discharge?","line":287,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.discharge?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.discharge?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">discharge?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L286-L286","name":"Lean.Meta.Simp.Methods.dpost","line":286,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.dpost","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.dpost\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">dpost</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L285-L285","name":"Lean.Meta.Simp.Methods.dpre","line":285,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.dpre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.dpre\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">dpre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L284-L284","name":"Lean.Meta.Simp.Methods.post","line":284,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L283-L283","name":"Lean.Meta.Simp.Methods.pre","line":283,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.pre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.pre\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">pre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L282-L282","name":"Lean.Meta.Simp.Methods.mk","line":282,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pre post : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dpre dpost : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wellBehavedDischarge : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L282-L295","name":"Lean.Meta.Simp.Methods","line":282,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Methods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L280-L280","name":"Lean.Meta.Simp.instInhabitedSimprocs","line":280,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedSimprocs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedSimprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedSimprocs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Lean.Meta.Simprocs</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L279-L279","name":"Lean.Meta.Simp.Simprocs.erased","line":279,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.erased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simprocs</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Lean.Meta.Simprocs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L278-L278","name":"Lean.Meta.Simp.Simprocs.simprocNames","line":278,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.simprocNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.simprocNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simprocs</span>.<span class=\"name\">simprocNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Lean.Meta.Simprocs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L277-L277","name":"Lean.Meta.Simp.Simprocs.post","line":277,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simprocs</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Lean.Meta.Simprocs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocTree\">Lean.Meta.Simp.SimprocTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L276-L276","name":"Lean.Meta.Simp.Simprocs.pre","line":276,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.pre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.pre\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simprocs</span>.<span class=\"name\">pre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Lean.Meta.Simprocs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocTree\">Lean.Meta.Simp.SimprocTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L275-L275","name":"Lean.Meta.Simp.Simprocs.mk","line":275,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simprocs</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pre post : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocTree\">Lean.Meta.Simp.SimprocTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocNames erased : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Lean.Meta.Simprocs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L275-L280","name":"Lean.Meta.Simp.Simprocs","line":275,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simprocs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L273-L273","name":"Lean.Meta.Simp.SimprocTree","line":273,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L271-L271","name":"Lean.Meta.Simp.SimprocEntry.proc","line":271,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry.proc","doc":"Recall that we cannot store `Simproc` into .olean files because it is a closure.\nGiven `SimprocOLeanEntry.declName`, we convert it into a `Simproc` by using the unsafe function `evalConstCheck`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry.proc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocEntry</span>.<span class=\"name\">proc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry\">Lean.Meta.Simp.SimprocEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L266-L266","name":"Lean.Meta.Simp.SimprocEntry.mk","line":266,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toSimprocOLeanEntry : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proc : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry\">Lean.Meta.Simp.SimprocEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L263-L271","name":"Lean.Meta.Simp.SimprocEntry","line":263,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry","doc":"`Simproc` entry. It is the .olean entry plus the actual function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocEntry</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L261-L261","name":"Lean.Meta.Simp.instInhabitedSimprocOLeanEntry","line":261,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedSimprocOLeanEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedSimprocOLeanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedSimprocOLeanEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L260-L260","name":"Lean.Meta.Simp.SimprocOLeanEntry.keys","line":260,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.keys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocOLeanEntry</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey\">Lean.Meta.SimpTheoremKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L259-L259","name":"Lean.Meta.Simp.SimprocOLeanEntry.post","line":259,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocOLeanEntry</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L258-L258","name":"Lean.Meta.Simp.SimprocOLeanEntry.declName","line":258,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.declName","doc":"Name of a declaration stored in the environment which has type `Simproc`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocOLeanEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L256-L256","name":"Lean.Meta.Simp.SimprocOLeanEntry.mk","line":256,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocOLeanEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey\">Lean.Meta.SimpTheoremKey</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\">Lean.Meta.Simp.SimprocOLeanEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L253-L261","name":"Lean.Meta.Simp.SimprocOLeanEntry","line":253,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry","doc":"`Simproc` .olean entry.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimprocOLeanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimprocOLeanEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L250-L251","name":"Lean.Meta.Simp.instAndThenDSimproc","line":250,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instAndThenDSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instAndThenDSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instAndThenDSimproc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndThen\">AndThen</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L242-L248","name":"Lean.Meta.Simp.dandThen","line":242,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.dandThen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.dandThen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dandThen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f g : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L239-L240","name":"Lean.Meta.Simp.instAndThenSimproc","line":239,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instAndThenSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instAndThenSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instAndThenSimproc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndThen\">AndThen</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L224-L237","name":"Lean.Meta.Simp.andThen","line":224,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.andThen","doc":"\"Compose\" the two given simplification procedures. We use the following semantics.\n- If `f` produces `done` or `visit`, then return `f`'s result.\n- If `f` produces `continue`, then apply `g` to new expression returned by `f`.\n\nSee `Simp.Step` type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.andThen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">andThen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f g : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L217-L222","name":"Lean.Meta.Simp.mkEqTransResultStep","line":217,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkEqTransResultStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkEqTransResultStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkEqTransResultStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L210-L215","name":"Lean.TransformStep.toStep","line":210,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.TransformStep.toStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.TransformStep.toStep\"><span class=\"name\">Lean</span>.<span class=\"name\">TransformStep</span>.<span class=\"name\">toStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Transform.html#Lean.TransformStep\">Lean.TransformStep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L205-L208","name":"Lean.Meta.Simp.DSimproc","line":205,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc","doc":"Similar to `Simproc`, but resulting expression should be definitionally equal to the input one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DSimproc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L203-L203","name":"Lean.Meta.Simp.DStep","line":203,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L197-L201","name":"Lean.Meta.Simp.Simproc","line":197,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc","doc":"A simplification procedure. Recall that we have `pre` and `post` procedures.\nSee `Step`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Simproc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L195-L195","name":"Lean.Meta.Simp.instInhabitedStep","line":195,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L188-L194","name":"Lean.Meta.Simp.Step.continue","line":188,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.continue","doc":"For `pre` procedures, continue transformation by visiting subexpressions, and then\nexecuting `post` procedures.\n\nFor `post` procedures, this is equivalent to returning `visit`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.continue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Step</span>.<span class=\"name\">continue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L181-L187","name":"Lean.Meta.Simp.Step.visit","line":181,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.visit","doc":"For `pre` procedures, the resulting expression is passed to `pre` again.\n\nFor `post` procedures, the resulting expression is passed to `pre` again IF\n`Simp.Config.singlePass := false` and resulting expression is not equal to initial expression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Step</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L175-L180","name":"Lean.Meta.Simp.Step.done","line":175,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.done","doc":"For `pre` procedures, it returns the result without visiting any subexpressions.\n\nFor `post` procedures, it returns the result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step.done\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Step</span>.<span class=\"name\">done</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L171-L195","name":"Lean.Meta.Simp.Step","line":171,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step","doc":"Result type for a simplification procedure. We have `pre` and `post` simplification procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Step</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L167-L169","name":"Lean.Meta.Simp.modifyDiag","line":167,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.modifyDiag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.modifyDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">modifyDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a> → <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L164-L165","name":"Lean.Meta.Simp.dsimp","line":164,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.dsimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L161-L162","name":"Lean.Meta.Simp.simp","line":161,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.simp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L159-L159","name":"Lean.Meta.Simp.SimpM","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">SimpM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L157-L157","name":"Lean.Meta.Simp.instNonemptyMethodsRef","line":157,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instNonemptyMethodsRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instNonemptyMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instNonemptyMethodsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#_private.Lean.Meta.Tactic.Simp.Types.0.Lean.Meta.Simp.MethodsRef\">Lean.Meta.Simp.MethodsRef</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L151-L151","name":"Lean.Meta.Simp.instInhabitedStats","line":151,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedStats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedStats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedStats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L150-L150","name":"Lean.Meta.Simp.Stats.diag","line":150,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats.diag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats.diag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Stats</span>.<span class=\"name\">diag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L149-L149","name":"Lean.Meta.Simp.Stats.usedTheorems","line":149,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats.usedTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats.usedTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Stats</span>.<span class=\"name\">usedTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L148-L148","name":"Lean.Meta.Simp.Stats.mk","line":148,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Stats</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(usedTheorems : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(diag : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L148-L151","name":"Lean.Meta.Simp.Stats","line":148,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Stats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L146-L146","name":"Lean.Meta.Simp.State.diag","line":146,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.diag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.diag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span>.<span class=\"name\">diag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Lean.Meta.Simp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L145-L145","name":"Lean.Meta.Simp.State.numSteps","line":145,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.numSteps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.numSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span>.<span class=\"name\">numSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Lean.Meta.Simp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L144-L144","name":"Lean.Meta.Simp.State.usedTheorems","line":144,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.usedTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.usedTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span>.<span class=\"name\">usedTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Lean.Meta.Simp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L143-L143","name":"Lean.Meta.Simp.State.congrCache","line":143,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.congrCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.congrCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span>.<span class=\"name\">congrCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Lean.Meta.Simp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.CongrCache\">Lean.Meta.Simp.CongrCache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L142-L142","name":"Lean.Meta.Simp.State.cache","line":142,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Lean.Meta.Simp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\">Lean.Meta.Simp.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L141-L141","name":"Lean.Meta.Simp.State.mk","line":141,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cache : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\">Lean.Meta.Simp.Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(congrCache : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.CongrCache\">Lean.Meta.Simp.CongrCache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usedTheorems : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numSteps : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(diag : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Lean.Meta.Simp.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L141-L146","name":"Lean.Meta.Simp.State","line":141,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L139-L139","name":"Lean.Meta.Simp.instInhabitedDiagnostics","line":139,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedDiagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L138-L138","name":"Lean.Meta.Simp.Diagnostics.thmsWithBadKeys","line":138,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.thmsWithBadKeys","doc":"When using `Simp.Config.index := false`, and `set_option diagnostics true`,\nfor every theorem used by `simp`, we check whether the theorem would be\nalso applied if `index := true`, and we store it here if it would not have\nbeen tried.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.thmsWithBadKeys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">thmsWithBadKeys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L131-L131","name":"Lean.Meta.Simp.Diagnostics.congrThmCounter","line":131,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.congrThmCounter","doc":"Number of times each congr theorem has been tried. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.congrThmCounter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">congrThmCounter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L129-L129","name":"Lean.Meta.Simp.Diagnostics.triedThmCounter","line":129,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.triedThmCounter","doc":"Number of times each simp theorem has been tried. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.triedThmCounter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">triedThmCounter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L127-L127","name":"Lean.Meta.Simp.Diagnostics.usedThmCounter","line":127,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.usedThmCounter","doc":"Number of times each simp theorem has been used/applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.usedThmCounter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">usedThmCounter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L125-L125","name":"Lean.Meta.Simp.Diagnostics.mk","line":125,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(usedThmCounter triedThmCounter : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(congrThmCounter : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmsWithBadKeys : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Lean.Meta.Simp.Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L125-L139","name":"Lean.Meta.Simp.Diagnostics","line":125,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Diagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L122-L123","name":"Lean.Meta.Simp.UsedSimps.toArray","line":122,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.toArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">UsedSimps</span>.<span class=\"name\">toArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L116-L120","name":"Lean.Meta.Simp.UsedSimps.insert","line":116,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">UsedSimps</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L114-L114","name":"Lean.Meta.Simp.instInhabitedUsedSimps","line":114,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedUsedSimps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedUsedSimps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedUsedSimps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L113-L113","name":"Lean.Meta.Simp.UsedSimps.size","line":113,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">UsedSimps</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L112-L112","name":"Lean.Meta.Simp.UsedSimps.map","line":112,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">UsedSimps</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L109-L109","name":"Lean.Meta.Simp.UsedSimps.mk","line":109,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">UsedSimps</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L109-L114","name":"Lean.Meta.Simp.UsedSimps","line":109,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">UsedSimps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L106-L107","name":"Lean.Meta.Simp.Context.isDeclToUnfold","line":106,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.isDeclToUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.isDeclToUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">isDeclToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L104-L104","name":"Lean.Meta.Simp.instInhabitedContext","line":104,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L103-L103","name":"Lean.Meta.Simp.Context.inDSimp","line":103,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.inDSimp","doc":"If `inDSimp := true`, then `simp` is in `dsimp` mode, and only applying\ntransformations that presereve definitional equality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.inDSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">inDSimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L98-L98","name":"Lean.Meta.Simp.Context.lctxInitIndices","line":98,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.lctxInitIndices","doc":"Number of indices in the local context when starting `simp`.\nWe use this information to decide which assumptions we can use without\ninvalidating the cache.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.lctxInitIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">lctxInitIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L92-L92","name":"Lean.Meta.Simp.Context.dischargeDepth","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.dischargeDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.dischargeDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">dischargeDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L91-L91","name":"Lean.Meta.Simp.Context.parent?","line":91,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.parent?","doc":"Stores the \"parent\" term for the term being simplified.\nIf a simplification procedure result depends on this value,\nthen it is its reponsability to set `Result.cache := false`.\n\nMotivation for this field:\nSuppose we have a simplification procedure for normalizing arithmetic terms.\nThen, given a term such as `t_1 + ... + t_n`, we don't want to apply the procedure\nto every subterm `t_1 + ... + t_i` for `i < n` for performance issues. The procedure\ncan accomplish this by checking whether the parent term is also an arithmetical expression\nand do nothing if it is. However, it should set `Result.cache := false` to ensure\nwe don't miss simplification opportunities. For example, consider the following:\n```\nexample (x y : Nat) (h : y = 0) : id ((x + x) + y) = id (x + x) := by\n  simp_arith only\n  ...\n```\nIf we don't set `Result.cache := false` for the first `x + x`, then we get\nthe resulting state:\n```\n... |- id (2*x + y) = id (x + x)\n```\ninstead of\n```\n... |- id (2*x + y) = id (2*x)\n```\nas expected.\n\nRemark: given an application `f a b c` the \"parent\" term for `f`, `a`, `b`, and `c`\nis `f a b c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.parent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">parent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L59-L59","name":"Lean.Meta.Simp.Context.congrTheorems","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.congrTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.congrTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">congrTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpCongrTheorems.html#Lean.Meta.SimpCongrTheorems\">Lean.Meta.SimpCongrTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L58-L58","name":"Lean.Meta.Simp.Context.simpTheorems","line":58,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.simpTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.simpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">simpTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L57-L57","name":"Lean.Meta.Simp.Context.maxDischargeDepth","line":57,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.maxDischargeDepth","doc":"`maxDischargeDepth` from `config` as an `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.maxDischargeDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxDischargeDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L55-L55","name":"Lean.Meta.Simp.Context.config","line":55,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L54-L54","name":"Lean.Meta.Simp.Context.mk","line":54,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDischargeDepth : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simpTheorems : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(congrTheorems : <a href=\"./Lean/Meta/Tactic/Simp/SimpCongrTheorems.html#Lean.Meta.SimpCongrTheorems\">Lean.Meta.SimpCongrTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parent? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dischargeDepth : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctxInitIndices : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inDSimp : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L54-L104","name":"Lean.Meta.Simp.Context","line":54,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L52-L52","name":"Lean.Meta.Simp.CongrCache","line":52,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.CongrCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.CongrCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CongrCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L50-L50","name":"Lean.Meta.Simp.Cache","line":50,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L43-L47","name":"Lean.Meta.Simp.Result.mkEqSymm","line":43,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mkEqSymm","doc":"Flip the proof in a `Simp.Result`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mkEqSymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mkEqSymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L40-L41","name":"Lean.Meta.Simp.Result.mkEqTrans","line":40,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mkEqTrans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mkEqTrans\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mkEqTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r₁ r₂ : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L32-L38","name":"Lean.Meta.Simp.mkEqTransOptProofResult","line":32,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkEqTransOptProofResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.mkEqTransOptProofResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkEqTransOptProofResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cache : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L30-L30","name":"Lean.Meta.Simp.instInhabitedResult","line":30,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.instInhabitedResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L29-L29","name":"Lean.Meta.Simp.Result.cache","line":29,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.cache","doc":"If `cache := true` the result is cached.\nWarning: we will remove this field in the future. It is currently used by\n`arith := true`, but we can now refactor the code to avoid the hack.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L23-L23","name":"Lean.Meta.Simp.Result.proof?","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.proof?","doc":"A proof that `$e = $expr`, where the simplified expression is on the RHS.\nIf `none`, the proof is assumed to be `refl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.proof?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L20-L20","name":"Lean.Meta.Simp.Result.expr","line":20,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.expr","doc":"The simplified version of `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L18-L18","name":"Lean.Meta.Simp.Result.mk","line":18,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cache : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/Simp/Types.lean#L17-L30","name":"Lean.Meta.Simp.Result","line":17,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result","doc":"The result of simplifying some expression `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}