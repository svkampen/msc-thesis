{"name":"Mathlib.Tactic.FunProp.RefinedDiscrTree","instances":[{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Key"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedKey","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Key"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqKey","className":"BEq"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Key"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instReprKey","className":"Repr"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Key"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instHashableKey","className":"Hashable"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Key"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instLTKey","className":"LT"},{"typeNames":["LT.lt"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instDecidableLtKey","className":"Decidable"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Key"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatKey","className":"Std.ToFormat"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Trie"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedTrie","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.Trie"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatTrie","className":"Std.ToFormat"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabited","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormat","className":"Std.ToFormat"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedDTExpr","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqDTExpr","className":"BEq"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instReprDTExpr","className":"Repr"},{"typeNames":["Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatDTExpr","className":"Std.ToFormat"},{"typeNames":["Lean.Expr","Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr","_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M"],"name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM","className":"Lean.MonadCache"}],"imports":["Init","Mathlib.Tactic.FunProp.StateList","Mathlib.Algebra.Group.Pi.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1148-L1150","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.mapArrays","line":1148,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mapArrays","doc":"Apply a function to the array of values at each node in a `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mapArrays\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mapArrays</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1144-L1146","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.mapArraysM","line":1144,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mapArraysM","doc":"Apply a monadic function to the array of values at each node in a `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mapArraysM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mapArraysM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1133-L1142","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mapArraysM","line":1133,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mapArraysM","doc":"Apply a monadic function to the array of values at each node in a `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mapArraysM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">mapArraysM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1123-L1128","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScoreWithExtra.go","line":1123,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScoreWithExtra.go","doc":"go "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScoreWithExtra.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">getMatchWithScoreWithExtra</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unify : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowRootStar : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numIgnored : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1114-L1128","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScoreWithExtra","line":1114,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScoreWithExtra","doc":"Similar to `getMatchWithScore`, but also returns matches with prefixes of `e`.\nWe store the score, followed by the number of ignored arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScoreWithExtra\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">getMatchWithScoreWithExtra</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unify : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowRootStar : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1097-L1112","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScore","line":1097,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScore","doc":"Return the results from the `RefinedDiscrTree` that match the given expression,\ntogether with their matching scores, in decreasing order of score.\n\nEach entry of type `Array α × Nat` corresponds to one pattern.\n\nIf `unify := false`, then metavariables in `e` are treated as opaque variables.\nThis is for when you don't want to instantiate metavariables in `e`.\n\nIf `allowRootStar := false`, then we don't allow `e` or the matched key in `d`\nto be a star pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.getMatchWithScore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">getMatchWithScore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unify : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowRootStar : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1050-L1074","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.exactMatch","line":1050,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.exactMatch","doc":"If `e` is not a metavariable, return the possible `Trie α` that exactly match with `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.exactMatch\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">GetUnify</span>.<span class=\"name\">exactMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(find? : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1040-L1048","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchExpr","line":1040,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchExpr","doc":"Return the possible `Trie α` that match with `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">GetUnify</span>.<span class=\"name\">matchExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1023-L1037","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchTreeStars","line":1023,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchTreeStars","doc":"Return the possible `Trie α` that come from a `Key.star`,\nwhile keeping track of the `Key.star` assignments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchTreeStars\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">GetUnify</span>.<span class=\"name\">matchTreeStars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1010-L1021","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchTargetStar","line":1010,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchTargetStar","doc":"Return the possible `Trie α` that match with anything.\nWe add 1 to the matching score when the key is `.opaque`,\nsince this pattern is \"harder\" to match with. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.matchTargetStar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">GetUnify</span>.<span class=\"name\">matchTargetStar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L1004-L1009","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.skipEntries","line":1004,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.skipEntries","doc":"Return the possible `Trie α` that match with `n` metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.skipEntries\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">GetUnify</span>.<span class=\"name\">skipEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(skipped : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> →\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.M</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L964-L966","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.findKey","line":964,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.findKey","doc":"If `k` is a key in `children`, return the corresponding `Trie α`. Otherwise return `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.GetUnify.findKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">GetUnify</span>.<span class=\"name\">findKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(children : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L940-L951","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.insertEqn","line":940,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertEqn","doc":"Insert the value `vLhs` at index `lhs`, and if `rhs` is indexed differently, then also\ninsert the value `vRhs` at index `rhs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertEqn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">insertEqn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vLhs vRhs : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(onlySpecific : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarInContext : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L928-L938","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.insert","line":928,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insert","doc":"Insert the value `v` at index `e : Expr` in a `RefinedDiscrTree`.\nThe argument `fvarInContext` allows you to specify which free variables in `e` will still be\nin the context when the `RefinedDiscrTree` is being used for lookup.\nIt should return true only if the `RefinedDiscrTree` is built and used locally.\n\nif `onlySpecific := true`, then we filter out the patterns `*` and `Eq * * *`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insert\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(onlySpecific : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarInContext : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L921-L926","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.insertDTExpr","line":921,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertDTExpr","doc":"Insert the value `v` at index `e : DTExpr` in a `RefinedDiscrTree`.\n\nWarning: to account for η-reduction, an entry may need to be added at multiple indexes,\nso it is recommended to use `RefinedDiscrTree.insert` for insertion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertDTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">insertDTExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L906-L919","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.insertInRefinedDiscrTree","line":906,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertInRefinedDiscrTree","doc":"Insert the value `v` at index `keys : Array Key` in a `RefinedDiscrTree`.\n\nWarning: to account for η-reduction, an entry may need to be added at multiple indexes,\nso it is recommended to use `RefinedDiscrTree.insert` for insertion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertInRefinedDiscrTree\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">insertInRefinedDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L884-L904","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.insertInTrie","line":884,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertInTrie","doc":"Insert the value `v` at index `keys : Array Key` in a `Trie`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.insertInTrie\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">insertInTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L856-L862","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.mkDTExprs","line":856,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mkDTExprs","doc":"Similar to `mkDTExpr`.\nReturn all encodings of `e` as a `DTExpr`, taking potential further η-reductions into account. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mkDTExprs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mkDTExprs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(onlySpecific : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarInContext : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L845-L854","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.mkDTExpr","line":845,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mkDTExpr","doc":"Return the encoding of `e` as a `DTExpr`.\n\nWarning: to account for potential η-reductions of `e`, use `mkDTExprs` instead.\n\nThe argument `fvarInContext` allows you to specify which free variables in `e` will still be\nin the context when the `RefinedDiscrTree` is being used for lookup.\nIt should return true only if the `RefinedDiscrTree` is built and used locally. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mkDTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mkDTExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarInContext : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L839-L843","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.isSpecific","line":839,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.isSpecific","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.isSpecific\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">isSpecific</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L755-L835","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.mkDTExprsAux","line":755,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.mkDTExprsAux","doc":"Return all encodings of `e` as a `DTExpr`, taking possible η-reductions into account.\nIf `root = false`, then `e` is a strict sub expression of the original expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.mkDTExprsAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">mkDTExprsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(original : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(root : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L741-L752","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.cacheEtaPossibilities","line":741,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.cacheEtaPossibilities","doc":"run `etaPossibilities`, and cache the result if there are multiple possibilities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.cacheEtaPossibilities\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">cacheEtaPossibilities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e original : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k :\n  <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L727-L739","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.etaPossibilities","line":727,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.etaPossibilities","doc":"Return all pairs of body, bound variables that could possibly appear due to η-reduction "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.etaPossibilities\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">etaPossibilities</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L717-L725","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM","line":717,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">instMonadCacheExprDTExprM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCache\">Lean.MonadCache</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L633-L707","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.mkDTExprAux","line":633,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.mkDTExprAux","doc":"Return the encoding of `e` as a `DTExpr`.\nIf `root = false`, then `e` is a strict sub expression of the original expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.mkDTExprAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">mkDTExprAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(root : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#_private.Mathlib.Tactic.FunProp.RefinedDiscrTree.0.Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.Context\">Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.Context</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L614-L621","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOp","line":614,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOp","doc":"Normalize an application if the head is `⁻¹` or `-`.\nOptionally return the `(type, arg, lambdas)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">reduceUnOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L605-L612","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOpAux.distributeLambdas","line":605,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOpAux.distributeLambdas","doc":"use that `(fun x => (f x)⁻¹) = f⁻¹` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOpAux.distributeLambdas\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">reduceUnOpAux</span>.<span class=\"name\">distributeLambdas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L583-L612","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOpAux","line":583,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOpAux","doc":"Normalize an application of a unary operator like `Inv.inv`, using:\n- `f⁻¹ a = (f a)⁻¹` to decrease the arity to 3\n- `(fun x => (f a)⁻¹) = f⁻¹` to get rid of any lambdas in front "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceUnOpAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">reduceUnOpAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instPi : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L572-L581","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOp","line":572,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOp","doc":"Normalize an application if the head is  `+`, `*`, `-` or `/`.\nOptionally return the `(type, lhs, rhs, lambdas)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">reduceHBinOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L562-L570","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOpAux.distributeLambdas","line":562,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOpAux.distributeLambdas","doc":"use that `(fun x => f x + g x) = f + g` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOpAux.distributeLambdas\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">reduceHBinOpAux</span>.<span class=\"name\">distributeLambdas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type lhs rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L535-L570","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOpAux","line":535,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOpAux","doc":"Normalize an application of a heterogeneous binary operator like `HAdd.hAdd`, using:\n- `f = fun x => f x` to increase the arity to 6\n- `(f + g) a = f a + g a` to decrease the arity to 6\n- `(fun x => f x + g x) = f + g` to get rid of any lambdas in front "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.reduceHBinOpAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">reduceHBinOpAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instH instPi : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L524-L532","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.etaExpand","line":524,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.etaExpand","doc":"Introduce new lambdas by η-expansion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.etaExpand\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">etaExpand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lambdas : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goalArity : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L513-L520","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.getIgnores.isIgnoredArg","line":513,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.getIgnores.isIgnoredArg","doc":"Return whether the argument should be ignored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.getIgnores.isIgnoredArg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">getIgnores</span>.<span class=\"name\">isIgnoredArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg domain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderInfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L498-L520","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.getIgnores","line":498,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.getIgnores","doc":"Return for each argument whether it should be ignored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.MkDTExpr.getIgnores\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">getIgnores</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L482-L484","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.hasLooseBVars","line":482,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.hasLooseBVars","doc":"Return `true` if `e` contains a loose bound variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.hasLooseBVars\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">hasLooseBVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L468-L471","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.isStarWithArg","line":468,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.isStarWithArg","doc":"Check whether the expression is represented by `Key.star` and has `arg` as an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.isStarWithArg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">isStarWithArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L462-L466","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.isStar","line":462,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.isStar","doc":"Check whether the expression is represented by `Key.star`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.isStar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">isStar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L449-L458","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.lambdaTelescopeReduce","line":449,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.lambdaTelescopeReduce","doc":"Repeatedly apply reduce while stripping lambda binders and introducing their variables "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.lambdaTelescopeReduce\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">lambdaTelescopeReduce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L440-L447","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.reduce","line":440,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.reduce","doc":"Reduction procedure for the `RefinedDiscrTree` indexing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.reduce\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L390-L393","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.flatten","line":390,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.flatten","doc":"Given a `DTExpr`, return the linearized encoding in terms of `Key`,\nwhich is used for `RefinedDiscrTree` indexing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.flatten\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">flatten</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(initCapacity : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> := <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L321-L331","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.size","line":321,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.size","doc":"Return the size of the `DTExpr`. This is used for calculating the matching score when two\nexpressions are equal.\nThe score is not incremented at a lambda, which is so that the expressions\n`∀ x, p[x]` and `∃ x, p[x]` get the same size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.size\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L319-L319","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatDTExpr","line":319,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatDTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instToFormatDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L299-L299","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instReprDTExpr","line":299,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instReprDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instReprDTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instReprDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L299-L299","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqDTExpr","line":299,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqDTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instBEqDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L299-L299","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedDTExpr","line":299,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedDTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L297-L298","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.proj","line":297,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.proj","doc":"A projection. It stores the structure name, projection index, struct body and arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.proj\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> →\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L295-L296","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.forall","line":295,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.forall","doc":"A dependent arrow. It stores the domain and body. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.forall\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">forall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> →\n  <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L293-L294","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.lam","line":293,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.lam","doc":"A lambda function. It stores the body. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.lam\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L291-L292","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.sort","line":291,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.sort","doc":"A sort. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.sort\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L289-L290","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.lit","line":289,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.lit","doc":"A literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.lit\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L287-L288","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.bvar","line":287,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.bvar","doc":"A bound variable. It stores the De Bruijn index and the arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.bvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">bvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L285-L286","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.fvar","line":285,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.fvar","doc":"A free variable. It stores the `FVarId` and the arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.fvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L283-L284","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.const","line":283,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.const","doc":"A constant. It stores the name and the arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.const\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L281-L282","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.opaque","line":281,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.opaque","doc":"An opaque variable or a let-expression in the case `WhnfCoreConfig.zeta := false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.opaque\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L279-L280","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.star","line":279,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.star","doc":"A metavariable. It optionally stores an `MVarId`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr.star\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\">Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L276-L299","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr","line":276,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr","doc":"`DTExpr` is a simplified form of `Expr`.\nIt is the intermediate step for converting from `Expr` to `Array Key`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.DTExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L273-L273","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormat","line":273,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instToFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L262-L262","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabited","line":262,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabited\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L261-L261","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.root","line":261,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.root","doc":"The underlying `PersistentHashMap` of a `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.root\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L259-L259","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.mk","line":259,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(root : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\">Mathlib.Meta.FunProp.RefinedDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L258-L261","name":"Mathlib.Meta.FunProp.RefinedDiscrTree","line":258,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree","doc":"Discrimination tree. It is an index from expressions to values of type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L255-L255","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatTrie","line":255,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatTrie\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instToFormatTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L237-L242","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.children!","line":237,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.children!","doc":"Return the children of a `Trie α`, assuming that it is not a leaf.\nThe result is sorted by the `Key`'s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.children!\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">children!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span> →\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L232-L235","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.values!","line":232,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.values!","doc":"Return the values from a `Trie α`, assuming that it is a leaf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.values!\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">values!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L225-L230","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mkNode2","line":225,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mkNode2","doc":"`Trie.node` constructor for combining two `Key`, `Trie α` pairs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mkNode2\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">mkNode2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k1 : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t1 : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k2 : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t2 : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L221-L223","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.singleton","line":221,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.singleton","doc":"`Trie` constructor for a single value, taking the keys starting at index `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.singleton\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L217-L219","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mkPath","line":217,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mkPath","doc":"`Trie.path` constructor that only inserts the path if it is non-empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.mkPath\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">mkPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(child : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L215-L215","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedTrie","line":215,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedTrie\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L213-L214","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.values","line":213,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.values","doc":"Leaf of the Trie. `values` is an `Array` of size at least 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.values\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L211-L212","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.path","line":211,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.path","doc":"Sequence of nodes with only one child. `keys` is an `Array` of size at least 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.path\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">path</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(child : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L208-L210","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.node","line":208,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.node","doc":"Map from `Key` to `Trie`. Children is an `Array` of size at least 2,\nsorted in increasing order using `Key.lt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie.node\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(children : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\">Mathlib.Meta.FunProp.RefinedDiscrTree.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L206-L214","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Trie","line":206,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie","doc":"Discrimination tree trie. See `RefinedDiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Trie\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Trie</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L195-L203","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.arity","line":195,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.arity","doc":"Return the number of arguments that the `Key` takes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.arity\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">arity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L193-L193","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatKey","line":193,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instToFormatKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instToFormatKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L178-L178","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instDecidableLtKey","line":178,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instDecidableLtKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instDecidableLtKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instDecidableLtKey</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L177-L177","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instLTKey","line":177,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instLTKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instLTKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instLTKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L151-L164","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.ctorIdx","line":151,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.ctorIdx","doc":"Constructor index used for ordering `Key`.\nNote that the index of the star pattern is 0, so that when looking up in a `Trie`,\nwe can look at the start of the sorted array for all `.star` patterns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.ctorIdx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">ctorIdx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L149-L149","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instHashableKey","line":149,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instHashableKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instHashableKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instHashableKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L135-L135","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instReprKey","line":135,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instReprKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instReprKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instReprKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L135-L135","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqKey","line":135,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instBEqKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instBEqKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L135-L135","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedKey","line":135,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.instInhabitedKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L133-L134","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.proj","line":133,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.proj","doc":"A projection. It stores the structure name, the projection index and the arity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.proj\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L131-L132","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.forall","line":131,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.forall","doc":"A dependent arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.forall\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">forall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L129-L130","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.lam","line":129,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.lam","doc":"A lambda function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.lam\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L127-L128","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.sort","line":127,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.sort","doc":"A sort. Universe levels are ignored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.sort\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L125-L126","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.lit","line":125,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.lit","doc":"A literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.lit\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L122-L124","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.bvar","line":122,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.bvar","doc":"A bound variable, from a lambda or forall binder.\nIt stores the De Bruijn index and the arity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.bvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">bvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L120-L121","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.fvar","line":120,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.fvar","doc":"A free variable. It stores the `FVarId` and the arity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.fvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L118-L119","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.const","line":118,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.const","doc":"A constant. It stores the name and the arity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.const\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L116-L117","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.opaque","line":116,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.opaque","doc":"An opaque variable. This key only matches with itself or `Key.star`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.opaque\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L114-L115","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key.star","line":114,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.star","doc":"A metavariable. This key matches with anything. It stores an index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key.star\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\">Mathlib.Meta.FunProp.RefinedDiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Tactic/FunProp/RefinedDiscrTree.lean#L112-L135","name":"Mathlib.Meta.FunProp.RefinedDiscrTree.Key","line":112,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key","doc":"Discrimination tree key. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/RefinedDiscrTree.html#Mathlib.Meta.FunProp.RefinedDiscrTree.Key\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">Key</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}