{"name":"Lean.Meta.Eval","instances":[],"imports":["Lean.AddDecl","Lean.Meta.Check","Lean.Util.CollectLevelParams"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Eval.lean#L36-L39","name":"Lean.Meta.evalExpr","line":36,"kind":"def","docLink":"./Lean/Meta/Eval.html#Lean.Meta.evalExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eval.html#Lean.Meta.evalExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">evalExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a> := <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety.safe\">Lean.DefinitionSafety.safe</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Eval.lean#L30-L34","name":"Lean.Meta.evalExpr'","line":30,"kind":"def","docLink":"./Lean/Meta/Eval.html#Lean.Meta.evalExpr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eval.html#Lean.Meta.evalExpr'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">evalExpr'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a> := <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety.safe\">Lean.DefinitionSafety.safe</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Eval.lean#L13-L28","name":"Lean.Meta.evalExprCore","line":13,"kind":"def","docLink":"./Lean/Meta/Eval.html#Lean.Meta.evalExprCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eval.html#Lean.Meta.evalExprCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">evalExprCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(checkType : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a> := <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety.safe\">Lean.DefinitionSafety.safe</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"}]}