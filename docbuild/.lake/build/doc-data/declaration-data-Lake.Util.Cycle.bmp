{"name":"Lake.Util.Cycle","instances":[{"typeNames":[],"name":"Lake.instMonadCallStackOfMonadCallStackOf","className":"Lake.MonadCallStack"},{"typeNames":[],"name":"Lake.instMonadCallStackOfOfMonadLiftOfMonadFunctor","className":"Lake.MonadCallStackOf"},{"typeNames":[],"name":"Lake.instMonadCycleOfMonadCycleOf","className":"Lake.MonadCycle"},{"typeNames":[],"name":"Lake.instMonadCycleOfOfMonadLiftOfMonadFunctor","className":"Lake.MonadCycleOf"},{"typeNames":[],"name":"Lake.inhabitedOfMonadCycle","className":"Inhabited"},{"typeNames":["Lake.CallStackT"],"name":"Lake.instMonadCallStackOfCallStackTOfMonad","className":"Lake.MonadCallStackOf"},{"typeNames":["Lake.CycleT"],"name":"Lake.instMonadCycleOfCycleTOfMonad","className":"Lake.MonadCycleOf"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L68-L79","name":"Lake.guardCycle","line":68,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.guardCycle","doc":"Add `key` to the monad's `CallStack` before invoking `act`.\nIf adding `key` produces a cycle, the cyclic call stack is thrown.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.guardCycle\"><span class=\"name\">Lake</span>.<span class=\"name\">guardCycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycle\">Lake.MonadCycle</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L65-L66","name":"Lake.instMonadCycleOfCycleTOfMonad","line":65,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.instMonadCycleOfCycleTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.instMonadCycleOfCycleTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadCycleOfCycleTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\">Lake.MonadCycleOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">(<a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L62-L63","name":"Lake.CycleT","line":62,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.CycleT","doc":"A transformer that equips a monad with a `CallStack` to detect cycles. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.CycleT\"><span class=\"name\">Lake</span>.<span class=\"name\">CycleT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L58-L60","name":"Lake.instMonadCallStackOfCallStackTOfMonad","line":58,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.instMonadCallStackOfCallStackTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.instMonadCallStackOfCallStackTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadCallStackOfCallStackTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">(<a href=\"./Lake/Util/Cycle.html#Lake.CallStackT\">Lake.CallStackT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L55-L56","name":"Lake.CallStackT","line":55,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.CallStackT","doc":"A transformer that equips a monad with a `CallStack`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.CallStackT\"><span class=\"name\">Lake</span>.<span class=\"name\">CallStackT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L53-L53","name":"Lake.inhabitedOfMonadCycle","line":53,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.inhabitedOfMonadCycle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.inhabitedOfMonadCycle\"><span class=\"name\">Lake</span>.<span class=\"name\">inhabitedOfMonadCycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycle\">Lake.MonadCycle</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L50-L51","name":"Lake.instMonadCycleOfOfMonadLiftOfMonadFunctor","line":50,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.instMonadCycleOfOfMonadLiftOfMonadFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.instMonadCycleOfOfMonadLiftOfMonadFunctor\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadCycleOfOfMonadLiftOfMonadFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\">Lake.MonadCycleOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\">Lake.MonadCycleOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L45-L46","name":"Lake.instMonadCycleOfMonadCycleOf","line":45,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.instMonadCycleOfMonadCycleOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.instMonadCycleOfMonadCycleOf\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadCycleOfMonadCycleOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\">Lake.MonadCycleOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycle\">Lake.MonadCycle</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L41-L41","name":"Lake.MonadCycle.throwCycle","line":41,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.MonadCycle.throwCycle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCycle.throwCycle\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCycle</span>.<span class=\"name\">throwCycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycle\">Lake.MonadCycle</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cycle : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L40-L40","name":"Lake.MonadCycle.mk","line":40,"kind":"ctor","docLink":"./Lake/Util/Cycle.html#Lake.MonadCycle.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCycle.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCycle</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMonadCallStack : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\">Lake.MonadCallStack</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(throwCycle : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycle\">Lake.MonadCycle</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L39-L41","name":"Lake.MonadCycle","line":39,"kind":"class","docLink":"./Lake/Util/Cycle.html#Lake.MonadCycle","doc":"Similar to `MonadCycle`, but `κ` is an `outParam` for convenience. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCycle\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCycle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\">Lake.MonadCallStack</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L37-L37","name":"Lake.MonadCycleOf.throwCycle","line":37,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.MonadCycleOf.throwCycle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf.throwCycle\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCycleOf</span>.<span class=\"name\">throwCycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\">Lake.MonadCycleOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cycle : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L36-L36","name":"Lake.MonadCycleOf.mk","line":36,"kind":"ctor","docLink":"./Lake/Util/Cycle.html#Lake.MonadCycleOf.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCycleOf</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMonadCallStackOf : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(throwCycle : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\">Lake.MonadCycleOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L35-L37","name":"Lake.MonadCycleOf","line":35,"kind":"class","docLink":"./Lake/Util/Cycle.html#Lake.MonadCycleOf","doc":"A monad equipped with a call stack and the ability to error on a cycle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCycleOf\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCycleOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L31-L33","name":"Lake.instMonadCallStackOfOfMonadLiftOfMonadFunctor","line":31,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.instMonadCallStackOfOfMonadLiftOfMonadFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.instMonadCallStackOfOfMonadLiftOfMonadFunctor\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadCallStackOfOfMonadLiftOfMonadFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L27-L29","name":"Lake.instMonadCallStackOfMonadCallStackOf","line":27,"kind":"instance","docLink":"./Lake/Util/Cycle.html#Lake.instMonadCallStackOfMonadCallStackOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.instMonadCallStackOfMonadCallStackOf\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadCallStackOfMonadCallStackOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\">Lake.MonadCallStack</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L23-L23","name":"Lake.MonadCallStack.withCallStack","line":23,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStack.withCallStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack.withCallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStack</span>.<span class=\"name\">withCallStack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\">Lake.MonadCallStack</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stack : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L22-L22","name":"Lake.MonadCallStack.getCallStack","line":22,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStack.getCallStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack.getCallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStack</span>.<span class=\"name\">getCallStack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\">Lake.MonadCallStack</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L21-L21","name":"Lake.MonadCallStack.mk","line":21,"kind":"ctor","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStack.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStack</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(getCallStack : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(withCallStack : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\">Lake.MonadCallStack</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L20-L23","name":"Lake.MonadCallStack","line":20,"kind":"class","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStack","doc":"Similar to `MonadCallStackOf`, but `κ` is an `outParam` for convenience. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L18-L18","name":"Lake.MonadCallStackOf.withCallStack","line":18,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStackOf.withCallStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf.withCallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStackOf</span>.<span class=\"name\">withCallStack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stack : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L17-L17","name":"Lake.MonadCallStackOf.getCallStack","line":17,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStackOf.getCallStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf.getCallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStackOf</span>.<span class=\"name\">getCallStack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L16-L16","name":"Lake.MonadCallStackOf.mk","line":16,"kind":"ctor","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStackOf.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStackOf</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(getCallStack : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(withCallStack : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CallStack\">Lake.CallStack</a> <span class=\"fn\">κ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\">Lake.MonadCallStackOf</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L15-L18","name":"Lake.MonadCallStackOf","line":15,"kind":"class","docLink":"./Lake/Util/Cycle.html#Lake.MonadCallStackOf","doc":"A monad equipped with a call stack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.MonadCallStackOf\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadCallStackOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L12-L13","name":"Lake.Cycle","line":12,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.Cycle","doc":"A `CallStack` ending in a cycle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.Cycle\"><span class=\"name\">Lake</span>.<span class=\"name\">Cycle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/lake/Lake/Util/Cycle.lean#L9-L10","name":"Lake.CallStack","line":9,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.CallStack","doc":"A sequence of calls donated by the key type `κ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.CallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">CallStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}