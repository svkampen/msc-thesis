{"name":"Mathlib.Data.Nat.Factorization.PrimePow","instances":[],"imports":["Init","Mathlib.Algebra.IsPrimePow","Mathlib.Data.Nat.Factorization.Basic","Mathlib.Data.Nat.Prime.Pow"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L181-L185","name":"Nat.Primes.prodNatEquiv_symm_apply","line":181,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv_symm_apply\"><span class=\"name\">Nat</span>.<span class=\"name\">Primes</span>.<span class=\"name\">prodNatEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv\">Nat.Primes.prodNatEquiv</a>.symm</span> <span class=\"fn\">⟨<span class=\"fn\">n</span>, <span class=\"fn\">hn</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">n</span>.minFac</span>, <span class=\"fn\">⋯</span>⟩</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\"><span class=\"fn\">n</span>.minFac</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L176-L179","name":"Nat.Primes.coe_prodNatEquiv_apply","line":176,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.coe_prodNatEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.coe_prodNatEquiv_apply\"><span class=\"name\">Nat</span>.<span class=\"name\">Primes</span>.<span class=\"name\">coe_prodNatEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Primes\">Nat.Primes</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">Nat.Primes.prodNatEquiv</span> <span class=\"fn\">(<span class=\"fn\">p</span>, <span class=\"fn\">k</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L171-L174","name":"Nat.Primes.prodNatEquiv_apply","line":171,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv_apply\"><span class=\"name\">Nat</span>.<span class=\"name\">Primes</span>.<span class=\"name\">prodNatEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Primes\">Nat.Primes</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Nat.Primes.prodNatEquiv</span> <span class=\"fn\">(<span class=\"fn\">p</span>, <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L155-L169","name":"Nat.Primes.prodNatEquiv","line":155,"kind":"def","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv","doc":"The canonical equivalence between pairs `(p, k)` with `p` a prime and `k : ℕ`\nand the set of prime powers given by `(p, k) ↦ p^(k+1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Primes.prodNatEquiv\"><span class=\"name\">Nat</span>.<span class=\"name\">Primes</span>.<span class=\"name\">prodNatEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Primes\">Nat.Primes</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L149-L153","name":"IsPrimePow.factorization_minFac_ne_zero","line":149,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.factorization_minFac_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.factorization_minFac_ne_zero\"><span class=\"name\">IsPrimePow</span>.<span class=\"name\">factorization_minFac_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\"><span class=\"fn\">n</span>.minFac</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L136-L147","name":"Nat.mul_divisors_filter_prime_pow","line":136,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.mul_divisors_filter_prime_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.mul_divisors_filter_prime_pow\"><span class=\"name\">Nat</span>.<span class=\"name\">mul_divisors_filter_prime_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hab : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Coprime</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Filter.html#Finset.filter\">Finset.filter</a> <span class=\"fn\">IsPrimePow</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span>.divisors</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Filter.html#Finset.filter\">Finset.filter</a> <span class=\"fn\">IsPrimePow</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.divisors</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">b</span>.divisors</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L113-L134","name":"Nat.Coprime.isPrimePow_dvd_mul","line":113,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Coprime.isPrimePow_dvd_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#Nat.Coprime.isPrimePow_dvd_mul\"><span class=\"name\">Nat</span>.<span class=\"name\">Coprime</span>.<span class=\"name\">isPrimePow_dvd_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n a b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hab : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Coprime</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L106-L111","name":"isPrimePow_pow_iff","line":106,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_pow_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_pow_iff\"><span class=\"name\">isPrimePow_pow_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L83-L104","name":"isPrimePow_iff_unique_prime_dvd","line":83,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_unique_prime_dvd","doc":"An equivalent definition for prime powers: `n` is a prime power iff there is a unique prime\ndividing it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_unique_prime_dvd\"><span class=\"name\">isPrimePow_iff_unique_prime_dvd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃! <span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L80-L81","name":"exists_ord_compl_eq_one_iff_isPrimePow","line":80,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#exists_ord_compl_eq_one_iff_isPrimePow","doc":"**Alias** of `exists_ordCompl_eq_one_iff_isPrimePow`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#exists_ord_compl_eq_one_iff_isPrimePow\"><span class=\"name\">exists_ord_compl_eq_one_iff_isPrimePow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\">p</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L70-L78","name":"exists_ordCompl_eq_one_iff_isPrimePow","line":70,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#exists_ordCompl_eq_one_iff_isPrimePow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#exists_ordCompl_eq_one_iff_isPrimePow\"><span class=\"name\">exists_ordCompl_eq_one_iff_isPrimePow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\">p</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L67-L68","name":"IsPrimePow.exists_ord_compl_eq_one","line":67,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.exists_ord_compl_eq_one","doc":"**Alias** of `IsPrimePow.exists_ordCompl_eq_one`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.exists_ord_compl_eq_one\"><span class=\"name\">IsPrimePow</span>.<span class=\"name\">exists_ord_compl_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\">p</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L55-L65","name":"IsPrimePow.exists_ordCompl_eq_one","line":55,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.exists_ordCompl_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.exists_ordCompl_eq_one\"><span class=\"name\">IsPrimePow</span>.<span class=\"name\">exists_ordCompl_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\">p</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L50-L53","name":"isPrimePow_iff_card_primeFactors_eq_one","line":50,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_card_primeFactors_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_card_primeFactors_eq_one\"><span class=\"name\">isPrimePow_iff_card_primeFactors_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.primeFactors</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L35-L48","name":"isPrimePow_iff_factorization_eq_single","line":35,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_factorization_eq_single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_factorization_eq_single\"><span class=\"name\">isPrimePow_iff_factorization_eq_single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L31-L33","name":"isPrimePow_iff_minFac_pow_factorization_eq","line":31,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_minFac_pow_factorization_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_iff_minFac_pow_factorization_eq\"><span class=\"name\">isPrimePow_iff_minFac_pow_factorization_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.minFac</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\"><span class=\"fn\">n</span>.minFac</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L23-L29","name":"isPrimePow_of_minFac_pow_factorization_eq","line":23,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_of_minFac_pow_factorization_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#isPrimePow_of_minFac_pow_factorization_eq\"><span class=\"name\">isPrimePow_of_minFac_pow_factorization_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.minFac</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\"><span class=\"fn\">n</span>.minFac</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Nat/Factorization/PrimePow.lean#L17-L21","name":"IsPrimePow.minFac_pow_factorization_eq","line":17,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.minFac_pow_factorization_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Factorization/PrimePow.html#IsPrimePow.minFac_pow_factorization_eq\"><span class=\"name\">IsPrimePow</span>.<span class=\"name\">minFac_pow_factorization_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.minFac</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.factorization</span> <span class=\"fn\"><span class=\"fn\">n</span>.minFac</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"}]}