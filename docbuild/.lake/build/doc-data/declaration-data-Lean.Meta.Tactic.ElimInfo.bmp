{"name":"Lean.Meta.Tactic.ElimInfo","instances":[{"typeNames":["Lean.Meta.ElimAltInfo"],"name":"Lean.Meta.instReprElimAltInfo","className":"Repr"},{"typeNames":["Lean.Meta.ElimAltInfo"],"name":"Lean.Meta.instInhabitedElimAltInfo","className":"Inhabited"},{"typeNames":["Lean.Meta.ElimInfo"],"name":"Lean.Meta.instReprElimInfo","className":"Repr"},{"typeNames":["Lean.Meta.ElimInfo"],"name":"Lean.Meta.instInhabitedElimInfo","className":"Inhabited"},{"typeNames":["Lean.Meta.CustomEliminator"],"name":"Lean.Meta.instInhabitedCustomEliminator","className":"Inhabited"},{"typeNames":["Lean.Meta.CustomEliminator"],"name":"Lean.Meta.instReprCustomEliminator","className":"Repr"},{"typeNames":["Lean.Meta.CustomEliminators"],"name":"Lean.Meta.instInhabitedCustomEliminators","className":"Inhabited"},{"typeNames":["Lean.Meta.CustomEliminators"],"name":"Lean.Meta.instReprCustomEliminators","className":"Repr"}],"imports":["Lean.Meta.Basic","Lean.Meta.Check","Lean.ScopedEnvExtension"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L194-L208","name":"Lean.Meta.getCustomEliminator?","line":194,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getCustomEliminator?","doc":"Gets an eliminator appropriate for the provided array of targets.\nIf `induction` is `true` then returns a matching eliminator defined using the `@[induction_eliminator]` attribute\nand otherwise returns one defined using the `@[cases_eliminator]` attribute.\n\nThe `@[induction_eliminator]` attribute is for the `induction` tactic\nand the `@[cases_eliminator]` attribute is for the `cases` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getCustomEliminator?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCustomEliminator?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(induction : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L190-L192","name":"Lean.Meta.getCustomEliminators","line":190,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getCustomEliminators","doc":"Gets all the eliminators defined using the `@[induction_eliminator]` and `@[cases_eliminator]` attributes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getCustomEliminators\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCustomEliminators</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L170-L172","name":"Lean.Meta.addCustomEliminator","line":170,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addCustomEliminator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addCustomEliminator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addCustomEliminator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrKind : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">Lean.AttributeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(induction : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L146-L168","name":"Lean.Meta.mkCustomEliminator","line":146,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.mkCustomEliminator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.mkCustomEliminator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCustomEliminator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elimName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(induction : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L139-L144","name":"Lean.Meta.customEliminatorExt","line":139,"kind":"opaque","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.customEliminatorExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.customEliminatorExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">customEliminatorExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L135-L137","name":"Lean.Meta.addCustomEliminatorEntry","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addCustomEliminatorEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addCustomEliminatorEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addCustomEliminatorEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(es : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L133-L133","name":"Lean.Meta.instReprCustomEliminators","line":133,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprCustomEliminators","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprCustomEliminators\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprCustomEliminators</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L133-L133","name":"Lean.Meta.instInhabitedCustomEliminators","line":133,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedCustomEliminators","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedCustomEliminators\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedCustomEliminators</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L132-L132","name":"Lean.Meta.CustomEliminators.map","line":132,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminators</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">Lean.SMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L131-L131","name":"Lean.Meta.CustomEliminators.mk","line":131,"kind":"ctor","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminators</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">Lean.SMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\">Lean.Meta.CustomEliminators</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L131-L133","name":"Lean.Meta.CustomEliminators","line":131,"kind":"structure","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminators\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminators</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L129-L129","name":"Lean.Meta.instReprCustomEliminator","line":129,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprCustomEliminator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprCustomEliminator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprCustomEliminator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L129-L129","name":"Lean.Meta.instInhabitedCustomEliminator","line":129,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedCustomEliminator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedCustomEliminator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedCustomEliminator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L128-L128","name":"Lean.Meta.CustomEliminator.elimName","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.elimName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.elimName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminator</span>.<span class=\"name\">elimName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L127-L127","name":"Lean.Meta.CustomEliminator.typeNames","line":127,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.typeNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.typeNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminator</span>.<span class=\"name\">typeNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L126-L126","name":"Lean.Meta.CustomEliminator.induction","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.induction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.induction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminator</span>.<span class=\"name\">induction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L125-L125","name":"Lean.Meta.CustomEliminator.mk","line":125,"kind":"ctor","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(induction : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elimName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\">Lean.Meta.CustomEliminator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L125-L129","name":"Lean.Meta.CustomEliminator","line":125,"kind":"structure","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.CustomEliminator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CustomEliminator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L104-L123","name":"Lean.Meta.addImplicitTargets.collect","line":104,"kind":"opaque","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addImplicitTargets.collect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addImplicitTargets.collect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addImplicitTargets</span>.<span class=\"name\">collect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elimInfo : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIdx targetIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(implicits : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(targets' : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L88-L123","name":"Lean.Meta.addImplicitTargets","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addImplicitTargets","doc":"Eliminators/recursors may have implicit targets. For builtin recursors, all indices are implicit targets.\nGiven an eliminator and the sequence of explicit targets, this methods returns a new sequence containing\nimplicit and explicit targets.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.addImplicitTargets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addImplicitTargets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elimInfo : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L85-L86","name":"Lean.Meta.getElimInfo","line":85,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getElimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getElimInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elimName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(baseDeclName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L49-L83","name":"Lean.Meta.getElimExprInfo","line":49,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getElimExprInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.getElimExprInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getElimExprInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elimExpr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(baseDeclName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L41-L46","name":"Lean.Meta.altArity","line":41,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.altArity","doc":"Given the type `t` of an alternative, determines the number of parameters\n(.forall and .let)-bound, and whether the conclusion is a `motive`-application.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.altArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">altArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L38-L38","name":"Lean.Meta.instInhabitedElimInfo","line":38,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedElimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedElimInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L38-L38","name":"Lean.Meta.instReprElimInfo","line":38,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprElimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprElimInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L37-L37","name":"Lean.Meta.ElimInfo.altsInfo","line":37,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.altsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.altsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span>.<span class=\"name\">altsInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L36-L36","name":"Lean.Meta.ElimInfo.targetsPos","line":36,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.targetsPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.targetsPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span>.<span class=\"name\">targetsPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L35-L35","name":"Lean.Meta.ElimInfo.motivePos","line":35,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.motivePos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.motivePos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span>.<span class=\"name\">motivePos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L34-L34","name":"Lean.Meta.ElimInfo.elimType","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.elimType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.elimType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span>.<span class=\"name\">elimType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L33-L33","name":"Lean.Meta.ElimInfo.elimExpr","line":33,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.elimExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.elimExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span>.<span class=\"name\">elimExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L32-L32","name":"Lean.Meta.ElimInfo.mk","line":32,"kind":"ctor","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elimExpr elimType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(motivePos : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(targetsPos : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(altsInfo : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Lean.Meta.ElimInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L26-L38","name":"Lean.Meta.ElimInfo","line":26,"kind":"structure","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo","doc":"Information about an eliminator as used by `induction` or `cases`.\n\nCreated from an expression by `getElimInfo`. This typically contains level metavariables that\nare instantiated as we go (e.g. in `addImplicitTargets`), so this is single use.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L24-L24","name":"Lean.Meta.instInhabitedElimAltInfo","line":24,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedElimAltInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instInhabitedElimAltInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedElimAltInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L24-L24","name":"Lean.Meta.instReprElimAltInfo","line":24,"kind":"instance","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprElimAltInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.instReprElimAltInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprElimAltInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L23-L23","name":"Lean.Meta.ElimAltInfo.provesMotive","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.provesMotive","doc":"If `provesMotive := true`, then this alternative has `motive` as its conclusion.\nOnly for those alternatives the `induction` tactic should introduce reverted hypotheses.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.provesMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimAltInfo</span>.<span class=\"name\">provesMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L20-L20","name":"Lean.Meta.ElimAltInfo.numFields","line":20,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.numFields","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.numFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimAltInfo</span>.<span class=\"name\">numFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L19-L19","name":"Lean.Meta.ElimAltInfo.declName?","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.declName?","doc":"A declaration corresponding to the inductive constructor.\n(For custom recursors, the alternatives correspond to parameter names in the\nrecursor, so we may not have a declaration to point to.)\nThis is used for go-to-definition on the alternative name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.declName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimAltInfo</span>.<span class=\"name\">declName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L14-L14","name":"Lean.Meta.ElimAltInfo.name","line":14,"kind":"def","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimAltInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L13-L13","name":"Lean.Meta.ElimAltInfo.mk","line":13,"kind":"ctor","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimAltInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numFields : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(provesMotive : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Lean.Meta.ElimAltInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/Tactic/ElimInfo.lean#L13-L24","name":"Lean.Meta.ElimAltInfo","line":13,"kind":"structure","docLink":"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimAltInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}