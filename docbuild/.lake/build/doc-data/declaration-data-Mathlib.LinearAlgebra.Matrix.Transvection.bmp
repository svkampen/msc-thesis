{"name":"Mathlib.LinearAlgebra.Matrix.Transvection","instances":[{"typeNames":["Matrix.TransvectionStruct"],"name":"Matrix.instNonemptyTransvectionStructOfNontrivial","className":"Nonempty"}],"imports":["Init","Mathlib.Data.Matrix.Basis","Mathlib.Data.Matrix.DMatrix","Mathlib.LinearAlgebra.Matrix.Determinant.Basic","Mathlib.LinearAlgebra.Matrix.Reindex","Mathlib.Tactic.FieldSimp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L726-L746","name":"Matrix.diagonal_transvection_induction_of_det_ne_zero","line":726,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.diagonal_transvection_induction_of_det_ne_zero","doc":"Induction principle for invertible matrices based on transvections: if a property is true for\nall invertible diagonal matrices, all transvections, and is stable under product of invertible\nmatrices, then it is true for all invertible matrices. This is the useful way to say that\ninvertible matrices are generated by invertible diagonal matrices and transvections. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.diagonal_transvection_induction_of_det_ne_zero\"><span class=\"name\">Matrix</span>.<span class=\"name\">diagonal_transvection_induction_of_det_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hMdet : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.det</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hdiag : <span class=\"fn\">∀ (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span>)</span>.det</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(htransvec : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hmul : <span class=\"fn\">∀ (<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.det</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B</span>.det</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">A</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">B</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span>)</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L696-L724","name":"Matrix.diagonal_transvection_induction","line":696,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.diagonal_transvection_induction","doc":"Induction principle for matrices based on transvections: if a property is true for all diagonal\nmatrices, all transvections, and is stable under product, then it is true for all matrices. This is\nthe useful way to say that matrices are generated by diagonal matrices and transvections.\n\nWe state a slightly more general version: to prove a property for a matrix `M`, it suffices to\nassume that the diagonal matrices we consider have the same determinant as `M`. This is useful to\nobtain similar principles for `SLₙ` or `GLₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.diagonal_transvection_induction\"><span class=\"name\">Matrix</span>.<span class=\"name\">diagonal_transvection_induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hdiag : <span class=\"fn\">∀ (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span>)</span>.det</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span>.det</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(htransvec : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hmul : <span class=\"fn\">∀ (<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">A</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">B</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L676-L688","name":"Matrix.Pivot.exists_list_transvec_mul_diagonal_mul_list_transvec","line":676,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_diagonal_mul_list_transvec","doc":"Any matrix can be written as the product of transvections, a diagonal matrix, and\ntransvections. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_diagonal_mul_list_transvec\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">exists_list_transvec_mul_diagonal_mul_list_transvec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span>),\n  <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>       <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L668-L674","name":"Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal","line":668,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal","doc":"Any matrix can be reduced to diagonal form by elementary operations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">exists_list_transvec_mul_mul_list_transvec_eq_diagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L645-L666","name":"Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal_aux","line":645,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal_aux","doc":"Any matrix can be reduced to diagonal form by elementary operations. Formulated here on `Type 0`\nbecause we will make an induction using `Fin r`.\nSee `exists_list_transvec_mul_mul_list_transvec_eq_diagonal` for the general version (which follows\nfrom this one and reindexing). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal_aux\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">exists_list_transvec_mul_mul_list_transvec_eq_diagonal_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L626-L643","name":"Matrix.Pivot.reindex_exists_list_transvec_mul_mul_list_transvec_eq_diagonal","line":626,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.reindex_exists_list_transvec_mul_mul_list_transvec_eq_diagonal","doc":"Reduction to diagonal form by elementary operations is invariant under reindexing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.reindex_exists_list_transvec_mul_mul_list_transvec_eq_diagonal\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">reindex_exists_list_transvec_mul_mul_list_transvec_eq_diagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">p</span> <span class=\"fn\">p</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H :\n  <span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Reindex.html#Matrix.reindexAlgEquiv\">Matrix.reindexAlgEquiv</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">𝕜</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\">M</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>         <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">p</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">p</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">𝕜</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L596-L622","name":"Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal_induction","line":596,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal_induction","doc":"Inductive step for the reduction: if one knows that any size `r` matrix can be reduced to\ndiagonal form by elementary operations, then one deduces it for matrices over `Fin r ⊕ Unit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_list_transvec_mul_mul_list_transvec_eq_diagonal_induction\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">exists_list_transvec_mul_mul_list_transvec_eq_diagonal_induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IH :\n  <span class=\"fn\">∀ (<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">𝕜</span></span>),\n    <span class=\"fn\">∃ (<span class=\"fn\">L₀</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L₀'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D₀</span> :\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> → <span class=\"fn\">𝕜</span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L₀</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>           <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L₀'</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D₀</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">D</span> :\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span> → <span class=\"fn\">𝕜</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Diagonal.html#Matrix.diagonal\">Matrix.diagonal</a> <span class=\"fn\">D</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L555-L594","name":"Matrix.Pivot.exists_isTwoBlockDiagonal_list_transvec_mul_mul_list_transvec","line":555,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_isTwoBlockDiagonal_list_transvec_mul_mul_list_transvec","doc":"There exist two lists of `TransvectionStruct` such that multiplying by them on the left and\non the right makes a matrix block-diagonal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_isTwoBlockDiagonal_list_transvec_mul_mul_list_transvec\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">exists_isTwoBlockDiagonal_list_transvec_mul_mul_list_transvec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>       <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span>)</span>.IsTwoBlockDiagonal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L538-L553","name":"Matrix.Pivot.exists_isTwoBlockDiagonal_of_ne_zero","line":538,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_isTwoBlockDiagonal_of_ne_zero","doc":"There exist two lists of `TransvectionStruct` such that multiplying by them on the left and\non the right makes a matrix block-diagonal, when the last coefficient is nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.exists_isTwoBlockDiagonal_of_ne_zero\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">exists_isTwoBlockDiagonal_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span>) (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>       <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L'</span>)</span>.prod</span>)</span>.IsTwoBlockDiagonal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L525-L536","name":"Matrix.Pivot.isTwoBlockDiagonal_listTransvecCol_mul_mul_listTransvecRow","line":525,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.isTwoBlockDiagonal_listTransvecCol_mul_mul_listTransvecRow","doc":"Multiplying by all the matrices either in `listTransvecCol M` and `listTransvecRow M` turns\nthe matrix in block-diagonal form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.isTwoBlockDiagonal_listTransvecCol_mul_mul_listTransvecRow\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">isTwoBlockDiagonal_listTransvecCol_mul_mul_listTransvecRow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.prod</span>)</span>.IsTwoBlockDiagonal</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L514-L523","name":"Matrix.Pivot.listTransvecCol_mul_mul_listTransvecRow_last_row","line":514,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_mul_listTransvecRow_last_row","doc":"Multiplying by all the matrices either in `listTransvecCol M` and `listTransvecRow M` kills\nall the coefficients in the last column but the last one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_mul_listTransvecRow_last_row\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_mul_mul_listTransvecRow_last_row</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.prod</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L503-L512","name":"Matrix.Pivot.listTransvecCol_mul_mul_listTransvecRow_last_col","line":503,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_mul_listTransvecRow_last_col","doc":"Multiplying by all the matrices either in `listTransvecCol M` and `listTransvecRow M` kills\nall the coefficients in the last row but the last one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_mul_listTransvecRow_last_col\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_mul_mul_listTransvecRow_last_col</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.prod</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L457-L501","name":"Matrix.Pivot.mul_listTransvecRow_last_row","line":457,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.mul_listTransvecRow_last_row","doc":"Multiplying by all the matrices in `listTransvecRow M` kills all the coefficients in the\nlast row but the last one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.mul_listTransvecRow_last_row\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">mul_listTransvecRow_last_row</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.prod</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L450-L455","name":"Matrix.Pivot.mul_listTransvecRow_last_col","line":450,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.mul_listTransvecRow_last_col","doc":"Multiplying by all the matrices in `listTransvecRow M` does not change the last column. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.mul_listTransvecRow_last_col\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">mul_listTransvecRow_last_col</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.prod</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L433-L448","name":"Matrix.Pivot.mul_listTransvecRow_last_col_take","line":433,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.mul_listTransvecRow_last_col_take","doc":"Multiplying by some of the matrices in `listTransvecRow M` does not change the last column. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.mul_listTransvecRow_last_col_take\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">mul_listTransvecRow_last_col_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>)</span>.prod</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L387-L431","name":"Matrix.Pivot.listTransvecCol_mul_last_col","line":387,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_last_col","doc":"Multiplying by all the matrices in `listTransvecCol M` kills all the coefficients in the\nlast column but the last one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_last_col\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_mul_last_col</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L382-L385","name":"Matrix.Pivot.listTransvecCol_mul_last_row","line":382,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_last_row","doc":"Multiplying by all the matrices in `listTransvecCol M` does not change the last row. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_last_row\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_mul_last_row</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L370-L380","name":"Matrix.Pivot.listTransvecCol_mul_last_row_drop","line":370,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_last_row_drop","doc":"Multiplying by some of the matrices in `listTransvecCol M` does not change the last row. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_mul_last_row_drop\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_mul_last_row_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L363-L368","name":"Matrix.Pivot.listTransvecRow_get","line":363,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow_get\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecRow_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span>)</span></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L357-L361","name":"Matrix.Pivot.listTransvecRow_getElem","line":357,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow_getElem\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecRow_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L354-L355","name":"Matrix.Pivot.length_listTransvecRow","line":354,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.length_listTransvecRow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.length_listTransvecRow\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">length_listTransvecRow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\">Matrix.Pivot.listTransvecRow</a> <span class=\"fn\">M</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L347-L352","name":"Matrix.Pivot.listTransvecCol_get","line":347,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_get\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L341-L345","name":"Matrix.Pivot.listTransvecCol_getElem","line":341,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol_getElem\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L338-L339","name":"Matrix.Pivot.length_listTransvecCol","line":338,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.length_listTransvecCol","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.length_listTransvecCol\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">length_listTransvecCol</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\">Matrix.Pivot.listTransvecCol</a> <span class=\"fn\">M</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L332-L336","name":"Matrix.Pivot.listTransvecRow","line":332,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow","doc":"A list of transvections such that multiplying on the right with these transvections will replace\nthe last row with zeroes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecRow\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecRow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L326-L330","name":"Matrix.Pivot.listTransvecCol","line":326,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol","doc":"A list of transvections such that multiplying on the left with these transvections will replace\nthe last column with zeroes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.Pivot.listTransvecCol\"><span class=\"name\">Matrix</span>.<span class=\"name\">Pivot</span>.<span class=\"name\">listTransvecCol</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">𝕜</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L292-L298","name":"Matrix.TransvectionStruct.toMatrix_reindexEquiv_prod","line":292,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_reindexEquiv_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_reindexEquiv_prod\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">toMatrix_reindexEquiv_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.reindexEquiv\">Matrix.TransvectionStruct.reindexEquiv</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Reindex.html#Matrix.reindexAlgEquiv\">Matrix.reindexAlgEquiv</a> <span class=\"fn\">R</span> <span class=\"fn\">R</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L283-L290","name":"Matrix.TransvectionStruct.toMatrix_reindexEquiv","line":283,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_reindexEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_reindexEquiv\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">toMatrix_reindexEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.reindexEquiv\">Matrix.TransvectionStruct.reindexEquiv</a> <span class=\"fn\">e</span> <span class=\"fn\">t</span>)</span>.toMatrix</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Reindex.html#Matrix.reindexAlgEquiv\">Matrix.reindexAlgEquiv</a> <span class=\"fn\">R</span> <span class=\"fn\">R</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L273-L279","name":"Matrix.TransvectionStruct.reindexEquiv","line":273,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.reindexEquiv","doc":"Given a `TransvectionStruct` on `n` and an equivalence between `n` and `p`, define the\ncorresponding `TransvectionStruct` on `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.reindexEquiv\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">reindexEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L262-L269","name":"Matrix.TransvectionStruct.mul_sumInl_toMatrix_prod","line":262,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.mul_sumInl_toMatrix_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.mul_sumInl_toMatrix_prod\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">mul_sumInl_toMatrix_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">p</span> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">M</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">N</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl\">Matrix.TransvectionStruct.sumInl</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">L</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">N</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L253-L260","name":"Matrix.TransvectionStruct.sumInl_toMatrix_prod_mul","line":253,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl_toMatrix_prod_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl_toMatrix_prod_mul\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">sumInl_toMatrix_prod_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">p</span> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl\">Matrix.TransvectionStruct.sumInl</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">M</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">N</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">N</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L243-L251","name":"Matrix.TransvectionStruct.toMatrix_sumInl","line":243,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_sumInl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_sumInl\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">toMatrix_sumInl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl\">Matrix.TransvectionStruct.sumInl</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span>.toMatrix</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L235-L241","name":"Matrix.TransvectionStruct.sumInl","line":235,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl","doc":"Given a `TransvectionStruct` on `n`, define the corresponding `TransvectionStruct` on `n ⊕ p`\nusing the identity on `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.sumInl\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">sumInl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L223-L229","name":"Matrix.mem_range_scalar_iff_commute_transvectionStruct","line":223,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mem_range_scalar_iff_commute_transvectionStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mem_range_scalar_iff_commute_transvectionStruct\"><span class=\"name\">Matrix</span>.<span class=\"name\">mem_range_scalar_iff_commute_transvectionStruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.scalar\">Matrix.scalar</a> <span class=\"fn\">n</span>)</span></span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span> <span class=\"fn\">M</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L215-L221","name":"Matrix.mem_range_scalar_of_commute_transvectionStruct","line":215,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mem_range_scalar_of_commute_transvectionStruct","doc":"`M` is a scalar matrix if it commutes with every nontrivial transvection (elementary matrix). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mem_range_scalar_of_commute_transvectionStruct\"><span class=\"name\">Matrix</span>.<span class=\"name\">mem_range_scalar_of_commute_transvectionStruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hM : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span> <span class=\"fn\">M</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.scalar\">Matrix.scalar</a> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L204-L213","name":"Matrix.TransvectionStruct.prod_mul_reverse_inv_prod","line":204,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.prod_mul_reverse_inv_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.prod_mul_reverse_inv_prod\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">prod_mul_reverse_inv_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Matrix.TransvectionStruct.inv</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.reverse</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L194-L202","name":"Matrix.TransvectionStruct.reverse_inv_prod_mul_prod","line":194,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.reverse_inv_prod_mul_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.reverse_inv_prod_mul_prod\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">reverse_inv_prod_mul_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Matrix.TransvectionStruct.inv</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.reverse</span>)</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L190-L192","name":"Matrix.TransvectionStruct.mul_inv","line":190,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.mul_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.mul_inv\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">mul_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.inv</span>.toMatrix</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L186-L188","name":"Matrix.TransvectionStruct.inv_mul","line":186,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_mul\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">inv_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.inv</span>.toMatrix</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L175-L175","name":"Matrix.TransvectionStruct.inv_c","line":175,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_c","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_c\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">inv_c</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.inv</span>.c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">t</span>.c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L175-L175","name":"Matrix.TransvectionStruct.inv_i","line":175,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_i","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_i\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">inv_i</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.inv</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L175-L175","name":"Matrix.TransvectionStruct.inv_j","line":175,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_j","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv_j\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">inv_j</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.inv</span>.j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L173-L180","name":"Matrix.TransvectionStruct.inv","line":173,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv","doc":"The inverse of a `TransvectionStruct`, designed so that `t.inv.toMatrix` is the inverse of\n`t.toMatrix`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.inv\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L166-L171","name":"Matrix.TransvectionStruct.det_toMatrix_prod","line":166,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.det_toMatrix_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.det_toMatrix_prod\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">det_toMatrix_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Matrix.TransvectionStruct.toMatrix</span> <span class=\"fn\">L</span>)</span>.prod</span>.det</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L162-L164","name":"Matrix.TransvectionStruct.det","line":162,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.det","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.det\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">det</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.toMatrix</span>.det</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L157-L160","name":"Matrix.TransvectionStruct.toMatrix_mk","line":157,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix_mk\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">toMatrix_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">i</span> := <span class=\"fn\">i</span>, <span class=\"fn\">j</span> := <span class=\"fn\">j</span>, <span class=\"fn\">hij</span> := <span class=\"fn\">hij</span>, <span class=\"fn\">c</span> := <span class=\"fn\">c</span> }</span>.toMatrix</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L153-L155","name":"Matrix.TransvectionStruct.toMatrix","line":153,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix","doc":"Associating to a `transvection_struct` the corresponding transvection matrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.toMatrix\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">toMatrix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L145-L147","name":"Matrix.instNonemptyTransvectionStructOfNontrivial","line":145,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.instNonemptyTransvectionStructOfNontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.instNonemptyTransvectionStructOfNontrivial\"><span class=\"name\">Matrix</span>.<span class=\"name\">instNonemptyTransvectionStructOfNontrivial</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L143-L143","name":"Matrix.TransvectionStruct.c","line":143,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.c","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.c\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">c</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">R</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L142-L142","name":"Matrix.TransvectionStruct.hij","line":142,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.hij","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.hij\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">hij</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">self</span>.j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L141-L141","name":"Matrix.TransvectionStruct.j","line":141,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.j","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.j\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">j</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L141-L141","name":"Matrix.TransvectionStruct.i","line":141,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.i","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.i\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">i</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L140-L140","name":"Matrix.TransvectionStruct.mk","line":140,"kind":"ctor","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct.mk\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\">Matrix.TransvectionStruct</a> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L136-L143","name":"Matrix.TransvectionStruct","line":136,"kind":"structure","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct","doc":"A structure containing all the information from which one can build a nontrivial transvection.\nThis structure is easier to manipulate than transvections as one has a direct access to all the\nrelevant fields. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.TransvectionStruct\"><span class=\"name\">Matrix</span>.<span class=\"name\">TransvectionStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u₂)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L128-L130","name":"Matrix.det_transvection_of_ne","line":128,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.det_transvection_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.det_transvection_of_ne\"><span class=\"name\">Matrix</span>.<span class=\"name\">det_transvection_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span>)</span>.det</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L124-L126","name":"Matrix.mul_transvection_apply_of_ne","line":124,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mul_transvection_apply_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mul_transvection_apply_of_ne\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_transvection_apply_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L120-L122","name":"Matrix.transvection_mul_apply_of_ne","line":120,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_mul_apply_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_mul_apply_of_ne\"><span class=\"name\">Matrix</span>.<span class=\"name\">transvection_mul_apply_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L115-L118","name":"Matrix.mul_transvection_apply_same","line":115,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mul_transvection_apply_same","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.mul_transvection_apply_same\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_transvection_apply_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">a</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L111-L113","name":"Matrix.transvection_mul_apply_same","line":111,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_mul_apply_same","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_mul_apply_same\"><span class=\"name\">Matrix</span>.<span class=\"name\">transvection_mul_apply_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">j</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L106-L109","name":"Matrix.transvection_mul_transvection_same","line":106,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_mul_transvection_same","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_mul_transvection_same\"><span class=\"name\">Matrix</span>.<span class=\"name\">transvection_mul_transvection_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c d : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">d</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L86-L102","name":"Matrix.updateRow_eq_transvection","line":86,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.updateRow_eq_transvection","doc":"A transvection matrix is obtained from the identity by adding `c` times the `j`-th row to\nthe `i`-th row. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.updateRow_eq_transvection\"><span class=\"name\">Matrix</span>.<span class=\"name\">updateRow_eq_transvection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/RowCol.html#Matrix.updateRow\">Matrix.updateRow</a> <span class=\"fn\">1</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">j</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L81-L82","name":"Matrix.transvection_zero","line":81,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection_zero\"><span class=\"name\">Matrix</span>.<span class=\"name\">transvection_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\">Matrix.transvection</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/LinearAlgebra/Matrix/Transvection.lean#L74-L79","name":"Matrix.transvection","line":74,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection","doc":"The transvection matrix `transvection i j c` is equal to the identity plus `c` at position\n`(i, j)`. Multiplying by it on the left (as in `transvection i j c * M`) corresponds to adding\n`c` times the `j`-th row of `M` to its `i`-th row. Multiplying by it on the right corresponds\nto adding `c` times the `i`-th column to the `j`-th column. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/Transvection.html#Matrix.transvection\"><span class=\"name\">Matrix</span>.<span class=\"name\">transvection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"}]}