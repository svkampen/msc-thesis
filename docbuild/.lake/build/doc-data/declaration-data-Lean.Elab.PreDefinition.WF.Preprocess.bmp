{"name":"Lean.Elab.PreDefinition.WF.Preprocess","instances":[],"imports":["Lean.Meta.Transform","Lean.Elab.RecAppSyntax"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L19-L40","name":"Lean.Elab.WF.preprocess","line":19,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.preprocess","doc":"Preprocesses the expressions to improve the effectiveness of `wfRecursion`.\n\n* Floats out the RecApp markers.\n  Example:\n  ```\n  def f : Nat â†’ Nat\n    | 0 => 1\n    | i+1 => (f x) i\n  ```\n\nUnlike `Lean.Elab.Structural.preprocess`, do _not_ beta-reduce, as it could\nremove `let_fun`-lambdas that contain explicit termination proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.preprocess\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">preprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}