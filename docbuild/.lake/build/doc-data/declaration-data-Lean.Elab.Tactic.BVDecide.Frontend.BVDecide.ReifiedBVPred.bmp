{"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVPred","instances":[],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.lean#L84-L102","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkGetLsbD","line":84,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkGetLsbD","doc":"Construct the reified version of `BitVec.getLsbD subExpr idx`.\nThis function assumes that `subExpr` is the expression corresponding to `sub`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkGetLsbD\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">mkGetLsbD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(sub : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subExpr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">Lean.Elab.Tactic.BVDecide.Frontend.M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.lean#L79-L82","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkBinPred.congrThmofBinPred","line":79,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkBinPred.congrThmofBinPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkBinPred.congrThmofBinPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">mkBinPred</span>.<span class=\"name\">congrThmofBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">Std.Tactic.BVDecide.BVBinPred</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.lean#L47-L82","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkBinPred","line":47,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkBinPred","doc":"Construct the reified version of applying the predicate in `pred` to `lhs` and `rhs`.\nThis function assumes that `lhsExpr` and `rhsExpr` are the corresponding expressions to `lhs`\nand `rhs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.mkBinPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">mkBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhsExpr rhsExpr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">Std.Tactic.BVDecide.BVBinPred</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">Lean.Elab.Tactic.BVDecide.Frontend.M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.lean#L21-L45","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.boolAtom","line":21,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.boolAtom","doc":"Construct an uninterpreted `Bool` atom from `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVPred.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.boolAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">boolAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">Lean.Elab.Tactic.BVDecide.Frontend.M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred</a>)</span></span></div></div>"}]}