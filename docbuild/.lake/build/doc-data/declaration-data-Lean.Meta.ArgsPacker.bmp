{"name":"Lean.Meta.ArgsPacker","instances":[],"imports":["Lean.Meta.AppBuilder","Lean.Meta.PProdN","Lean.Meta.ArgsPacker.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L540-L569","name":"Lean.Meta.ArgsPacker.curryParam","line":540,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryParam","doc":"Given `value : type` where `type` is\n```\n(m : a ⊗' b ⊕' c ⊗' d → s) → r[m]\n```\nbrings `m1 : a → b → s` and `m2 : c → d → s` into scope. The continuation receives\n\n * FVars for `m1`…\n * `e[m]`\n * `t[m]`\n\nwhere `m : a ⊗' b ⊕' c ⊗' d → s` is the uncurried form of `m1` and `m2`.\n\nThe variable names `m1` and `m2` are taken from the parameter name in `t`, with numbers added\nunless `numFuns = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryParam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L511-L522","name":"Lean.Meta.ArgsPacker.curry","line":511,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curry","doc":"Given expression `e` of type `(x : a ⊗' b ⊕' c ⊗' d) → e[x]`, wraps that expression\nto produce an expression of the isomorphic type\n```\n((x: a) → (y : b) → e[.inl (x,y)]) ∧ ((x : c) → (y : d) → e[.inr (x,y)])\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L501-L509","name":"Lean.Meta.ArgsPacker.curryType","line":501,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryType","doc":"Given type `(x : a ⊗' b ⊕' c ⊗' d) → R` (non-dependent), return types\n```\n#[(x: a) → (y : b) → R, (x : c) → (y : d) → R]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L479-L498","name":"Lean.Meta.ArgsPacker.curryProj","line":479,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryProj","doc":"Given expression `e` of type `(x : a₁ ⊗' b₁ ⊕' a₂ ⊗' d₂ …) → e[x]`, uncurries the expression and\nprojects to the `i`th function of type,\n```\n((x : aᵢ) → (y : bᵢ) → e[.inr….inl (x,y)])\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L468-L477","name":"Lean.Meta.ArgsPacker.uncurryND","line":468,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryND","doc":"Given expressions `e₁`, `e₂` with types `(x : A) → (y : B[x]) → R`\nand `(z : C) → R`, returns an expression of type\n```\n(x : (A ⊗ B) ⊕ C) → R\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L457-L466","name":"Lean.Meta.ArgsPacker.uncurry","line":457,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurry","doc":"Given expressions `e₁`, `e₂` with types `(x : A) → (y : B[x]) → R₁[x,y]`\nand `(z : C) → R₂[z]`, returns an expression of type\n```\n(x : (A ⊗ B) ⊕ C) → (match x with | .inl (x, y) => R₁[x,y] | .inr R₂[z]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L447-L455","name":"Lean.Meta.ArgsPacker.uncurryType","line":447,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryType","doc":"Given types `(x : A) → (y : B[x]) → R₁[x,y]` and `(z : C) → R₂[z]`, returns the type uncurried type\n```\n(x : (A ⊗ B) ⊕ C) → (match x with | .inl (x, y) => R₁[x,y] | .inr R₂[z]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L433-L444","name":"Lean.Meta.ArgsPacker.unpack","line":433,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.unpack","doc":"Given the packed argument of a (possibly) mutual and (possibly) nary call,\nreturn the function index that is called and the arguments individually.\n\nWe expect precisely the expressions produced by `pack`, with manifest\n`PSum.inr`, `PSum.inl` and `PSigma.mk` constructors, and thus take them apart\nrather than using projectinos.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L425-L431","name":"Lean.Meta.ArgsPacker.pack","line":425,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.pack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(domain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L422-L423","name":"Lean.Meta.ArgsPacker.arities","line":422,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.arities","doc":"The arities of the functions being packed "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.arities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">arities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L419-L420","name":"Lean.Meta.ArgsPacker.numFuncs","line":419,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.numFuncs","doc":"The number of functions being packed "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.numFuncs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">numFuncs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(argsPacker : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Lean.Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L409-L413","name":"Lean.Meta.ArgsPacker.Mutual.curryType","line":409,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.curryType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.curryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">curryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L388-L401","name":"Lean.Meta.ArgsPacker.Mutual.uncurryND","line":388,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryND","doc":"Given unary expressions `e₁`, `e₂` with types `(x : A) → R`\nand `(z : C) → R`, returns an expression of type\n```\n(x : A ⊕' C) → R\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L373-L386","name":"Lean.Meta.ArgsPacker.Mutual.uncurry","line":373,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurry","doc":"Given unary expressions `e₁`, `e₂` with types `(x : A) → R₁[x]`\nand `(z : C) → R₂[z]`, returns an expression of type\n```\n(x : A ⊕' C) → (match x with | .inl x => R₁[x] | .inr R₂[z])\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L332-L344","name":"Lean.Meta.ArgsPacker.Mutual.uncurryTypeND","line":332,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryTypeND","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryTypeND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryTypeND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L316-L324","name":"Lean.Meta.ArgsPacker.Mutual.uncurryType","line":316,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L285-L300","name":"Lean.Meta.ArgsPacker.Mutual.mkCodomain.go","line":285,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">mkCodomain</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L276-L302","name":"Lean.Meta.ArgsPacker.Mutual.mkCodomain","line":276,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain","doc":"Given unary types `(x : Aᵢ) → Rᵢ[x]`, and `(x : A₁ ⊕ A₂ …)`, calculate the packed codomain\n```\nmatch x with | inl x₁ => R₁[x₁] | inr x₂ => R₂[x₂] | …\n```\nThis function assumes (and does not check) that `Rᵢ` all have the same level.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">mkCodomain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L255-L273","name":"Lean.Meta.ArgsPacker.Mutual.unpack","line":255,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.unpack","doc":"Unpacks a mutually packed argument created with `Mutual.mk` returning the\nargument and function index.\n\nThrows an error if the expression is not of that form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numFuncs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L241-L251","name":"Lean.Meta.ArgsPacker.Mutual.pack.go","line":241,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">pack</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numFuncs fidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L235-L253","name":"Lean.Meta.ArgsPacker.Mutual.pack","line":235,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack","doc":"If `arg` is the argument to the `fidx`th of the `argsPacker.numFuncs` in the recursive group,\nthen `mk` packs that argument in `PSum.inl` and `PSum.inr` constructors\nto create the mutual-packed argument of type `domain`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numFuncs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(domain : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L218-L223","name":"Lean.Meta.ArgsPacker.Mutual.packType","line":218,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.packType","doc":"Given types `#[t₁, t₂,…]`, returns the type `t₁ ⊕' t₂ …`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.packType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">packType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L153-L164","name":"Lean.Meta.ArgsPacker.Unary.uncurry","line":153,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurry","doc":"Given expression `e` of type `(x : A) → (y : B[x]) → … → (z : D[x,y]) → R[x,y,z]`\nreturns an expression of type `(x : A ⊗' B ⊗' … ⊗' D) → R[x.1, x.2.1, x.2.2]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(varNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L116-L128","name":"Lean.Meta.ArgsPacker.Unary.uncurryType","line":116,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurryType","doc":"Given a type `t` of the form `(x : A) → (y : B[x]) → … → (z : D[x,y]) → R[x,y,z]`\nreturns the curried type `(x : A ⊗' B ⊗' … ⊗' D) → R[x.1, x.2.1, x.2.2]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(varNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L85-L100","name":"Lean.Meta.ArgsPacker.Unary.unpack","line":85,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.unpack","doc":"Unpacks a unary packed argument created with `Unary.pack`.\n\nThrows an error if the expression is not of that form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L71-L83","name":"Lean.Meta.ArgsPacker.Unary.pack.go","line":71,"kind":"opaque","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">pack</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L65-L83","name":"Lean.Meta.ArgsPacker.Unary.pack","line":65,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack","doc":"Create a unary application by packing the given arguments using `PSigma.mk`.\nThe `type` should be the expected type of the packed argument, as created with `packType`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Lean/Meta/ArgsPacker.lean#L58-L62","name":"Lean.Meta.ArgsPacker.Unary.packType","line":58,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.packType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.packType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">packType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}