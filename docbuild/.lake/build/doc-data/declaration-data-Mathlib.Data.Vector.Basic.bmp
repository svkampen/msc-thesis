{"name":"Mathlib.Data.Vector.Basic","instances":[{"typeNames":["Mathlib.Vector"],"name":"Mathlib.Vector.instInhabited","className":"Inhabited"},{"typeNames":["Mathlib.Vector"],"name":"Mathlib.Vector.zero_subsingleton","className":"Subsingleton"},{"typeNames":["flip"],"name":"Mathlib.Vector.instTraversableFlipNat","className":"Traversable"},{"typeNames":["flip"],"name":"Mathlib.Vector.instLawfulTraversableFlipNat","className":"LawfulTraversable"}],"imports":["Init","Mathlib.Algebra.BigOperators.Group.List","Mathlib.Data.Vector.Defs","Mathlib.Data.List.Nodup","Mathlib.Data.List.OfFn","Mathlib.Data.List.InsertIdx","Mathlib.Control.Applicative","Mathlib.Control.Traversable.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L785-L791","name":"Mathlib.Vector.mapAccumr₂_cons","line":785,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mapAccumr₂_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mapAccumr₂_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">ys</span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr₂\">Mathlib.Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">s</span></span>;\n  <span class=\"fn\">let <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">r</span>.1</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">q</span>.1</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.2</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\">r</span>.2</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L777-L783","name":"Mathlib.Vector.mapAccumr_cons","line":777,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mapAccumr_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mapAccumr_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.mapAccumr\">Mathlib.Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">s</span></span>;\n  <span class=\"fn\">let <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">r</span>.1</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">q</span>.1</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.2</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\">r</span>.2</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L764-L775","name":"Mathlib.Vector.get_map₂","line":764,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_map₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_map₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">v₁</span> <span class=\"fn\">v₂</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v₁</span>.get</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v₂</span>.get</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L756-L758","name":"Mathlib.Vector.append_nil","line":756,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.append_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.append_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">append_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.append</span> <span class=\"fn\">Mathlib.Vector.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L751-L754","name":"Mathlib.Vector.get_append_cons_succ","line":751,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_append_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_append_cons_succ\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_append_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.succ</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span>.append</span> <span class=\"fn\">ys</span>)</span>.get</span> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">h</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.append</span> <span class=\"fn\">ys</span>)</span>.get</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L749-L749","name":"Mathlib.Vector.get_append_cons_zero","line":749,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_append_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_append_cons_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_append_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span>.append</span> <span class=\"fn\">ys</span>)</span>.get</span> <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L741-L744","name":"Mathlib.Vector.replicate_succ","line":741,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.replicate_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.replicate_succ\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">replicate_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.replicate\">Mathlib.Vector.replicate</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.replicate\">Mathlib.Vector.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L710-L717","name":"Mathlib.Vector.instLawfulTraversableFlipNat","line":710,"kind":"instance","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.instLawfulTraversableFlipNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.instLawfulTraversableFlipNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instLawfulTraversableFlipNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L706-L708","name":"Mathlib.Vector.instTraversableFlipNat","line":706,"kind":"instance","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.instTraversableFlipNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.instTraversableFlipNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instTraversableFlipNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L697-L702","name":"Mathlib.Vector.naturality","line":697,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.naturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F G : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.app</span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">(<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.app</span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L691-L693","name":"Mathlib.Vector.traverse_eq_map_id","line":691,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse_eq_map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse_eq_map_id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">traverse_eq_map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">(<span class=\"fn\">pure</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L681-L689","name":"Mathlib.Vector.comp_traverse","line":681,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.comp_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.comp_traverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">comp_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F G : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β γ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">(<span class=\"fn\">Functor.Comp.mk</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L667-L670","name":"Mathlib.Vector.id_traverse","line":667,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.id_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.id_traverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">id_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">pure</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L662-L665","name":"Mathlib.Vector.traverse_def","line":662,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse_def\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">traverse_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Mathlib.Vector.cons</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> &lt;*&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\">Mathlib.Vector.traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L654-L656","name":"Mathlib.Vector.traverse","line":654,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse","doc":"Apply an applicative function to each component of a vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.traverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L627-L627","name":"Mathlib.Vector.sum_set'","line":627,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.sum_set'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.sum_set'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">sum_set'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.toList</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.sum</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">i</span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L627-L631","name":"Mathlib.Vector.prod_set'","line":627,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.prod_set'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.prod_set'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">prod_set'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.toList</span>.prod</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">i</span>)</span><a href=\"./Mathlib/Algebra/Group/Operations.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L621-L621","name":"Mathlib.Vector.sum_set","line":621,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.sum_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.sum_set\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">sum_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.toList</span>.sum</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.take\">Mathlib.Vector.take</a> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span>)</span>.toList</span>.sum</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.drop\">Mathlib.Vector.drop</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">v</span>)</span>.toList</span>.sum</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L621-L625","name":"Mathlib.Vector.prod_set","line":621,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.prod_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.prod_set\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">prod_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.toList</span>.prod</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.take\">Mathlib.Vector.take</a> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span>)</span>.toList</span>.prod</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.drop\">Mathlib.Vector.drop</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">v</span>)</span>.toList</span>.prod</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L617-L619","name":"Mathlib.Vector.get_set_eq_if","line":617,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_set_eq_if","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_set_eq_if\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_set_eq_if</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.get</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\">a</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L610-L615","name":"Mathlib.Vector.get_set_of_ne","line":610,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_set_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_set_of_ne\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_set_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.get</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L606-L608","name":"Mathlib.Vector.get_set_same","line":606,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_set_same","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_set_same\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_set_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L601-L604","name":"Mathlib.Vector.toList_set","line":601,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_set\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.set</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span>)</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L597-L599","name":"Mathlib.Vector.set","line":597,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.set","doc":"`set v n a` replaces the `n`th element of `v` with `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.set\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L590-L590","name":"Mathlib.Vector.insertNth_comm","line":590,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertNth_comm","doc":"**Alias** of `Mathlib.Vector.insertIdx_comm`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertNth_comm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">insertNth_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">j</span>.succ</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">i</span>.castSucc</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">b</span> <span class=\"fn\">j</span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L579-L588","name":"Mathlib.Vector.insertIdx_comm","line":579,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx_comm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">insertIdx_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">j</span>.succ</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">i</span>.castSucc</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">b</span> <span class=\"fn\">j</span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L577-L577","name":"Mathlib.Vector.removeNth_insertNth'","line":577,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.removeNth_insertNth'","doc":"**Alias** of `Mathlib.Vector.eraseIdx_insertIdx'`.\n\n---\n\nErasing an element after inserting an element, at different indices. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.removeNth_insertNth'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">removeNth_insertNth'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">j</span>.succAbove</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">j</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.predAbove</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L576-L576","name":"Mathlib.Vector.eraseIdx_insertNth'","line":576,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertNth'","doc":"**Alias** of `Mathlib.Vector.eraseIdx_insertIdx'`.\n\n---\n\nErasing an element after inserting an element, at different indices. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertNth'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdx_insertNth'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">j</span>.succAbove</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">j</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.predAbove</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L555-L574","name":"Mathlib.Vector.eraseIdx_insertIdx'","line":555,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertIdx'","doc":"Erasing an element after inserting an element, at different indices. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertIdx'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdx_insertIdx'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">j</span>.succAbove</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">j</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.predAbove</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L553-L553","name":"Mathlib.Vector.removeNth_insertNth","line":553,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.removeNth_insertNth","doc":"**Alias** of `Mathlib.Vector.eraseIdx_insertIdx`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.removeNth_insertNth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">removeNth_insertNth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L552-L552","name":"Mathlib.Vector.eraseIdx_insertNth","line":552,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertNth","doc":"**Alias** of `Mathlib.Vector.eraseIdx_insertIdx`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertNth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdx_insertNth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L548-L550","name":"Mathlib.Vector.eraseIdx_insertIdx","line":548,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_insertIdx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdx_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L546-L546","name":"Mathlib.Vector.removeNth_val","line":546,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.removeNth_val","doc":"**Alias** of `Mathlib.Vector.eraseIdx_val`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.removeNth_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">removeNth_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">v</span>)</span>.eraseIdx</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L545-L545","name":"Mathlib.Vector.eraseNth_val","line":545,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseNth_val","doc":"**Alias** of `Mathlib.Vector.eraseIdx_val`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseNth_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseNth_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">v</span>)</span>.eraseIdx</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L541-L543","name":"Mathlib.Vector.eraseIdx_val","line":541,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eraseIdx_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdx_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.eraseIdx\">Mathlib.Vector.eraseIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">v</span>)</span>.eraseIdx</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L539-L539","name":"Mathlib.Vector.insertNth_val","line":539,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertNth_val","doc":"**Alias** of `Mathlib.Vector.insertIdx_val`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertNth_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">insertNth_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L535-L537","name":"Mathlib.Vector.insertIdx_val","line":535,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">insertIdx_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\">Mathlib.Vector.insertIdx</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L533-L533","name":"Mathlib.Vector.insertNth","line":533,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertNth","doc":"**Alias** of `Mathlib.Vector.insertIdx`.\n\n---\n\n`v.insertIdx a i` inserts `a` into the vector `v` at position `i`\n(and shifting later components to the right). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertNth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">insertNth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L525-L531","name":"Mathlib.Vector.insertIdx","line":525,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx","doc":"`v.insertIdx a i` inserts `a` into the vector `v` at position `i`\n(and shifting later components to the right). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.insertIdx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L517-L519","name":"Mathlib.Vector.toArray","line":517,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toArray","doc":"Cast a vector to an array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toArray\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L508-L515","name":"Mathlib.Vector.casesOn₃","line":508,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.casesOn₃","doc":"Define `motive v₁ v₂ v₃` by case-analysis on `v₁ : Vector α n`, `v₂ : Vector β n`, and\n`v₃ : Vector γ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.casesOn₃\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">casesOn₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_8</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₃ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons :\n  <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} →\n    <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) →\n      <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) →\n        <span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">γ</span>) →\n          <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) →\n            <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">zs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">ys</span>)</span> <span class=\"fn\">(<span class=\"fn\">z</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">zs</span>)</span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">v₁</span> <span class=\"fn\">v₂</span> <span class=\"fn\">v₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L500-L506","name":"Mathlib.Vector.casesOn₂","line":500,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.casesOn₂","doc":"Define `motive v₁ v₂` by case-analysis on `v₁ : Vector α n` and `v₂ : Vector β n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.casesOn₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">casesOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_8</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons :\n  <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">ys</span>)</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">v₁</span> <span class=\"fn\">v₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L493-L498","name":"Mathlib.Vector.casesOn","line":493,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.casesOn","doc":"Define `motive v` by case-analysis on `v : Vector α n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.casesOn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">casesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_8</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">hd</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">tl</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L469-L491","name":"Mathlib.Vector.inductionOn₃","line":469,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn₃","doc":"Define `C u v w` by induction on a triplet of vectors\n`u : Vector α n`, `v : Vector β n`, and `w : Vector γ b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn₃\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">inductionOn₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_8</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons :\n  <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} →\n    <span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} →\n      <span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>} →\n        <span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>} →\n          <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} →\n            <span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\">{<span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">y</span>)</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">z</span>)</span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L451-L467","name":"Mathlib.Vector.inductionOn₂","line":451,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn₂","doc":"Define `C v w` by induction on a pair of vectors `v : Vector α n` and `w : Vector β n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">inductionOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_8</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons :\n  <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>} → <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">y</span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L443-L447","name":"Mathlib.Vector.inductionOn_cons","line":443,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">inductionOn_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_6</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">w</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span>.inductionOn</span> <span class=\"fn\">nil</span> <span class=\"fn\">fun {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} =&gt; <span class=\"fn\">cons</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">cons</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.inductionOn</span> <span class=\"fn\">nil</span> <span class=\"fn\">fun {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} =&gt; <span class=\"fn\">cons</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L437-L441","name":"Mathlib.Vector.inductionOn_nil","line":437,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">inductionOn_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_6</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">w</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Mathlib.Vector.nil</span>.inductionOn</span> <span class=\"fn\">nil</span> <span class=\"fn\">fun {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} =&gt; <span class=\"fn\">cons</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L418-L435","name":"Mathlib.Vector.inductionOn","line":418,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn","doc":"Define `C v` by induction on `v : Vector α n`.\n\nThis function has two arguments: `nil` handles the base case on `C nil`,\nand `cons` defines the inductive step using `∀ x : α, C w → C (x ::ᵥ w)`.\n\nIt is used as the default induction principle for the `induction` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.inductionOn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_6</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Mathlib.Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">w</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L409-L416","name":"Mathlib.Vector.mmap_cons","line":409,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mmap_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_6 → <a href=\"./foundational_types.html\">Type</a> u_7</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap\">Mathlib.Vector.mmap</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">h'</span> ← <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>\n  let <span class=\"fn\">t'</span> ← <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap\">Mathlib.Vector.mmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span></span>\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\">h'</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">t'</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L405-L407","name":"Mathlib.Vector.mmap_nil","line":405,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mmap_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_6 → <a href=\"./foundational_types.html\">Type</a> u_7</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap\">Mathlib.Vector.mmap</a> <span class=\"fn\">f</span> <span class=\"fn\">Mathlib.Vector.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L396-L403","name":"Mathlib.Vector.mmap","line":396,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap","doc":"Apply a monadic function to each component of a vector,\nreturning a vector inside the monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mmap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L389-L394","name":"Mathlib.Vector.mOfFn_pure","line":389,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mOfFn_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mOfFn_pure\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mOfFn_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_6 → <a href=\"./foundational_types.html\">Type</a> u_7</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mOfFn\">Mathlib.Vector.mOfFn</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L380-L387","name":"Mathlib.Vector.mOfFn","line":380,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mOfFn","doc":"Monadic analog of `Vector.ofFn`.\nGiven a monadic function on `Fin n`, return a `Vector α n` inside the monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mOfFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mOfFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L357-L376","name":"Mathlib.Vector.scanl_get","line":357,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_get","doc":"For an index `i : Fin n`, the nth element of `scanl` of a\nvector `v : Vector α n` at `i.succ`, is equal to the application\nfunction `f : β → α → β` of the `castSucc i` element of\n`scanl f b v` and `get v i`.\n\nThis lemma is the `get` version of `scanl_cons`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span>)</span>.get</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span>)</span>.get</span> <span class=\"fn\"><span class=\"fn\">i</span>.castSucc</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L345-L355","name":"Mathlib.Vector.scanl_head","line":345,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_head","doc":"The first element of `scanl` of a vector `v : Vector α n`,\nretrieved via `head`, is the starting value `b : β`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_head\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L336-L343","name":"Mathlib.Vector.scanl_singleton","line":336,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_singleton","doc":"The recursive step of `scanl` splits a vector made up of a single element\n`x ::ᵥ nil : Vector α 1` into a `Vector` of the provided starting value `b : β`\nand the mapped `f b x : β` as the last value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_singleton\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">v</span>.head</span></span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L329-L334","name":"Mathlib.Vector.toList_scanl","line":329,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_scanl","doc":"The `toList` of a `Vector` after a `scanl` is the `List.scanl`\nof the `toList` of the original `Vector`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_scanl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_scanl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span>)</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.scanl\">List.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">v</span>.toList</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L322-L327","name":"Mathlib.Vector.scanl_val","line":322,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_val","doc":"The underlying `List` of a `Vector` after a `scanl` is the `List.scanl`\nof the underlying `List` of the original `Vector`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.scanl\">List.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L311-L320","name":"Mathlib.Vector.scanl_cons","line":311,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_cons","doc":"The recursive step of `scanl` splits a vector `x ::ᵥ v : Vector α (n + 1)`\ninto the provided starting value `b : β` and the recursed `scanl`\n`f b x : β` as the starting value.\n\nThis lemma is the `cons` version of `scanl_get`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L306-L309","name":"Mathlib.Vector.scanl_nil","line":306,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_nil","doc":"Providing an empty vector to `scanl` gives the starting value `b : β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\">Mathlib.Vector.scanl</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">Mathlib.Vector.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L300-L304","name":"Mathlib.Vector.scanl","line":300,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl","doc":"Construct a `Vector β (n + 1)` from a `Vector α n` by scanning `f : β → α → β`\nfrom the \"left\", that is, from 0 to `Fin.last n`, using `b : β` as the starting value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.scanl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">scanl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L284-L292","name":"Mathlib.Vector.reverse_get_zero","line":284,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.reverse_get_zero","doc":"The `last` element of a vector is the `head` of the `reverse` vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.reverse_get_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse_get_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.reverse</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.last</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L280-L282","name":"Mathlib.Vector.last_def","line":280,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.last_def","doc":"The last element of a `Vector`, given that the vector is at least one element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.last_def\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">last_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.last</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L276-L278","name":"Mathlib.Vector.last","line":276,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.last","doc":"The last element of a `Vector`, given that the vector is at least one element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.last\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L272-L274","name":"Mathlib.Vector.get_cons_succ","line":272,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_cons_succ\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span>.get</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L266-L270","name":"Mathlib.Vector.get_cons_nil","line":266,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_cons_nil","doc":"Accessing the nth element of a vector made up\nof one element `x : α` is `x` itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_cons_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ix : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">Mathlib.Vector.nil</span>)</span>.get</span> <span class=\"fn\">ix</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L264-L264","name":"Mathlib.Vector.get_cons_zero","line":264,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_cons_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span>.get</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L260-L262","name":"Mathlib.Vector.head_ofFn","line":260,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head_ofFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">head_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\">f</span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L256-L258","name":"Mathlib.Vector.get_zero","line":256,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.head</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L251-L254","name":"Mathlib.Vector.reverse_reverse","line":251,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.reverse_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.reverse_reverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.reverse</span>.reverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L246-L249","name":"Mathlib.Vector.toList_reverse","line":246,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_reverse","doc":"The `List` of a vector after a `reverse`, retrieved by `toList` is equal\nto the `List.reverse` after retrieving a vector's `toList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_reverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.reverse</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.reverse</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L242-L244","name":"Mathlib.Vector.reverse","line":242,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.reverse","doc":"Reverse a vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.reverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L239-L240","name":"Mathlib.Vector.head?_toList","line":239,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head?_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head?_toList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">head?_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.head?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">v</span>.head</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L234-L237","name":"Mathlib.Vector.nodup_iff_injective_get","line":234,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.nodup_iff_injective_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.nodup_iff_injective_get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">nodup_iff_injective_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.Nodup</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">v</span>.get</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L229-L232","name":"Mathlib.Vector.map_id","line":229,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.map_id","doc":"Mapping under `id` does not change a vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.map_id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">id</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L226-L227","name":"Mathlib.Vector.not_empty_toList","line":226,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.not_empty_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.not_empty_toList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">not_empty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.isEmpty</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L221-L224","name":"Mathlib.Vector.empty_toList_eq_ff","line":221,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.empty_toList_eq_ff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.empty_toList_eq_ff\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">empty_toList_eq_ff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.isEmpty</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L214-L219","name":"Mathlib.Vector.toList_singleton","line":214,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_singleton","doc":"The list that makes up a `Vector` made up of a single element,\nretrieved via `toList`, is equal to the list of that single element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_singleton\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">v</span>.head</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L210-L212","name":"Mathlib.Vector.toList_empty","line":210,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_empty\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L202-L208","name":"Mathlib.Vector.tail_ofFn","line":202,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_ofFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">tail_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\">f</span>)</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L197-L200","name":"Mathlib.Vector.singleton_tail","line":197,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.singleton_tail","doc":"The `tail` of a vector made up of one element is `nil`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.singleton_tail\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">singleton_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L192-L195","name":"Mathlib.Vector.tail_nil","line":192,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_nil","doc":"The `tail` of a `nil` vector is `nil`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">tail_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Mathlib.Vector.nil</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L188-L190","name":"Mathlib.Vector.tail_val","line":188,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">tail_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.tail</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">v</span>)</span>.tail</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L184-L186","name":"Mathlib.Vector.get_tail_succ","line":184,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_tail_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_tail_succ\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_tail_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.tail</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L177-L182","name":"Mathlib.Vector.get_tail","line":177,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_tail\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.tail</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.get</span> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">⋯</span>⟩</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L173-L175","name":"Equiv.vectorEquivFin","line":173,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Equiv.vectorEquivFin","doc":"The natural equivalence between length-`n` vectors and functions from `Fin n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Equiv.vectorEquivFin\"><span class=\"name\">Equiv</span>.<span class=\"name\">vectorEquivFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L166-L171","name":"Mathlib.Vector.ofFn_get","line":166,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.ofFn_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.ofFn_get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">ofFn_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\"><span class=\"fn\">v</span>.get</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L160-L164","name":"Mathlib.Vector.get_ofFn","line":160,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_ofFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\">f</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L155-L158","name":"Mathlib.Vector.map₂_cons","line":155,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.map₂_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.map₂_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hd₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tl₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd₂ : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tl₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">hd₁</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">tl₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">hd₂</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">tl₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">hd₁</span> <span class=\"fn\">hd₂</span></span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">tl₁</span> <span class=\"fn\">tl₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L151-L153","name":"Mathlib.Vector.map₂_nil","line":151,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.map₂_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.map₂_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map₂\">Mathlib.Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">Mathlib.Vector.nil</span> <span class=\"fn\">Mathlib.Vector.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Mathlib.Vector.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L146-L149","name":"Mathlib.Vector.get_map","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L142-L144","name":"Mathlib.Vector.get_replicate","line":142,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_replicate\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.replicate\">Mathlib.Vector.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L138-L140","name":"Mathlib.Vector.get_eq_get","line":138,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_eq_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.get_eq_get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get_eq_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.get</span> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L132-L136","name":"Mathlib.Vector.getElem_pmap","line":132,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.getElem_pmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.getElem_pmap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">getElem_pmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">v</span>.toList</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span> <span class=\"fn\">hp</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>[<span class=\"fn\">i</span>]</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L124-L130","name":"Mathlib.Vector.tail_pmap","line":124,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_pmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_pmap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">tail_pmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">v</span>.toList</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span> <span class=\"fn\">hp</span>)</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.tail</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L116-L122","name":"Mathlib.Vector.head_pmap","line":116,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head_pmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head_pmap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">head_pmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">v</span>.toList</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span> <span class=\"fn\">hp</span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.head</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L111-L114","name":"Mathlib.Vector.toList_pmap","line":111,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_pmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_pmap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_pmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">v</span>.toList</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span> <span class=\"fn\">hp</span>)</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Attach.html#List.pmap\">List.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.toList</span> <span class=\"fn\">hp</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L106-L109","name":"Mathlib.Vector.getElem_map","line":106,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.getElem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.getElem_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">getElem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>[<span class=\"fn\">i</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L100-L104","name":"Mathlib.Vector.tail_map","line":100,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.tail_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">tail_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.tail</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L95-L98","name":"Mathlib.Vector.head_map","line":95,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.head_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">head_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.head</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L91-L93","name":"Mathlib.Vector.toList_map","line":91,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_map\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.map\">Mathlib.Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.toList</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L86-L89","name":"Mathlib.Vector.pmap_cons'","line":86,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.pmap_cons'","doc":"Opposite direction of `Vector.pmap_cons` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.pmap_cons'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">pmap_cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">v</span>.toList</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span> <span class=\"fn\">hp</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L76-L84","name":"Mathlib.Vector.pmap_cons","line":76,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.pmap_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.pmap_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">pmap_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span>.toList</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">hp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.pmap\">Mathlib.Vector.pmap</a> <span class=\"fn\">f</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L74-L74","name":"Mathlib.Vector.length_val","line":74,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.length_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.length_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">length_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">v</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L69-L71","name":"Mathlib.Vector.mk_toList","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mk_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.mk_toList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mk_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.toList</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">v</span>.toList</span>, <span class=\"fn\">h</span>⟩</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L64-L67","name":"Mathlib.Vector.toList_ofFn","line":64,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_ofFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.ofFn\">Mathlib.Vector.ofFn</a> <span class=\"fn\">f</span>)</span>.toList</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.ofFn\">List.ofFn</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L61-L62","name":"Mathlib.Vector.exists_eq_cons","line":61,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.exists_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.exists_eq_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">exists_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">as</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L58-L59","name":"Mathlib.Vector.ne_cons_iff","line":58,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.ne_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.ne_cons_iff\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">ne_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v' : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v'</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.head</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.tail</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L53-L56","name":"Mathlib.Vector.eq_cons_iff","line":53,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eq_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.eq_cons_iff\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eq_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v' : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v'</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.head</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.tail</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L49-L51","name":"Mathlib.Vector.cons_val","line":49,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.cons_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.cons_val\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">cons_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector.cons\">::ᵥ</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L45-L47","name":"Mathlib.Vector.zero_subsingleton","line":45,"kind":"instance","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.zero_subsingleton","doc":"The empty `Vector` is a `Subsingleton`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.zero_subsingleton\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">zero_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L40-L40","name":"Mathlib.Vector.ext","line":40,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.ext","doc":"Two `v w : Vector α n` are equal iff they are equal at every single index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.ext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v w : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.get</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.get</span> <span class=\"fn\">m</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L36-L37","name":"Mathlib.Vector.toList_injective","line":36,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.toList_injective\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toList_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Mathlib.Vector.toList</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L33-L34","name":"Mathlib.Vector.instInhabited","line":33,"kind":"instance","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.instInhabited\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#Mathlib.Vector\">Mathlib.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Vector/Basic.lean#L28-L29","name":"Mathlib.Vector.«term_::ᵥ_»","line":28,"kind":"def","docLink":"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.«term_::ᵥ_»","doc":"If `a : α` and `l : Vector α n`, then `cons a l`, is the vector of length `n + 1`\nwhose first element is a and with l as the rest of the list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Basic.html#Mathlib.Vector.«term_::ᵥ_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Vector</span>.<span class=\"name\">«term_::ᵥ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"}]}