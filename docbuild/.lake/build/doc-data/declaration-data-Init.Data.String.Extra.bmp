{"name":"Init.Data.String.Extra","instances":[],"imports":["Init.Data.ByteArray","Init.Data.UInt.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L217-L228","name":"String.crlfToLf.go","line":217,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.crlfToLf.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.crlfToLf.go\"><span class=\"name\">String</span>.<span class=\"name\">crlfToLf</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(text acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(accStop pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L209-L238","name":"String.crlfToLf","line":209,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.crlfToLf","doc":"Replaces each `\\r\\n` with `\\n` to normalize line endings,\nbut does not validate that there are no isolated `\\r` characters.\nIt is an optimized version of `String.replace text \"\\r\\n\" \"\\n\"`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.crlfToLf\"><span class=\"name\">String</span>.<span class=\"name\">crlfToLf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(text : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L205-L207","name":"String.removeLeadingSpaces","line":205,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.removeLeadingSpaces","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.removeLeadingSpaces\"><span class=\"name\">String</span>.<span class=\"name\">removeLeadingSpaces</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L163-L169","name":"String.Iterator.foldUntil","line":163,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.Iterator.foldUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.foldUntil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">foldUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L157-L161","name":"String.Iterator.find","line":157,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.Iterator.find","doc":"Advance the given iterator until the predicate returns true or the end of the string is reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.find\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L147-L149","name":"String.Iterator.sizeOf_next_lt_of_atEnd","line":147,"kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_next_lt_of_atEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.atEnd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\"><span class=\"fn\">i</span>.next</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L139-L141","name":"String.Iterator.sizeOf_next_lt_of_hasNext","line":139,"kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_next_lt_of_hasNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.hasNext</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\"><span class=\"fn\">i</span>.next</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L134-L137","name":"String.getUtf8Byte","line":134,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.getUtf8Byte","doc":"Accesses a byte in the UTF-8 encoding of the `String`. O(1) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.getUtf8Byte\"><span class=\"name\">String</span>.<span class=\"name\">getUtf8Byte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.utf8ByteSize</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L130-L132","name":"String.size_toUTF8","line":130,"kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.size_toUTF8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.size_toUTF8\"><span class=\"name\">String</span>.<span class=\"name\">size_toUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toUTF8</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.utf8ByteSize</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L125-L128","name":"String.toUTF8","line":125,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.toUTF8","doc":"Converts the given `String` to a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded byte array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.toUTF8\"><span class=\"name\">String</span>.<span class=\"name\">toUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L119-L123","name":"String.length_utf8EncodeChar","line":119,"kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.length_utf8EncodeChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.length_utf8EncodeChar\"><span class=\"name\">String</span>.<span class=\"name\">length_utf8EncodeChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Extra.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L102-L117","name":"String.utf8EncodeChar","line":102,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.utf8EncodeChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.utf8EncodeChar\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L97-L100","name":"String.fromUTF8!","line":97,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.fromUTF8!","doc":"Converts a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded `ByteArray` string to `String`,\nor panics if `a` is not properly UTF-8 encoded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8!\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L92-L95","name":"String.fromUTF8?","line":92,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.fromUTF8?","doc":"Converts a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded `ByteArray` string to `String`,\nor returns `none` if `a` is not properly UTF-8 encoded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8?\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L84-L88","name":"String.fromUTF8.loop","line":84,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.fromUTF8.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8.loop\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L79-L90","name":"String.fromUTF8","line":79,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.fromUTF8","doc":"Converts a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded `ByteArray` string to `String`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Extra.html#String.validateUTF8\">String.validateUTF8</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L71-L75","name":"String.validateUTF8.loop","line":71,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.validateUTF8.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.validateUTF8.loop\"><span class=\"name\">String</span>.<span class=\"name\">validateUTF8</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L66-L77","name":"String.validateUTF8","line":66,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.validateUTF8","doc":"Returns true if the given byte array consists of valid UTF-8. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.validateUTF8\"><span class=\"name\">String</span>.<span class=\"name\">validateUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L21-L64","name":"String.utf8DecodeChar?","line":21,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.utf8DecodeChar?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.utf8DecodeChar?\"><span class=\"name\">String</span>.<span class=\"name\">utf8DecodeChar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/String/Extra.lean#L12-L19","name":"String.toNat!","line":12,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.toNat!","doc":"Interpret the string as the decimal representation of a natural number.\n\nPanics if the string is not a string of digits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.toNat!\"><span class=\"name\">String</span>.<span class=\"name\">toNat!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}