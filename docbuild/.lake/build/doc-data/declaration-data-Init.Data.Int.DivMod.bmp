{"name":"Init.Data.Int.DivMod","instances":[{"typeNames":["Int"],"name":"Int.instDiv","className":"Div"},{"typeNames":["Int"],"name":"Int.instMod","className":"Mod"}],"imports":["Init.Data.Int.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L285-L298","name":"Int.bdiv","line":285,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.bdiv","doc":"Balanced division.  This returns the unique integer so that\n`b * (Int.bdiv a b) + Int.bmod a b = a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.bdiv\"><span class=\"name\">Int</span>.<span class=\"name\">bdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L270-L283","name":"Int.bmod","line":270,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.bmod","doc":"Balanced modulus.  This version of Integer modulus uses the\nbalanced rounding convention, which guarantees that\n`m/2 ≤ bmod x m < m/2` for `m ≠ 0` and `bmod x m` is congruent\nto `x` modulo `m`.\n\nIf `m = 0`, then `bmod x m = x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.bmod\"><span class=\"name\">Int</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L256-L258","name":"Int.ofNat_fdiv","line":256,"kind":"theorem","docLink":"./Init/Data/Int/DivMod.html#Int.ofNat_fdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.ofNat_fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_fdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.fdiv</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L254-L254","name":"Int.ofNat_div","line":254,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.ofNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.ofNat_div\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.tdiv</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L252-L252","name":"Int.ofNat_tdiv","line":252,"kind":"theorem","docLink":"./Init/Data/Int/DivMod.html#Int.ofNat_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.ofNat_tdiv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_tdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.tdiv</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L250-L250","name":"Int.ofNat_ediv","line":250,"kind":"theorem","docLink":"./Init/Data/Int/DivMod.html#Int.ofNat_ediv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.ofNat_ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L247-L248","name":"Int.instMod","line":247,"kind":"instance","docLink":"./Init/Data/Int/DivMod.html#Int.instMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.instMod\"><span class=\"name\">Int</span>.<span class=\"name\">instMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L241-L246","name":"Int.instDiv","line":241,"kind":"instance","docLink":"./Init/Data/Int/DivMod.html#Int.instDiv","doc":"The Div and Mod syntax uses ediv and emod for compatibility with SMTLIb and mathematical\nreasoning tends to be easier.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.instDiv\"><span class=\"name\">Int</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L211-L239","name":"Int.emod","line":211,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.emod","doc":"Integer modulus. This version of `Int.mod` uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ emod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n\nThis is the function powering the `%` notation on integers.\n\nExamples:\n```\n#eval (7 : Int) % (0 : Int) -- 7\n#eval (0 : Int) % (7 : Int) -- 0\n\n#eval (12 : Int) % (6 : Int) -- 0\n#eval (12 : Int) % (-6 : Int) -- 0\n#eval (-12 : Int) % (6 : Int) -- 0\n#eval (-12 : Int) % (-6 : Int) -- 0\n\n#eval (12 : Int) % (7 : Int) -- 5\n#eval (12 : Int) % (-7 : Int) -- 5\n#eval (-12 : Int) % (7 : Int) -- 2\n#eval (-12 : Int) % (-7 : Int) -- 2\n```\n\nImplemented by efficient native code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.emod\"><span class=\"name\">Int</span>.<span class=\"name\">emod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L178-L209","name":"Int.ediv","line":178,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.ediv","doc":"Integer division. This version of `Int.div` uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ mod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n\nThis is the function powering the `/` notation on integers.\n\nExamples:\n```\n#eval (7 : Int) / (0 : Int) -- 0\n#eval (0 : Int) / (7 : Int) -- 0\n\n#eval (12 : Int) / (6 : Int) -- 2\n#eval (12 : Int) / (-6 : Int) -- -2\n#eval (-12 : Int) / (6 : Int) -- -2\n#eval (-12 : Int) / (-6 : Int) -- 2\n\n#eval (12 : Int) / (7 : Int) -- 1\n#eval (12 : Int) / (-7 : Int) -- -1\n#eval (-12 : Int) / (7 : Int) -- -2\n#eval (-12 : Int) / (-7 : Int) -- 2\n```\n\nImplemented by efficient native code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ediv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L145-L172","name":"Int.fmod","line":145,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.fmod","doc":"Integer modulus. This version of `Int.mod` uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n\nExamples:\n\n```\n#eval (7 : Int).fmod (0 : Int) -- 7\n#eval (0 : Int).fmod (7 : Int) -- 0\n\n#eval (12 : Int).fmod (6 : Int) -- 0\n#eval (12 : Int).fmod (-6 : Int) -- 0\n#eval (-12 : Int).fmod (6 : Int) -- 0\n#eval (-12 : Int).fmod (-6 : Int) -- 0\n\n#eval (12 : Int).fmod (7 : Int) -- 5\n#eval (12 : Int).fmod (-7 : Int) -- -2\n#eval (-12 : Int).fmod (7 : Int) -- 2\n#eval (-12 : Int).fmod (-7 : Int) -- -5\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.fmod\"><span class=\"name\">Int</span>.<span class=\"name\">fmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L116-L143","name":"Int.fdiv","line":116,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.fdiv","doc":"Integer division. This version of division uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n\nExamples:\n```\n#eval (7 : Int).fdiv (0 : Int) -- 0\n#eval (0 : Int).fdiv (7 : Int) -- 0\n\n#eval (12 : Int).fdiv (6 : Int) -- 2\n#eval (12 : Int).fdiv (-6 : Int) -- -2\n#eval (-12 : Int).fdiv (6 : Int) -- -2\n#eval (-12 : Int).fdiv (-6 : Int) -- 2\n\n#eval (12 : Int).fdiv (7 : Int) -- 1\n#eval (12 : Int).fdiv (-7 : Int) -- -2\n#eval (-12 : Int).fdiv (7 : Int) -- -2\n#eval (-12 : Int).fdiv (-7 : Int) -- 1\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">fdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L110-L110","name":"Int.mod","line":110,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.mod\"><span class=\"name\">Int</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L76-L108","name":"Int.tmod","line":76,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.tmod","doc":"Integer modulo. This function uses the\n[*\"T-rounding\"*][t-rounding] (**T**runcation-rounding) convention\nto pair with `Int.tdiv`, meaning that `tmod a b + b * (tdiv a b) = a`\nunconditionally (see [`Int.tmod_add_tdiv`][theo tmod_add_tdiv]). In\nparticular, `a % 0 = a`.\n\n[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n[theo tmod_add_tdiv]: https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.tmod_add_tdiv#doc\n\nExamples:\n\n```\n#eval (7 : Int).tmod (0 : Int) -- 7\n#eval (0 : Int).tmod (7 : Int) -- 0\n\n#eval (12 : Int).tmod (6 : Int) -- 0\n#eval (12 : Int).tmod (-6 : Int) -- 0\n#eval (-12 : Int).tmod (6 : Int) -- 0\n#eval (-12 : Int).tmod (-6 : Int) -- 0\n\n#eval (12 : Int).tmod (7 : Int) -- 5\n#eval (12 : Int).tmod (-7 : Int) -- 5\n#eval (-12 : Int).tmod (7 : Int) -- -5\n#eval (-12 : Int).tmod (-7 : Int) -- -5\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.tmod\"><span class=\"name\">Int</span>.<span class=\"name\">tmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L74-L74","name":"Int.div","line":74,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.div\"><span class=\"name\">Int</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Init/Data/Int/DivMod.lean#L36-L72","name":"Int.tdiv","line":36,"kind":"def","docLink":"./Init/Data/Int/DivMod.html#Int.tdiv","doc":"`tdiv` uses the [*\"T-rounding\"*][t-rounding]\n(**T**runcation-rounding) convention, meaning that it rounds toward\nzero. Also note that division by zero is defined to equal zero.\n\n  The relation between integer division and modulo is found in\n  `Int.tmod_add_tdiv` which states that\n  `tmod a b + b * (tdiv a b) = a`, unconditionally.\n\n  [t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n  [theo tmod_add_tdiv]: https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.tmod_add_tdiv#doc\n\n  Examples:\n\n  ```\n  #eval (7 : Int).tdiv (0 : Int) -- 0\n  #eval (0 : Int).tdiv (7 : Int) -- 0\n\n  #eval (12 : Int).tdiv (6 : Int) -- 2\n  #eval (12 : Int).tdiv (-6 : Int) -- -2\n  #eval (-12 : Int).tdiv (6 : Int) -- -2\n  #eval (-12 : Int).tdiv (-6 : Int) -- 2\n\n  #eval (12 : Int).tdiv (7 : Int) -- 1\n  #eval (12 : Int).tdiv (-7 : Int) -- -1\n  #eval (-12 : Int).tdiv (7 : Int) -- -1\n  #eval (-12 : Int).tdiv (-7 : Int) -- 1\n  ```\n\n  Implemented by efficient native code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod.html#Int.tdiv\"><span class=\"name\">Int</span>.<span class=\"name\">tdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"}]}