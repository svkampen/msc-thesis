{"name":"Mathlib.Data.Matrix.Notation","instances":[{"typeNames":["Matrix"],"name":"Matrix.repr","className":"Repr"}],"imports":["Init","Mathlib.Algebra.Group.Fin.Tuple","Mathlib.Data.Matrix.RowCol","Mathlib.Data.Fin.VecNotation","Mathlib.Tactic.FinCases","Mathlib.Algebra.BigOperators.Fin"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L502-L504","name":"Matrix.vec3_dotProduct","line":502,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_dotProduct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_dotProduct\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec3_dotProduct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">0</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">1</span></span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">2</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L497-L500","name":"Matrix.vec3_dotProduct'","line":497,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_dotProduct'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_dotProduct'\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec3_dotProduct'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₀ a₁ a₂ b₀ b₁ b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>, <span class=\"fn\">a₂</span>]</span> <span class=\"fn\">![<span class=\"fn\">b₀</span>, <span class=\"fn\">b₁</span>, <span class=\"fn\">b₂</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₀</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₀</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L493-L495","name":"Matrix.vec2_dotProduct","line":493,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_dotProduct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_dotProduct\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec2_dotProduct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">0</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">w</span> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L490-L491","name":"Matrix.vec2_dotProduct'","line":490,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_dotProduct'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_dotProduct'\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec2_dotProduct'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₀ a₁ b₀ b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>]</span> <span class=\"fn\">![<span class=\"fn\">b₀</span>, <span class=\"fn\">b₁</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₀</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₀</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L484-L486","name":"Matrix.smul_vec3","line":484,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_vec3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_vec3\"><span class=\"name\">Matrix</span>.<span class=\"name\">smul_vec3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₀ a₁ a₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>, <span class=\"fn\">a₂</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">a₀</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">a₁</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">a₂</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L481-L482","name":"Matrix.smul_vec2","line":481,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_vec2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_vec2\"><span class=\"name\">Matrix</span>.<span class=\"name\">smul_vec2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Operations.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₀ a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">a₀</span></span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">a₁</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L477-L479","name":"Matrix.vec3_add","line":477,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_add\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec3_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a₀ a₁ a₂ b₀ b₁ b₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>, <span class=\"fn\">a₂</span>]</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">![<span class=\"fn\">b₀</span>, <span class=\"fn\">b₁</span>, <span class=\"fn\">b₂</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\"><span class=\"fn\">a₀</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₀</span></span>, <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span>, <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L474-L475","name":"Matrix.vec2_add","line":474,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_add\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec2_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a₀ a₁ b₀ b₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>]</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">![<span class=\"fn\">b₀</span>, <span class=\"fn\">b₁</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\"><span class=\"fn\">a₀</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₀</span></span>, <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L469-L472","name":"Matrix.vec3_eq","line":469,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec3_eq\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec3_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₀ a₁ a₂ b₀ b₁ b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">a₀</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₀</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>, <span class=\"fn\">a₂</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\">b₀</span>, <span class=\"fn\">b₁</span>, <span class=\"fn\">b₂</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L465-L467","name":"Matrix.vec2_eq","line":465,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vec2_eq\"><span class=\"name\">Matrix</span>.<span class=\"name\">vec2_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₀ a₁ b₀ b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">a₀</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₀</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">![<span class=\"fn\">a₀</span>, <span class=\"fn\">a₁</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![<span class=\"fn\">b₀</span>, <span class=\"fn\">b₁</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L451-L463","name":"Matrix.mul_fin_three","line":451,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_fin_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_fin_three\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_fin_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a₁₁ a₁₂ a₁₃ a₂₁ a₂₂ a₂₃ a₃₁ a₃₂ a₃₃ b₁₁ b₁₂ b₁₃ b₂₁ b₂₂ b₂₃ b₃₁ b₃₂ b₃₃ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">!![<span class=\"fn\">a₁₁</span>, <span class=\"fn\">a₁₂</span>, <span class=\"fn\">a₁₃</span>; <span class=\"fn\">a₂₁</span>, <span class=\"fn\">a₂₂</span>, <span class=\"fn\">a₂₃</span>; <span class=\"fn\">a₃₁</span>, <span class=\"fn\">a₃₂</span>, <span class=\"fn\">a₃₃</span>]</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">!![<span class=\"fn\">b₁₁</span>, <span class=\"fn\">b₁₂</span>, <span class=\"fn\">b₁₃</span>; <span class=\"fn\">b₂₁</span>, <span class=\"fn\">b₂₂</span>, <span class=\"fn\">b₂₃</span>; <span class=\"fn\">b₃₁</span>, <span class=\"fn\">b₃₂</span>, <span class=\"fn\">b₃₃</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">!![<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₁</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₁</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₂</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₂</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₃</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₃</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₃</span></span></span>;\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₁</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₁</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₂</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₂</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₃</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₃</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₃</span></span></span>;\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₃₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₃₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₁</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₃₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₁</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₃₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₃₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₂</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₃₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₂</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₃₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₃</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₃₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₃</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₃₃</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₃₃</span></span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L443-L449","name":"Matrix.mul_fin_two","line":443,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_fin_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_fin_two\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_fin_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a₁₁ a₁₂ a₂₁ a₂₂ b₁₁ b₁₂ b₂₁ b₂₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">!![<span class=\"fn\">a₁₁</span>, <span class=\"fn\">a₁₂</span>; <span class=\"fn\">a₂₁</span>, <span class=\"fn\">a₂₂</span>]</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">!![<span class=\"fn\">b₁₁</span>, <span class=\"fn\">b₁₂</span>; <span class=\"fn\">b₂₁</span>, <span class=\"fn\">b₂₂</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">!![<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₁</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₁₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₂</span></span></span>; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₁</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₁₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">a₂₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂₂</span></span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L436-L441","name":"Matrix.eta_fin_three","line":436,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.eta_fin_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.eta_fin_three\"><span class=\"name\">Matrix</span>.<span class=\"name\">eta_fin_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">0</span> <span class=\"fn\">2</span></span>; <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">1</span> <span class=\"fn\">0</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">1</span> <span class=\"fn\">1</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>; <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">2</span> <span class=\"fn\">0</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">2</span> <span class=\"fn\">1</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">2</span> <span class=\"fn\">2</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L432-L434","name":"Matrix.eta_fin_two","line":432,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.eta_fin_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.eta_fin_two\"><span class=\"name\">Matrix</span>.<span class=\"name\">eta_fin_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>; <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">1</span> <span class=\"fn\">0</span></span>, <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">1</span> <span class=\"fn\">1</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L425-L428","name":"Matrix.ofNat_fin_three","line":425,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.ofNat_fin_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.ofNat_fin_three\"><span class=\"name\">Matrix</span>.<span class=\"name\">ofNat_fin_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne\">AddMonoidWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">n</span>.AtLeastTwo</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">0</span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L419-L422","name":"Matrix.ofNat_fin_two","line":419,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.ofNat_fin_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.ofNat_fin_two\"><span class=\"name\">Matrix</span>.<span class=\"name\">ofNat_fin_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne\">AddMonoidWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">n</span>.AtLeastTwo</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L413-L416","name":"Matrix.natCast_fin_three","line":413,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.natCast_fin_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.natCast_fin_three\"><span class=\"name\">Matrix</span>.<span class=\"name\">natCast_fin_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne\">AddMonoidWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\">↑<span class=\"fn\">n</span></span>, <span class=\"fn\">0</span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">↑<span class=\"fn\">n</span></span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">0</span>, <span class=\"fn\">↑<span class=\"fn\">n</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L409-L411","name":"Matrix.natCast_fin_two","line":409,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.natCast_fin_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.natCast_fin_two\"><span class=\"name\">Matrix</span>.<span class=\"name\">natCast_fin_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne\">AddMonoidWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\">↑<span class=\"fn\">n</span></span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">↑<span class=\"fn\">n</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L400-L402","name":"Matrix.one_fin_three","line":400,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.one_fin_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.one_fin_three\"><span class=\"name\">Matrix</span>.<span class=\"name\">one_fin_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\">1</span>, <span class=\"fn\">0</span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">1</span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">0</span>, <span class=\"fn\">1</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L396-L398","name":"Matrix.one_fin_two","line":396,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.one_fin_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.one_fin_two\"><span class=\"name\">Matrix</span>.<span class=\"name\">one_fin_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">!![<span class=\"fn\">1</span>, <span class=\"fn\">0</span>; <span class=\"fn\">0</span>, <span class=\"fn\">1</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L382-L386","name":"Matrix.submatrix_updateColumn_succAbove","line":382,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_updateColumn_succAbove","doc":"Updating a column then removing it is the same as removing it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_updateColumn_succAbove\"><span class=\"name\">Matrix</span>.<span class=\"name\">submatrix_updateColumn_succAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">m'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">m'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.updateColumn</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span>.submatrix</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.succAbove</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.submatrix</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.succAbove</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L376-L380","name":"Matrix.submatrix_updateRow_succAbove","line":376,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_updateRow_succAbove","doc":"Updating a row then removing it is the same as removing it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_updateRow_succAbove\"><span class=\"name\">Matrix</span>.<span class=\"name\">submatrix_updateRow_succAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span>)</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">n'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.updateRow</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span>)</span>.submatrix</span> <span class=\"fn\"><span class=\"fn\">i</span>.succAbove</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.submatrix</span> <span class=\"fn\"><span class=\"fn\">i</span>.succAbove</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L370-L374","name":"Matrix.submatrix_cons_row","line":370,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_cons_row","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_cons_row\"><span class=\"name\">Matrix</span>.<span class=\"name\">submatrix_cons_row</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(row : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\">m'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(col : <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">n'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.submatrix</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">i</span> <span class=\"fn\">row</span>)</span> <span class=\"fn\">col</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(fun (<span class=\"fn\">j</span> : <span class=\"fn\">o'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">col</span> <span class=\"fn\">j</span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.submatrix</span> <span class=\"fn\">row</span> <span class=\"fn\">col</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L365-L368","name":"Matrix.submatrix_empty","line":365,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.submatrix_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">submatrix_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(row : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">m'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(col : <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">n'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.submatrix</span> <span class=\"fn\">row</span> <span class=\"fn\">col</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L356-L359","name":"Matrix.smul_mat_cons","line":356,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_mat_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_mat_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">smul_mat_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">v</span> <span class=\"fn\">A</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">A</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L353-L354","name":"Matrix.smul_mat_empty","line":353,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_mat_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.smul_mat_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">smul_mat_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">m'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L343-L345","name":"Matrix.vecMulVec_cons","line":343,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMulVec_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMulVec_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">vecMulVec_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">m'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMulVec\">Matrix.vecMulVec</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">w</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">m'</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">w</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L337-L341","name":"Matrix.cons_vecMulVec","line":337,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_vecMulVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_vecMulVec\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_vecMulVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMulVec\">Matrix.vecMulVec</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">w</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMulVec\">Matrix.vecMulVec</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L333-L335","name":"Matrix.vecMulVec_empty","line":333,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMulVec_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMulVec_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">vecMulVec_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">m'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMulVec\">Matrix.vecMulVec</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">m'</span>) =&gt; <span class=\"fn\">![]</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L329-L331","name":"Matrix.empty_vecMulVec","line":329,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_vecMulVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_vecMulVec\"><span class=\"name\">Matrix</span>.<span class=\"name\">empty_vecMulVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMulVec\">Matrix.vecMulVec</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L317-L321","name":"Matrix.mulVec_cons","line":317,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.mulVec_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.mulVec_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">mulVec_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">m'</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">A</span>)</span>.mulVec</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">Matrix.vecHead</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">A</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<span class=\"fn\">Matrix.vecTail</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">A</span>)</span>)</span>.mulVec</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L311-L315","name":"Matrix.cons_mulVec","line":311,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_mulVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_mulVec\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_mulVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">v</span> <span class=\"fn\">A</span>)</span>)</span>.mulVec</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">A</span>)</span>.mulVec</span> <span class=\"fn\">w</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L307-L309","name":"Matrix.mulVec_empty","line":307,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.mulVec_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.mulVec_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">mulVec_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.mulVec</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L303-L305","name":"Matrix.empty_mulVec","line":303,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_mulVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_mulVec\"><span class=\"name\">Matrix</span>.<span class=\"name\">empty_mulVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.mulVec</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L294-L295","name":"Matrix.cons_vecMul_cons","line":294,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_vecMul_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_vecMul_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_vecMul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">w</span> <span class=\"fn\">B</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">B</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L288-L292","name":"Matrix.vecMul_cons","line":288,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMul_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMul_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">vecMul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">w</span> <span class=\"fn\">B</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">v</span></span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">B</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L282-L286","name":"Matrix.cons_vecMul","line":282,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_vecMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_vecMul\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_vecMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\"><span class=\"fn\">o'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">B</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Operations.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">B</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">B</span>)</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L278-L280","name":"Matrix.vecMul_empty","line":278,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMul_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.vecMul_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">vecMul_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L274-L276","name":"Matrix.empty_vecMul","line":274,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_vecMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_vecMul\"><span class=\"name\">Matrix</span>.<span class=\"name\">empty_vecMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">o'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L260-L266","name":"Matrix.cons_mul","line":260,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_mul\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n'</span> <span class=\"fn\">o'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">v</span> <span class=\"fn\">A</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Matrix.of</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span>)</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L256-L258","name":"Matrix.mul_val_succ","line":256,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_val_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_val_succ\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_val_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span>)</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n'</span> <span class=\"fn\">o'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">o'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Matrix.of</span>.symm</span> <span class=\"fn\">A</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L251-L254","name":"Matrix.mul_empty","line":251,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.mul_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">m'</span>) =&gt; <span class=\"fn\">![]</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L247-L249","name":"Matrix.empty_mul_empty","line":247,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_mul_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_mul_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">empty_mul_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">o'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L243-L245","name":"Matrix.empty_mul","line":243,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.empty_mul\"><span class=\"name\">Matrix</span>.<span class=\"name\">empty_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o' : <a href=\"./foundational_types.html\">Type</a> uₒ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalNonAssocSemiring\">NonUnitalNonAssocSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n'</span> <span class=\"fn\">o'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">![]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L232-L235","name":"Matrix.tail_transpose","line":232,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.tail_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.tail_transpose\"><span class=\"name\">Matrix</span>.<span class=\"name\">tail_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Matrix.of</span>.symm</span> <span class=\"fn\"><span class=\"fn\">A</span>.transpose</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\">Matrix.vecTail</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">A</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L227-L230","name":"Matrix.head_transpose","line":227,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.head_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.head_transpose\"><span class=\"name\">Matrix</span>.<span class=\"name\">head_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Matrix.of</span>.symm</span> <span class=\"fn\"><span class=\"fn\">A</span>.transpose</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.vecHead</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Matrix.of</span>.symm</span> <span class=\"fn\">A</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L221-L225","name":"Matrix.cons_transpose","line":221,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_transpose\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">n'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">v</span> <span class=\"fn\">A</span>)</span>)</span>.transpose</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">n'</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.transpose</span> <span class=\"fn\">i</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L217-L219","name":"Matrix.transpose_empty_cols","line":217,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.transpose_empty_cols","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.transpose_empty_cols\"><span class=\"name\">Matrix</span>.<span class=\"name\">transpose_empty_cols</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">m'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.transpose</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">m'</span>) =&gt; <span class=\"fn\">![]</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L213-L215","name":"Matrix.transpose_empty_rows","line":213,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.transpose_empty_rows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.transpose_empty_rows\"><span class=\"name\">Matrix</span>.<span class=\"name\">transpose_empty_rows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <a href=\"./foundational_types.html\">Type</a> uₘ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.transpose</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">![]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L205-L207","name":"Matrix.row_cons","line":205,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.row_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.row_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">row_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/RowCol.html#Matrix.row\">Matrix.row</a> <span class=\"fn\">ι</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">u</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">u</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L202-L203","name":"Matrix.row_empty","line":202,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.row_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.row_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">row_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/RowCol.html#Matrix.row\">Matrix.row</a> <span class=\"fn\">ι</span> <span class=\"fn\">![]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">![]</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L196-L200","name":"Matrix.col_cons","line":196,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.col_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.col_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">col_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/RowCol.html#Matrix.col\">Matrix.col</a> <span class=\"fn\">ι</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">u</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Matrix.of</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/RowCol.html#Matrix.col\">Matrix.col</a> <span class=\"fn\">ι</span> <span class=\"fn\">u</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L192-L194","name":"Matrix.col_empty","line":192,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.col_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.col_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">col_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/RowCol.html#Matrix.col\">Matrix.col</a> <span class=\"fn\">ι</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">![]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L183-L184","name":"Matrix.cons_dotProduct_cons","line":183,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_dotProduct_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_dotProduct_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_dotProduct_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">y</span> <span class=\"fn\">w</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L178-L181","name":"Matrix.dotProduct_cons","line":178,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.dotProduct_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.dotProduct_cons\"><span class=\"name\">Matrix</span>.<span class=\"name\">dotProduct_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">w</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L173-L176","name":"Matrix.cons_dotProduct","line":173,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_dotProduct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_dotProduct\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_dotProduct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">w</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">w</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L169-L171","name":"Matrix.dotProduct_empty","line":169,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.dotProduct_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.dotProduct_empty\"><span class=\"name\">Matrix</span>.<span class=\"name\">dotProduct_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.dotProduct\">Matrix.dotProduct</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L161-L163","name":"Matrix.tail_val'","line":161,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.tail_val'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.tail_val'\"><span class=\"name\">Matrix</span>.<span class=\"name\">tail_val'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span></span> → <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecTail\">Matrix.vecTail</a> <span class=\"fn\">B</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L157-L159","name":"Matrix.head_val'","line":157,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.head_val'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.head_val'\"><span class=\"name\">Matrix</span>.<span class=\"name\">head_val'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span></span> → <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecHead\">Matrix.vecHead</a> <span class=\"fn\">B</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L153-L155","name":"Matrix.cons_val'","line":153,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_val'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.cons_val'\"><span class=\"name\">Matrix</span>.<span class=\"name\">cons_val'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./foundational_types.html\">Type</a> uₙ}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">n'</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">m</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">v</span> <span class=\"fn\">B</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">Matrix.vecCons</a> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L138-L151","name":"Matrix.repr","line":138,"kind":"instance","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.repr","doc":"Use `![...]` notation for displaying a `Fin`-indexed matrix, for example:\n\n```\n#eval !![1, 2; 3, 4] + !![3, 4; 5, 6]  -- !![4, 6; 8, 10]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.repr\"><span class=\"name\">Matrix</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L113-L132","name":"Matrix.delabMatrixNotation","line":113,"kind":"def","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.delabMatrixNotation","doc":"Delaborator for the `!![]` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.delabMatrixNotation\"><span class=\"name\">Matrix</span>.<span class=\"name\">delabMatrixNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L93-L94","name":"Matrix.matrixNotation0xC","line":93,"kind":"def","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.matrixNotation0xC","doc":"Notation for m×n matrices, aka `Matrix (Fin m) (Fin n) α`.\n\nFor instance:\n* `!![a, b, c; d, e, f]` is the matrix with two rows and three columns, of type\n  `Matrix (Fin 2) (Fin 3) α`\n* `!![a, b, c]` is a row vector of type `Matrix (Fin 1) (Fin 3) α` (see also `Matrix.row`).\n* `!![a; b; c]` is a column vector of type `Matrix (Fin 3) (Fin 1) α` (see also `Matrix.col`).\n\nThis notation implements some special cases:\n\n* `![,,]`, with `n` `,`s, is a term of type `Matrix (Fin 0) (Fin n) α`\n* `![;;]`, with `m` `;`s, is a term of type `Matrix (Fin m) (Fin 0) α`\n* `![]` is the 0×0 matrix\n\nNote that vector notation is provided elsewhere (by `Matrix.vecNotation`) as `![a, b, c]`.\nUnder the hood, `!![a, b, c; d, e, f]` is syntax for `Matrix.of ![![a, b, c], ![d, e, f]]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.matrixNotation0xC\"><span class=\"name\">Matrix</span>.<span class=\"name\">matrixNotation0xC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L91-L92","name":"Matrix.matrixNotationRx0","line":91,"kind":"def","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.matrixNotationRx0","doc":"Notation for m×n matrices, aka `Matrix (Fin m) (Fin n) α`.\n\nFor instance:\n* `!![a, b, c; d, e, f]` is the matrix with two rows and three columns, of type\n  `Matrix (Fin 2) (Fin 3) α`\n* `!![a, b, c]` is a row vector of type `Matrix (Fin 1) (Fin 3) α` (see also `Matrix.row`).\n* `!![a; b; c]` is a column vector of type `Matrix (Fin 3) (Fin 1) α` (see also `Matrix.col`).\n\nThis notation implements some special cases:\n\n* `![,,]`, with `n` `,`s, is a term of type `Matrix (Fin 0) (Fin n) α`\n* `![;;]`, with `m` `;`s, is a term of type `Matrix (Fin m) (Fin 0) α`\n* `![]` is the 0×0 matrix\n\nNote that vector notation is provided elsewhere (by `Matrix.vecNotation`) as `![a, b, c]`.\nUnder the hood, `!![a, b, c; d, e, f]` is syntax for `Matrix.of ![![a, b, c], ![d, e, f]]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.matrixNotationRx0\"><span class=\"name\">Matrix</span>.<span class=\"name\">matrixNotationRx0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/Data/Matrix/Notation.lean#L71-L89","name":"Matrix.matrixNotation","line":71,"kind":"def","docLink":"./Mathlib/Data/Matrix/Notation.html#Matrix.matrixNotation","doc":"Notation for m×n matrices, aka `Matrix (Fin m) (Fin n) α`.\n\nFor instance:\n* `!![a, b, c; d, e, f]` is the matrix with two rows and three columns, of type\n  `Matrix (Fin 2) (Fin 3) α`\n* `!![a, b, c]` is a row vector of type `Matrix (Fin 1) (Fin 3) α` (see also `Matrix.row`).\n* `!![a; b; c]` is a column vector of type `Matrix (Fin 3) (Fin 1) α` (see also `Matrix.col`).\n\nThis notation implements some special cases:\n\n* `![,,]`, with `n` `,`s, is a term of type `Matrix (Fin 0) (Fin n) α`\n* `![;;]`, with `m` `;`s, is a term of type `Matrix (Fin m) (Fin 0) α`\n* `![]` is the 0×0 matrix\n\nNote that vector notation is provided elsewhere (by `Matrix.vecNotation`) as `![a, b, c]`.\nUnder the hood, `!![a, b, c; d, e, f]` is syntax for `Matrix.of ![![a, b, c], ![d, e, f]]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/Notation.html#Matrix.matrixNotation\"><span class=\"name\">Matrix</span>.<span class=\"name\">matrixNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}