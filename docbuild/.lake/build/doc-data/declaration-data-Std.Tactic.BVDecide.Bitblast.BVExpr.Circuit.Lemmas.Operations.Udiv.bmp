{"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Udiv","instances":[],"imports":["Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Basic","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Const","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Sub","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.ZeroExtend","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Eq","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.Ult","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.GetLsbD","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Operations.Udiv","Std.Tactic.BVDecide.Normalize.BitVec"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L394-L487","name":"Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastUdiv","line":394,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastUdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastUdiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">denote_blastUdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.BinaryRefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.rhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">rhs</span>)</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L376-L390","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go_denote_mem_prefix","line":376,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go_denote_mem_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go_denote_mem_prefix\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">go_denote_mem_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstart : <span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">curr</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">hstart</span> }</span> }</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L347-L374","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_go","line":347,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_go\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfalse : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">falseRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(htrue : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">trueRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hzero : <span class=\"fn\"><span class=\"fn\">0#<span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">w</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">w</span> <span class=\"fn\">0</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">w</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">w</span> <span class=\"fn\">0</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.q</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">rhs</span>)</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L251-L345","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_go_eq_divRec_q","line":251,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_go_eq_divRec_q","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_go_eq_divRec_q\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_go_eq_divRec_q</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs rbv qbv : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qbv</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rbv</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfalse : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">falseRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(htrue : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">trueRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">curr</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> :=\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.go</a> <span class=\"fn\">aig</span> <span class=\"fn\">curr</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.q</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">BitVec.divRec</a> <span class=\"fn\">curr</span> <span class=\"fn\">{ <span class=\"fn\">n</span> := <span class=\"fn\">lhs</span>, <span class=\"fn\">d</span> := <span class=\"fn\">rhs</span> }</span> <span class=\"fn\">{ <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\">qbv</span>, <span class=\"fn\">r</span> := <span class=\"fn\">rbv</span> }</span>)</span>.q</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L239-L249","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_wr","line":239,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_wr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_wr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_blastDivSubtractShift_wr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(qbv rbv : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.wr</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\">BitVec.divSubtractShift</a> <span class=\"fn\">{ <span class=\"fn\">n</span> := <span class=\"fn\">lhs</span>, <span class=\"fn\">d</span> := <span class=\"fn\">rhs</span> }</span> <span class=\"fn\">{ <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\">qbv</span>, <span class=\"fn\">r</span> := <span class=\"fn\">rbv</span> }</span>)</span>.wr</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L227-L237","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_wn","line":227,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_wn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_wn\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_blastDivSubtractShift_wn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(qbv rbv : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.wn</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\">BitVec.divSubtractShift</a> <span class=\"fn\">{ <span class=\"fn\">n</span> := <span class=\"fn\">lhs</span>, <span class=\"fn\">d</span> := <span class=\"fn\">rhs</span> }</span> <span class=\"fn\">{ <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\">qbv</span>, <span class=\"fn\">r</span> := <span class=\"fn\">rbv</span> }</span>)</span>.wn</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L151-L225","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_r","line":151,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_r","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_r\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_blastDivSubtractShift_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(qbv rbv : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rbv</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfalse : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">falseRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{\n      <span class=\"fn\">aig</span> :=\n        <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> :=\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.r</span>.get</span>\n          <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\">BitVec.divSubtractShift</a> <span class=\"fn\">{ <span class=\"fn\">n</span> := <span class=\"fn\">lhs</span>, <span class=\"fn\">d</span> := <span class=\"fn\">rhs</span> }</span> <span class=\"fn\">{ <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\">qbv</span>, <span class=\"fn\">r</span> := <span class=\"fn\">rbv</span> }</span>)</span>.r</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L75-L149","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_q","line":75,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_q","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastDivSubtractShift_q\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_blastDivSubtractShift_q</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(qbv rbv : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hleft : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hright : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qbv</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rbv</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfalse : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">falseRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(htrue : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">trueRef</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{\n      <span class=\"fn\">aig</span> :=\n        <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> :=\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.q</span>.get</span>\n          <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\">BitVec.divSubtractShift</a> <span class=\"fn\">{ <span class=\"fn\">n</span> := <span class=\"fn\">lhs</span>, <span class=\"fn\">d</span> := <span class=\"fn\">rhs</span> }</span> <span class=\"fn\">{ <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\">qbv</span>, <span class=\"fn\">r</span> := <span class=\"fn\">rbv</span> }</span>)</span>.q</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L59-L73","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift_denote_mem_prefix","line":59,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift_denote_mem_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift_denote_mem_prefix\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">blastDivSubtractShift_denote_mem_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(falseRef trueRef : <span class=\"fn\"><span class=\"fn\">aig</span>.Ref</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n d q r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(wn wr start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstart : <span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.decls</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{\n      <span class=\"fn\">aig</span> :=\n        <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastDivSubtractShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">falseRef</span> <span class=\"fn\">trueRef</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span> <span class=\"fn\">wn</span> <span class=\"fn\">wr</span> <span class=\"fn\">q</span> <span class=\"fn\">r</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> }</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\">{ <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">hstart</span> }</span> }</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L48-L57","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastShiftConcat_eq_shiftConcat","line":48,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastShiftConcat_eq_shiftConcat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastShiftConcat_eq_shiftConcat\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_blastShiftConcat_eq_shiftConcat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.ShiftConcatInput\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.ShiftConcatInput</a> <span class=\"fn\">aig</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.lhs</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">target</span>.bit</span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.shiftConcat</span> <span class=\"fn\">b</span>)</span>.getLsbD</span> <span class=\"fn\">idx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.lean#L33-L46","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastShiftConcat","line":33,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastShiftConcat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.denote_blastShiftConcat\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastUdiv</span>.<span class=\"name\">denote_blastShiftConcat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.ShiftConcatInput\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.ShiftConcatInput</a> <span class=\"fn\">aig</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Udiv.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat\">Std.Tactic.BVDecide.BVExpr.bitblast.blastUdiv.blastShiftConcat</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\">target</span>.bit</span> }</span>⟧</span>\n  else <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.lhs</span>.get</span> <span class=\"fn\">(<span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span> }</span>⟧</span></span></span></div></div>"}]}