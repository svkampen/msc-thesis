{"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.RotateRight","instances":[],"imports":["Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Basic","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Operations.RotateRight"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.lean#L91-L111","name":"Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastRotateRight","line":91,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastRotateRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastRotateRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">denote_blastRotateRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.ShiftTarget</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assign : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">assign</span>,\n    <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight\">Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.aig</span>,\n      <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight\">Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.vec</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> }</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if hidx2 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.distance</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">w</span></span></span></span> then\n    <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.vec</span>.get</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.distance</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">idx</span>)</span> <span class=\"fn\">⋯</span></span> }</span>⟧</span>\n  else <span class=\"fn\">⟦<span class=\"fn\">assign</span>, <span class=\"fn\">{ <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.vec</span>.get</span> <span class=\"fn\">(<span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.distance</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">w</span></span>)</span>)</span> <span class=\"fn\">⋯</span></span> }</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.lean#L49-L87","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go_get","line":49,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go_get\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastRotateRight</span>.<span class=\"name\">go_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distance : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx1 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">idx</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go</a> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">if hidx3 : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">distance</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">w</span></span></span></span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.get</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">distance</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">idx</span>)</span> <span class=\"fn\">⋯</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.get</span> <span class=\"fn\">(<span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">(<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">distance</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">w</span></span>)</span>)</span> <span class=\"fn\">⋯</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/410fab7284703f41660ca2454218dcca9b2ec896/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.lean#L27-L47","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go_get_aux","line":27,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go_get_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go_get_aux\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastRotateRight</span>.<span class=\"name\">go_get_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aig : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Std.Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distance : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcurr : <span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.RefVec</span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hidx : <span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/RotateRight.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go\">Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight.go</a> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span></span></div></div>"}]}