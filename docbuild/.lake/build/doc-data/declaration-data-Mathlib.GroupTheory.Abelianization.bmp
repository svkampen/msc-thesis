{"name":"Mathlib.GroupTheory.Abelianization","instances":[{"typeNames":["commutator"],"name":"instNormalCommutator","className":"Subgroup.Normal"},{"typeNames":["commutator"],"name":"commutator_characteristic","className":"Subgroup.Characteristic"},{"typeNames":["Subtype"],"name":"instFGSubtypeMemSubgroupCommutatorOfFiniteElemCommutatorSet","className":"Group.FG"},{"typeNames":["Abelianization"],"name":"Abelianization.commGroup","className":"CommGroup"},{"typeNames":["Abelianization"],"name":"Abelianization.instInhabited","className":"Inhabited"},{"typeNames":["Abelianization"],"name":"Abelianization.instUnique","className":"Unique"},{"typeNames":["Abelianization"],"name":"Abelianization.instFintypeOfDecidablePredMemSubgroupCommutator","className":"Fintype"},{"typeNames":["Abelianization"],"name":"Abelianization.instFinite","className":"Finite"},{"typeNames":["Set.Elem"],"name":"instFiniteElemProdCommutatorRepresentativesOfCommutatorSet","className":"Finite"},{"typeNames":["Subtype"],"name":"closureCommutatorRepresentatives_fg","className":"Group.FG"},{"typeNames":["Set.Elem"],"name":"instFiniteElemSubtypeMemSubgroupClosureCommutatorRepresentativesCommutatorSet","className":"Finite"}],"imports":["Init","Mathlib.Data.Finite.Card","Mathlib.Data.Finite.Prod","Mathlib.GroupTheory.Commutator.Basic","Mathlib.GroupTheory.Coset.Basic","Mathlib.GroupTheory.Finiteness"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L293-L297","name":"instFiniteElemSubtypeMemSubgroupClosureCommutatorRepresentativesCommutatorSet","line":293,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#instFiniteElemSubtypeMemSubgroupClosureCommutatorRepresentativesCommutatorSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#instFiniteElemSubtypeMemSubgroupClosureCommutatorRepresentativesCommutatorSet\"><span class=\"name\">instFiniteElemSubtypeMemSubgroupClosureCommutatorRepresentativesCommutatorSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L287-L291","name":"card_commutator_closureCommutatorRepresentatives","line":287,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#card_commutator_closureCommutatorRepresentatives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#card_commutator_closureCommutatorRepresentatives\"><span class=\"name\">card_commutator_closureCommutatorRepresentatives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L282-L285","name":"card_commutatorSet_closureCommutatorRepresentatives","line":282,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#card_commutatorSet_closureCommutatorRepresentatives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#card_commutatorSet_closureCommutatorRepresentatives\"><span class=\"name\">card_commutatorSet_closureCommutatorRepresentatives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L269-L280","name":"image_commutatorSet_closureCommutatorRepresentatives","line":269,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#image_commutatorSet_closureCommutatorRepresentatives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#image_commutatorSet_closureCommutatorRepresentatives\"><span class=\"name\">image_commutatorSet_closureCommutatorRepresentatives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span>.subtype</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L260-L267","name":"rank_closureCommutatorRepresentatives_le","line":260,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#rank_closureCommutatorRepresentatives_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#rank_closureCommutatorRepresentatives_le\"><span class=\"name\">rank_closureCommutatorRepresentatives_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Finiteness.html#Group.rank\">Group.rank</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L256-L258","name":"closureCommutatorRepresentatives_fg","line":256,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives_fg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives_fg\"><span class=\"name\">closureCommutatorRepresentatives_fg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Finiteness.html#Group.FG\">Group.FG</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\">closureCommutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L252-L254","name":"closureCommutatorRepresentatives","line":252,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives","doc":"Subgroup generated by representatives `g₁ g₂ : G` of commutators `⁅g₁, g₂⁆ ∈ G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#closureCommutatorRepresentatives\"><span class=\"name\">closureCommutatorRepresentatives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L249-L250","name":"instFiniteElemProdCommutatorRepresentativesOfCommutatorSet","line":249,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#instFiniteElemProdCommutatorRepresentativesOfCommutatorSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#instFiniteElemProdCommutatorRepresentativesOfCommutatorSet\"><span class=\"name\">instFiniteElemProdCommutatorRepresentativesOfCommutatorSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutatorRepresentatives\">commutatorRepresentatives</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L245-L247","name":"commutatorRepresentatives","line":245,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutatorRepresentatives","doc":"Representatives `(g₁, g₂) : G × G` of commutators `⁅g₁, g₂⁆ ∈ G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutatorRepresentatives\"><span class=\"name\">commutatorRepresentatives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L231-L231","name":"Abelianization.equivOfComm_symm_apply","line":231,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.equivOfComm_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.equivOfComm_symm_apply\"><span class=\"name\">Abelianization</span>.<span class=\"name\">equivOfComm_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Abelianization.equivOfComm</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Abelianization.lift</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">H</span>)</span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L231-L231","name":"Abelianization.equivOfComm_apply","line":231,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.equivOfComm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.equivOfComm_apply\"><span class=\"name\">Abelianization</span>.<span class=\"name\">equivOfComm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Abelianization.equivOfComm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Abelianization.of</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L230-L239","name":"Abelianization.equivOfComm","line":230,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.equivOfComm","doc":"An Abelian group is equivalent to its own abelianization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.equivOfComm\"><span class=\"name\">Abelianization</span>.<span class=\"name\">equivOfComm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L223-L226","name":"abelianizationCongr_trans","line":223,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_trans\"><span class=\"name\">abelianizationCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.abelianizationCongr</span>.trans</span> <span class=\"fn\"><span class=\"fn\">e₂</span>.abelianizationCongr</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.trans</span> <span class=\"fn\">e₂</span>)</span>.abelianizationCongr</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L218-L221","name":"abelianizationCongr_symm","line":218,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_symm\"><span class=\"name\">abelianizationCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.abelianizationCongr</span>.symm</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.symm</span>.abelianizationCongr</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L213-L216","name":"abelianizationCongr_refl","line":213,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_refl\"><span class=\"name\">abelianizationCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.refl\">MulEquiv.refl</a> <span class=\"fn\">G</span>)</span>.abelianizationCongr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.refl\">MulEquiv.refl</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L208-L211","name":"abelianizationCongr_of","line":208,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#abelianizationCongr_of\"><span class=\"name\">abelianizationCongr_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.abelianizationCongr</span> <span class=\"fn\">(<span class=\"fn\">Abelianization.of</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Abelianization.of</span> <span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L196-L206","name":"MulEquiv.abelianizationCongr","line":196,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#MulEquiv.abelianizationCongr","doc":"Equivalent groups have equivalent abelianizations "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#MulEquiv.abelianizationCongr\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">abelianizationCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L182-L185","name":"Abelianization.map_map_apply","line":182,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_map_apply\"><span class=\"name\">Abelianization</span>.<span class=\"name\">map_map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.comp</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L178-L180","name":"Abelianization.map_comp","line":178,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_comp\"><span class=\"name\">Abelianization</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">g</span>)</span>.comp</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.comp</span> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L174-L176","name":"Abelianization.map_id","line":174,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_id\"><span class=\"name\">Abelianization</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">G</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L170-L172","name":"Abelianization.map_of","line":170,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map_of\"><span class=\"name\">Abelianization</span>.<span class=\"name\">map_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\">Abelianization.of</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Abelianization.of</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L166-L168","name":"Abelianization.lift_of_comp","line":166,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift_of_comp","doc":"Use `map` as the preferred simp normal form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift_of_comp\"><span class=\"name\">Abelianization</span>.<span class=\"name\">lift_of_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Abelianization.lift</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Abelianization.of</span>.comp</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\">Abelianization.map</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L162-L164","name":"Abelianization.map","line":162,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map","doc":"The map operation of the `Abelianization` functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.map\"><span class=\"name\">Abelianization</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L154-L154","name":"Abelianization.hom_ext","line":154,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.hom_ext","doc":"See note [partially-applied ext lemmas]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.hom_ext\"><span class=\"name\">Abelianization</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ ψ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.comp</span> <span class=\"fn\">Abelianization.of</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.comp</span> <span class=\"fn\">Abelianization.of</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ψ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L145-L147","name":"Abelianization.lift_of","line":145,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift_of\"><span class=\"name\">Abelianization</span>.<span class=\"name\">lift_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Abelianization.lift</span> <span class=\"fn\">Abelianization.of</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L139-L143","name":"Abelianization.lift.unique","line":139,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift.unique\"><span class=\"name\">Abelianization</span>.<span class=\"name\">lift</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hφ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">(<span class=\"fn\">Abelianization.of</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Abelianization.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L135-L137","name":"Abelianization.lift.of","line":135,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift.of\"><span class=\"name\">Abelianization</span>.<span class=\"name\">lift</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Abelianization.lift</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\">Abelianization.of</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L127-L133","name":"Abelianization.lift","line":127,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift","doc":"If `f : G → A` is a group homomorphism to an abelian group, then `lift f` is the unique map\nfrom the abelianization of a `G` to `A` that factors through `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.lift\"><span class=\"name\">Abelianization</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L122-L125","name":"Abelianization.commutator_subset_ker","line":122,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.commutator_subset_ker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.commutator_subset_ker\"><span class=\"name\">Abelianization</span>.<span class=\"name\">commutator_subset_ker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span>.ker</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L111-L113","name":"Abelianization.mk_eq_of","line":111,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.mk_eq_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.mk_eq_of\"><span class=\"name\">Abelianization</span>.<span class=\"name\">mk_eq_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Coset/Defs.html#QuotientGroup.leftRel\">QuotientGroup.leftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span>)</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Abelianization.of</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L105-L109","name":"Abelianization.of","line":105,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.of","doc":"`of` is the canonical projection from G to its abelianization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.of\"><span class=\"name\">Abelianization</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L100-L101","name":"Abelianization.instFinite","line":100,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instFinite\"><span class=\"name\">Abelianization</span>.<span class=\"name\">instFinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L97-L98","name":"Abelianization.instFintypeOfDecidablePredMemSubgroupCommutator","line":97,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instFintypeOfDecidablePredMemSubgroupCommutator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instFintypeOfDecidablePredMemSubgroupCommutator\"><span class=\"name\">Abelianization</span>.<span class=\"name\">instFintypeOfDecidablePredMemSubgroupCommutator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span></span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L95-L95","name":"Abelianization.instUnique","line":95,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instUnique\"><span class=\"name\">Abelianization</span>.<span class=\"name\">instUnique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L92-L93","name":"Abelianization.instInhabited","line":92,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.instInhabited\"><span class=\"name\">Abelianization</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L83-L90","name":"Abelianization.commGroup","line":83,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization.commGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization.commGroup\"><span class=\"name\">Abelianization</span>.<span class=\"name\">commGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\">Abelianization</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L75-L77","name":"Abelianization","line":75,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#Abelianization","doc":"The abelianization of G is the quotient of G by its commutator subgroup. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#Abelianization\"><span class=\"name\">Abelianization</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L65-L73","name":"commutator_centralizer_commutator_le_center","line":65,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutator_centralizer_commutator_le_center","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutator_centralizer_commutator_le_center\"><span class=\"name\">commutator_centralizer_commutator_le_center</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Centralizer.html#Subgroup.centralizer\">Subgroup.centralizer</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span></span></span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Centralizer.html#Subgroup.centralizer\">Subgroup.centralizer</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span></span></span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Center.html#Subgroup.center\">Subgroup.center</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L60-L63","name":"rank_commutator_le_card","line":60,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#rank_commutator_le_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#rank_commutator_le_card\"><span class=\"name\">rank_commutator_le_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Finiteness.html#Group.rank\">Group.rank</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L56-L58","name":"instFGSubtypeMemSubgroupCommutatorOfFiniteElemCommutatorSet","line":56,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#instFGSubtypeMemSubgroupCommutatorOfFiniteElemCommutatorSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#instFGSubtypeMemSubgroupCommutatorOfFiniteElemCommutatorSet\"><span class=\"name\">instFGSubtypeMemSubgroupCommutatorOfFiniteElemCommutatorSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Finiteness.html#Group.FG\">Group.FG</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L53-L54","name":"commutator_characteristic","line":53,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutator_characteristic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutator_characteristic\"><span class=\"name\">commutator_characteristic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span>.Characteristic</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L50-L51","name":"commutator_eq_normalClosure","line":50,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutator_eq_normalClosure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutator_eq_normalClosure\"><span class=\"name\">commutator_eq_normalClosure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Basic.html#Subgroup.normalClosure\">Subgroup.normalClosure</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L47-L48","name":"commutator_eq_closure","line":47,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutator_eq_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutator_eq_closure\"><span class=\"name\">commutator_eq_closure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#Subgroup.closure\">Subgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Commutator/Basic.html#commutatorSet\">commutatorSet</a> <span class=\"fn\">G</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L44-L45","name":"commutator_def","line":44,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutator_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutator_def\"><span class=\"name\">commutator_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L42-L42","name":"instNormalCommutator","line":42,"kind":"instance","docLink":"./Mathlib/GroupTheory/Abelianization.html#instNormalCommutator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#instNormalCommutator\"><span class=\"name\">instNormalCommutator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\">commutator</a> <span class=\"fn\">G</span>)</span>.Normal</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/4bbdccd9c5f862bf90ff12f0a9e2c8be032b9a84/Mathlib/GroupTheory/Abelianization.lean#L37-L39","name":"commutator","line":37,"kind":"def","docLink":"./Mathlib/GroupTheory/Abelianization.html#commutator","doc":"The commutator subgroup of a group G is the normal subgroup\ngenerated by the commutators [p,q]=`p*q*p⁻¹*q⁻¹`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Abelianization.html#commutator\"><span class=\"name\">commutator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">G</span></span></div></div>"}]}