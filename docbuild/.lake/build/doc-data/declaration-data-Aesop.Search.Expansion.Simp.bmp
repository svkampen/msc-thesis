{"name":"Aesop.Search.Expansion.Simp","instances":[],"imports":["Init","Lean.Meta.Tactic.Simp.SimpAll"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L88-L100","name":"Aesop.simpAll","line":88,"kind":"def","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.simpAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.simpAll\"><span class=\"name\">Aesop</span>.<span class=\"name\">simpAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stats : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a> :=\n  <span class=\"fn\">{\n    <span class=\"fn\">usedTheorems</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">map</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span> }</span>,\n    <span class=\"fn\">diag</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">usedThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">triedThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">congrThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">thmsWithBadKeys</span> :=\n          <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArrayNode.node\">Lean.PersistentArrayNode.node</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a>.toNat</span>)</span></span>,\n            <span class=\"fn\">tail</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a>.toNat</span></span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span>,\n            <span class=\"fn\">shift</span> := <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.initShift\">Lean.PersistentArray.initShift</a>, <span class=\"fn\">tailOff</span> := <span class=\"fn\">0</span> }</span> }</span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L73-L86","name":"Aesop.simpGoalWithAllHypotheses","line":73,"kind":"def","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.simpGoalWithAllHypotheses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.simpGoalWithAllHypotheses\"><span class=\"name\">Aesop</span>.<span class=\"name\">simpGoalWithAllHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simplifyTarget : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stats : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a> :=\n  <span class=\"fn\">{\n    <span class=\"fn\">usedTheorems</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">map</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span> }</span>,\n    <span class=\"fn\">diag</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">usedThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">triedThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">congrThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">thmsWithBadKeys</span> :=\n          <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArrayNode.node\">Lean.PersistentArrayNode.node</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a>.toNat</span>)</span></span>,\n            <span class=\"fn\">tail</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a>.toNat</span></span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span>,\n            <span class=\"fn\">shift</span> := <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.initShift\">Lean.PersistentArray.initShift</a>, <span class=\"fn\">tailOff</span> := <span class=\"fn\">0</span> }</span> }</span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L56-L71","name":"Aesop.simpGoal","line":56,"kind":"def","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.simpGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.simpGoal\"><span class=\"name\">Aesop</span>.<span class=\"name\">simpGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span> := <span class=\"fn\">none</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simplifyTarget : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarIdsToSimp : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> := <span class=\"fn\">#[]</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stats : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a> :=\n  <span class=\"fn\">{\n    <span class=\"fn\">usedTheorems</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">map</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span> }</span>,\n    <span class=\"fn\">diag</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">usedThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">triedThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">congrThmCounter</span> := <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap.Node.entries\">Lean.PersistentHashMap.Node.entries</a> <span class=\"fn\">Lean.PersistentHashMap.mkEmptyEntriesArray</span></span> }</span>,\n        <span class=\"fn\">thmsWithBadKeys</span> :=\n          <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArrayNode.node\">Lean.PersistentArrayNode.node</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a>.toNat</span>)</span></span>,\n            <span class=\"fn\">tail</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a>.toNat</span></span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span>,\n            <span class=\"fn\">shift</span> := <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.initShift\">Lean.PersistentArray.initShift</a>, <span class=\"fn\">tailOff</span> := <span class=\"fn\">0</span> }</span> }</span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L49-L54","name":"Aesop.addLetDeclsToSimpTheoremsUnlessZetaDelta","line":49,"kind":"def","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.addLetDeclsToSimpTheoremsUnlessZetaDelta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.addLetDeclsToSimpTheoremsUnlessZetaDelta\"><span class=\"name\">Aesop</span>.<span class=\"name\">addLetDeclsToSimpTheoremsUnlessZetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L27-L47","name":"Aesop.addLetDeclsToSimpTheorems","line":27,"kind":"def","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.addLetDeclsToSimpTheorems","doc":"Add all `let` hypotheses in the local context as `simp` theorems.\n\nBackground: by default, in the goal `x : _ := v ⊢ P[x]`, `simp` does not\nsubstitute `x` by `v` in the target. The `simp` option `zetaDelta` can be used\nto make `simp` perform this substitution, but we don't want to set it because\nthen Aesop `simp` would diverge from default `simp`, so we would have to adjust\nthe `aesop?` output as well. Instead, we add `let` hypotheses explicitly. This\nway, `simp?` picks them up as well.\n\nSee lean4#3520.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.addLetDeclsToSimpTheorems\"><span class=\"name\">Aesop</span>.<span class=\"name\">addLetDeclsToSimpTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L20-L23","name":"Aesop.SimpResult.newGoal?","line":20,"kind":"def","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.newGoal?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.newGoal?\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpResult</span>.<span class=\"name\">newGoal?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L16-L16","name":"Aesop.SimpResult.simplified","line":16,"kind":"ctor","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.simplified","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.simplified\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpResult</span>.<span class=\"name\">simplified</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(newGoal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usedTheorems : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L15-L15","name":"Aesop.SimpResult.unchanged","line":15,"kind":"ctor","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.unchanged","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.unchanged\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpResult</span>.<span class=\"name\">unchanged</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L14-L14","name":"Aesop.SimpResult.solved","line":14,"kind":"ctor","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.solved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult.solved\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpResult</span>.<span class=\"name\">solved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(usedTheorems : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\">Aesop.SimpResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/5a0ec8588855265ade536f35bcdcf0fb24fd6030/Aesop/Search/Expansion/Simp.lean#L13-L16","name":"Aesop.SimpResult","line":13,"kind":"inductive","docLink":"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Search/Expansion/Simp.html#Aesop.SimpResult\"><span class=\"name\">Aesop</span>.<span class=\"name\">SimpResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}